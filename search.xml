<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【iOS进阶】01 | 开发环境：如何使用 Ruby 工具链统一开发环境？</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="如何使用-Ruby-工具链统一开发环境？"><a href="#如何使用-Ruby-工具链统一开发环境？" class="headerlink" title="如何使用 Ruby 工具链统一开发环境？"></a>如何使用 Ruby 工具链统一开发环境？</h1><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/2021-03-17_10.25.34.png"></p>
<span id="more"></span>

<p>在 iOS 开发过程中，你是不是会经常遇到这些情况：</p>
<p>每次打开一个新项目，都需要手动搭建开发环境；有时候在安装第三方工具时使用到 <code>sudo 权限</code>，导致以后安装工具都需要手工输入密码而无法实施自动化。还有，每当启动一台新 <code>CI</code> 时，就需要手工登录并配置一遍，更可怕的是，原先搭建好的 CI 会随着 Xcode 版本更新需要重新配置。</p>
<p>为什么会这么麻烦呢？就是因为你在项目开始之初没有做好统一配置。</p>
<p>所谓统一配置，就是所有的配置信息都以文本的格式存放在 Git 里面，我们可以随时查看修改记录，以此来帮助我们比较不同配置之间的差异性，然后在这个基础上不断更新迭代。</p>
<p>可以说，有了统一配置，任何工程师都可以搭建出一模一样的开发环境，构建出功能一致的 App；有了统一配置，还可以让我们按需延展 CI 服务，而不用任何手工操作。更重要的是，它还可以应用到各个类似的 iOS 项目中，极大地减轻了项目前期的搭建成本。</p>
<p>既然统一的配置那么重要，那么我们怎样搭建统一配置的开发环境呢？</p>
<h2 id="Ruby-工具链"><a href="#Ruby-工具链" class="headerlink" title="Ruby 工具链"></a>Ruby 工具链</h2><p>我们可以通过 Ruby 工具链为整个项目搭建一致的开发和构建环境。为什么选择 <code>Ruby</code> 而不是其他语言环境呢？因为在 iOS 开发方面，目前流行的第三方工具 <code>CocoaPods</code> 和 <code>fastlane</code> 都是使用 Ruby 来开发的。特别是 Ruby 有非常成熟的依赖库管理工具 <code>RubyGems</code> 和 <code>Bundler</code>，其中 Bundler 可以帮我们有效地管理 CocoaPods 和 fastlane 的版本。</p>
<p>下面一起来看看怎样搭建一个统一的开发环境吧。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/2021-03-17_10.02.14.png"></p>
<p>通常，统一的开发环境应该从操作系统开始。对于 iOS 开发来说，<strong>MacOS</strong> 是目前 iOS 开发唯一支持的操作系统。在公司，MacOS 的版本一般由 IT 部门统一管理和更新。要注意，当公司统一更新了我们开发环境的 MacOS 版本以后，需要同时更新 CI 上 MacOS 的版本，以保持一致。</p>
<h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><p>位于 MacOS 上层的是 Xcode 和 rbenv。其中，<strong>Xcode</strong> 是 iOS 开发和构建工具，在同一个项目里，最好使用同一个版本的 Xcode 进行开发和构建，我们可以在项目的 README.md 文件标注 Xcode 的版本。</p>
<p>像我们将要开发的这款类似朋友圈的 Moments App 项目，我就在对应的 README.md 文件里标明了需要使用 <code>Xcode Version 12.2 (12B45b)</code>。具体内容你也可以在代码仓库找到。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/2021-03-17_10.12.38.png"></p>
<p>那我们怎样才能保证每个人都安装同一个版本号的 Xcode 呢？技巧就是我们不要到有自动更新功能的 Mac App Store 中下载 Xcode，而是到苹果的开发者网站搜索并下载。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/2021-03-17_10.14.30.png"></p>
<p>有时候我们会同时开发多个项目，这样有可能要安装多个不同版本的 Xcode。如果你的机器有多于一个版本的 Xcode，此时需要特别注意，为了保证所使用的编译器版本一致，在每次执行自动化命令之前（如执行<code>bundle exec fastlane test</code>），要先使用<code>xcode-select -s</code>来选择该项目所对应版本的 Xcode。</p>
<p>比如说我的电脑上有多个 Xcode 版本，在开发 Moments App 时，每次执行自动化命令之前都会执行这样一条命令<code>xcode-select -s /Applications/Xcode12.2.app/Contents/Developer</code>来选择 Moments App 项目所使用的 Xcode。这里的<code>Xcode12.2.app</code>就是我安装的 Xcode 12.2 版所在的位置。</p>
<h2 id="rbenv"><a href="#rbenv" class="headerlink" title="rbenv"></a>rbenv</h2><p>有了版本一致的 Xcode 以后，因为后期我们会用到 CocoaPods 等第三方 Ruby 工具，为了自动化安装和管理这些工具，整个项目团队所使用的 Ruby 版本也必须保持一致。为此，我们就需要用到 Ruby 环境管理工具。</p>
<p>目前流行的 Ruby 环境管理工具有 RVM 和 rbenv。我推荐使用的是 rbenv，因为它使用 shims 文件夹来分离各个 Ruby 版本，相对于 RVM 更加轻装而方便使用。千万注意，团队内部不要同时使用不同的 Ruby 环境管理工具，否则项目编译会出错。</p>
<p><strong>rbenv</strong> 是 Ruby 环境管理工具，能够安装、管理、隔离以及在多个 Ruby 版本之间切换。要使用 rbenv，我们可以通过 Homebrew 来安装它，下面是安装 Homebrew 和 rbenv 的脚本。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$ /bin/bash -c <span class="string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span></span><br><span class="line">brew install rbenv ruby-build rbenv-vars</span><br></pre></td></tr></table></figure>

<p>一旦安装 rbenv 完毕，我们需要把以下的设置信息放到你的 Shell 配置文件里面，例如 <code>~/.bash_profile</code> 或者 <code>~/.zshrc</code> 等文件，这样能保证每次打开终端的时候都会初始化 rbenv。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=<span class="string">&quot;$HOME/.rbenv/bin:$PATH&quot;</span> </span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;$(rbenv init -)&quot;</span></span><br></pre></td></tr></table></figure>

<p>接着我们就可以安装和设置项目的 Ruby 环境了。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$ cd $(<span class="variable constant_">PROJECT_DIR</span>)</span><br><span class="line">$ rbenv install <span class="number">2.7</span><span class="number">.1</span></span><br><span class="line">$ rbenv local <span class="number">2.7</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<p>此处是把项目的 Ruby 环境配置为 2.7.1 版本。rbenv 会帮我们建立 一个叫作<code>.ruby-version</code> 的文件，该文件里面只保存一个版本号（例如<code>2.7.1</code>）的字符串。这个包含了版本号的文件可以用 Git 进行管理。如果要更新版本，可以通过<code>rbenv local</code>命令进行，每次更新也由 Git 统一管理，这样就能让其他开发者使用同一版本的 Ruby 开发环境了。</p>
<h2 id="RubyGems-和-Bundler"><a href="#RubyGems-和-Bundler" class="headerlink" title="RubyGems 和 Bundler"></a>RubyGems 和 Bundler</h2><p>RubyGems 和 Bundler 主要是用来安装和管理 CocoaPods 和 fastlane 等第三方工具。</p>
<p>具体来说，RubyGems 是 Ruby 依赖包管理工具。在 Ruby 的世界，包叫作 Gem，我们可以通过<code>gem install</code>命令来安装。但是 RubyGems 在管理 Gem 版本的时候有些缺陷，就有人开发了 Bundler，用它来检查和安装 Gem 的特定版本，以此为 Ruby 项目提供一致性的环境。</p>
<p>要安装 Bundler，我们可执行<code>gem install bundler</code>命令进行，之后，再执行<code>bundle init</code>就可以生成一个 Gemfile 文件，像 CocoaPods 和 fastlane 等依赖包，我们就可以添加到这个文件里面。</p>
<p>具体代码如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">source <span class="string">&quot;https://rubygems.org&quot;</span></span><br><span class="line">gem <span class="string">&quot;cocoapods&quot;</span>, <span class="string">&quot;1.10.0&quot;</span></span><br><span class="line">gem <span class="string">&quot;fastlane&quot;</span>, <span class="string">&quot;2.166.0&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意我们在<code>gem</code>命令里面都指定了依赖包的特定版本号。例如，在我们的 Moment App 就使用了<code>1.10.0</code>版的 CocoaPods，然后执行<code>bundle install</code>来安装各个 Gem。 Bundler 会自动生成一个 <code>Gemfile.lock</code> 文件来锁定所安装的 Gem 的版本，例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DEPENDENCIES</span></span><br><span class="line">  cocoapods (= <span class="number">1.10</span><span class="number">.0</span>)</span><br><span class="line">  fastlane (= <span class="number">2.166</span><span class="number">.0</span>)</span><br></pre></td></tr></table></figure>

<p>为了保证团队其他成员都可以使用版本号一致的 Gem，我们需要把 <code>Gemfile</code> 和 <code>Gemfile.lock</code> 一同保存到 Git 里面统一管理起来。</p>
<p>到此为止，我们已经知道怎样使用 Ruby 工具链配置一个统一的开发环境。但在真实的开发环境中，搭建环境只需要一个人来完成即可，其他成员执行以下脚本就能完成整套开发环境的搭建。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$ ./scripts/setup.<span class="property">sh</span></span><br></pre></td></tr></table></figure>

<p>我们一起看看这个脚本做了些什么？</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Install</span> ruby using rbenv</span><br><span class="line">ruby_version=<span class="string">`cat .ruby-version`</span></span><br><span class="line"><span class="keyword">if</span> [[ ! -d <span class="string">&quot;$HOME/.rbenv/versions/$ruby_version&quot;</span> ]]; then</span><br><span class="line">  rbenv install $ruby_version;</span><br><span class="line">fi</span><br><span class="line"># <span class="title class_">Install</span> bunlder</span><br><span class="line">gem install bundler</span><br><span class="line"># <span class="title class_">Install</span> all gems</span><br><span class="line">bundle install</span><br><span class="line"># <span class="title class_">Install</span> all pods</span><br><span class="line">bundle exec pod install</span><br></pre></td></tr></table></figure>

<p>该脚本主要做了四件事情，第一步是在 rbenv 下安装特定版本的 Ruby 开发环境，然后通过 RubyGems 安装 Bunlder，接着使用 Bundler 安装 CocoaPods 和 fastlane 等依赖包，最后安装各个 Pod。这样，一个统一的项目环境就搭建完成了，接下来开发者就可以打开 <strong>Moments.xcworkspace</strong>进行开发了。</p>
<p>说完 Ruby 环境搭建以后，最后我们一起聊聊保证项目文件一致性的 .gitignore 文件。</p>
<h2 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h2><p>.gitignore 文件是一个配置文件，用来指定让 Git 需要忽略的文件或者目录。如果没有 .gitignore 文件，项目成员可能会不小心把一些自动生成等无关重要的文件或者具有个人信息(例如 <code>xcuserdata</code>)的文件保存到 Git 里面。这就大大增加了查看 Git 修改历史的难度。因此，在项目初期就配置一个合适的 .gitignore 文件，能减轻后续的管理工作。</p>
<p>如何创建 .gitignore 文件呢？</p>
<p>我一般会在 <code>gitignore.io</code> 里面输入关键字，例如 Xcode，Swift 等，然后该网站会帮我们生成一个默认的 .gitignore 文件。咱们项目 Moments App 的.gitignore 文件你可以到<a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/.gitignore">拉勾教育的仓库中</a>查看。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/2021-03-17_10.24.47.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>以上，我们通过 Xcode、rbenv、RubyGems 和 Bundler 搭建一个统一的 iOS 开发和构建环境。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/2021-03-17_10.25.34.png"></p>
<p>再次强调下，为了让各个开发和构建环境能保持一致，我们要把 .ruby-version、 Gemfile 和 Gemfile.lock 文件通过 Git 统一管理起来，并共享给整个项目团队使用。</p>
<p>而且，由于我们的开发环境已经通过 Bundler 管理起来，今后，当使用各个 Gem 工具的时候，也需要使用 Bundler。例如在使用 CocoaPods 时要执行<code>bundle exec pod</code>，以保证我们使用的是项目级别而不是操作系统级别的 Gem 工具。</p>
<p><strong>源码地址：</strong></p>
<blockquote>
<p>README.md<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/README.md">https://github.com/lagoueduCol/iOS-linyongjian/blob/main/README.md</a><br>Moments App 的.gitignore 文件<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/.gitignore">https://github.com/lagoueduCol/iOS-linyongjian/blob/main/.gitignore</a></p>
</blockquote>
<h1 id="学习笔记与扩展"><a href="#学习笔记与扩展" class="headerlink" title="学习笔记与扩展"></a>学习笔记与扩展</h1><p>上文有提到过，目前流行的 Ruby 环境管理工具有 <code>RVM</code> 和 <code>rbenv</code>，文章中推荐使用的是 <code>rbenv</code>，但是，如果我们的团队已经有人使用 <code>RVM</code> 来管理ruby，因为 <strong>团队内部不能同时使用不同的 Ruby 环境管理工具，否则项目编译会出错</strong> ，所以，我们可能也需要使用 <code>RVM</code> 来管理ruby了。</p>
<p>下面我们就来了解一下 <code>RVM</code>。</p>
<p><a href="https://rvm.io/">RVM</a> 是一个命令行工具，它允许我们轻松安装、管理和使用从解释器到 gem 集的多个 ruby 环境。 </p>
<h2 id="RVM-安装"><a href="#RVM-安装" class="headerlink" title="RVM 安装"></a>RVM 安装</h2><p>首先，安装 <code>RVM</code> 需要使用 <code>gpg</code> 或者 <code>gpg2</code>，如果没有需要使用 <code>Homebrew</code> 进行安装：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">brew install gpg</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">brew install gpg2</span><br></pre></td></tr></table></figure>

<p>如果没有 <code>Homebrew</code> 可以用以下方法安装：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span></span><br></pre></td></tr></table></figure>

<p>安装完 <code>gpg</code> 、<code>gpg2</code>之后，需要安装 GPG keys：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gpg --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br></pre></td></tr></table></figure>

<p>安装完 <code>GPG keys</code> ，就可以愉快地安装rvm了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">curl -sSL <span class="attr">https</span>:<span class="comment">//get.rvm.io | bash -s stable</span></span><br></pre></td></tr></table></figure>

<p>安装成功之后，需要配置 <code>RVM</code> 开发环境，打开<code>~/.bash_profile</code> 或者 <code>~/.zshrc </code> 文件，在文件最后一行增加下面的内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[[ -s<span class="string">&quot;$HOME/.rvm/scripts/rvm&quot;</span>]] &amp;&amp; source<span class="string">&quot;$HOME/.rvm/scripts/rvm&quot;</span># <span class="title class_">Load</span> <span class="variable constant_">RVM</span> into a shell session *<span class="keyword">as</span> afunction*</span><br></pre></td></tr></table></figure>

<p>至此，<code>RVM</code> 就算安装完成了，我们可以通过 <code>rvm -v</code> 代码验证安装</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/16786723453552.jpg"></p>
<h2 id="RVM-使用"><a href="#RVM-使用" class="headerlink" title="RVM 使用"></a>RVM 使用</h2><h3 id="查看可安装的Ruby版本"><a href="#查看可安装的Ruby版本" class="headerlink" title="查看可安装的Ruby版本"></a>查看可安装的Ruby版本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rvm list known</span><br></pre></td></tr></table></figure>

<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/16786726089796.jpg"></p>
<h3 id="安装一个-Ruby-版本"><a href="#安装一个-Ruby-版本" class="headerlink" title="安装一个 Ruby 版本"></a>安装一个 Ruby 版本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rvm install <span class="number">3.0</span><span class="number">.0</span> </span><br></pre></td></tr></table></figure>

<h3 id="查询已经安装的-Ruby-版本"><a href="#查询已经安装的-Ruby-版本" class="headerlink" title="查询已经安装的 Ruby 版本"></a>查询已经安装的 Ruby 版本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rvm list</span><br></pre></td></tr></table></figure>

<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/16786729194881.jpg"></p>
<blockquote>
<p>=&gt; 指向的是当前使用ruby版本<br>=* 指向的是当前和默认ruby版本</p>
<ul>
<li>指向的是默认ruby版本</li>
</ul>
</blockquote>
<p>我们可以通过以下命令来进行切换：</p>
<h3 id="切换-Ruby-版本"><a href="#切换-Ruby-版本" class="headerlink" title="切换 Ruby 版本"></a>切换 Ruby 版本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rvm use <span class="number">3.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<h3 id="设置默认-Ruby-版本"><a href="#设置默认-Ruby-版本" class="headerlink" title="设置默认 Ruby 版本"></a>设置默认 Ruby 版本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rvm use <span class="number">3.0</span><span class="number">.0</span> --<span class="keyword">default</span></span><br></pre></td></tr></table></figure>

<h3 id="切换-Ruby-版本并设置为默认"><a href="#切换-Ruby-版本并设置为默认" class="headerlink" title="切换 Ruby 版本并设置为默认"></a>切换 Ruby 版本并设置为默认</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rvm use ext-ruby-<span class="number">3.0</span><span class="number">.0</span> --<span class="keyword">default</span></span><br></pre></td></tr></table></figure>

<h3 id="卸载已安装-Ruby-版本"><a href="#卸载已安装-Ruby-版本" class="headerlink" title="卸载已安装 Ruby 版本"></a>卸载已安装 Ruby 版本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rvm remove <span class="number">3.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<h3 id="查看-Ruby-的安装目录"><a href="#查看-Ruby-的安装目录" class="headerlink" title="查看 Ruby 的安装目录"></a>查看 Ruby 的安装目录</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看安装的 Ruby 目录</span></span><br><span class="line"><span class="comment">// -a：打印每个匹配文件名的所有匹配路径名</span></span><br><span class="line"><span class="comment">// which：通过搜索 PATH 环境变量中的路径来搜索与参数名称匹配的可执行文件</span></span><br><span class="line">which -a ruby</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">which ruby</span><br></pre></td></tr></table></figure>

<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/16786736350427.jpg"></p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/16786739572124.jpg"></p>
<h3 id="查看-rvm-命令帮助"><a href="#查看-rvm-命令帮助" class="headerlink" title="查看 rvm 命令帮助"></a>查看 rvm 命令帮助</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rvm help </span><br></pre></td></tr></table></figure>

<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01%EF%BD%9C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Ruby%20%E5%B7%A5%E5%85%B7%E9%93%BE%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%9F/16786740460740.jpg"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS进阶】02｜依赖管理：如何使用CocoaPods统一依赖库的管理？</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="如何使用-CocoaPods-统一依赖库的管理？"><a href="#如何使用-CocoaPods-统一依赖库的管理？" class="headerlink" title="如何使用 CocoaPods 统一依赖库的管理？"></a>如何使用 CocoaPods 统一依赖库的管理？</h1><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788496868852.jpg"></p>
<span id="more"></span>

<p>在 iOS App 开发方面，几乎所有的 App 都需要使用到第三方依赖库。依赖库不仅能为我们提供丰富的功能，还能避免我们从头开发，在节省时间的同时也减少许多 Bug 。</p>
<p>但伴随着软件功能越来越丰富，依赖库数量越来越多，由此也出现了“依赖地狱”，比如依赖库循环依赖，底层依赖库版本冲突等。为了解决此类问题，于是，依赖库管理工具也就出现了。</p>
<p>目前流行的依赖库管理工具主要有：<strong>Git Submodules</strong>、<strong>Carthage</strong>、 <strong>Swift Package Manager</strong> 和 <strong>CocoaPods</strong>。在这里我们选择 CocoaPods。为什么呢？原因有三：</p>
<ol>
<li><p>CocoaPods 非常成熟，十分稳定，并且简单易用，学习成本低，效果明显；</p>
</li>
<li><p>CocoaPods 会自动整合 Xcode 项目，使得其他项目成员在使用第三方库时无须任何额外的手工操作；</p>
</li>
<li><p>CocoaPods 已经成为 iOS 业界标准，支持几乎所有的开源库和商业库，即便是 Objective-C 的依赖库以及二进制文件（binary）依赖库，CocoaPods 也提供支持。</p>
</li>
</ol>
<p>那么，怎样使用 CocoaPods 来管理第三方依赖库呢？接下来我会从<strong>语义化版本管理</strong>、<strong>Pod 版本管理</strong>、<strong>Pod 版本更新</strong>三个方面展开介绍。</p>
<h2 id="语义化版本管理"><a href="#语义化版本管理" class="headerlink" title="语义化版本管理"></a>语义化版本管理</h2><p>开发软件，免不了要更新迭代，所以每一次更新的版本号管理变得很重要。并且，一旦版本号混乱，就会导致一系列问题，比如很难查找和修改线上崩溃，没办法支持多团队并行开发，等等。为了避免此类问题，我们可以使用语义化版本管理（Semantic Versioning）来统一版本号的定义规范。</p>
<p>语义化版本号是一种通用的版本号格式规范，目前绝大部分优秀的第三方依赖库都遵循这一规范来发布版本。</p>
<p>具体来说，语义化版本号的版本号一般包括四部分：<code>MAJOR、MINOR、PATCH、BUILD</code>。每一部分都由递增的数值组成，例如 1.2.3.4，其中 1 是MAJOR， 2 是 MINOR。如果我们更新 MINOR 版本号，那么下一个版本就是 1.3.0.0。接下来我详细介绍下这四部分。</p>
<ul>
<li><p><strong>MAJOR 是指主版本号</strong>，通常在重大更新的时候才会需要更新主版本号。例如 iOS 每年都会更新一个主版本号。而对于第三方库来说，主版本号的更新，表示该库的 API 新增了重大功能，或者引入了不可兼容的更新 （breaking changes）。</p>
</li>
<li><p><strong>MINOR 是指副版本号</strong>，用于小功能的改善。例如 iOS 14 在发布主版本后，在一年内可能发布多个副版本如 14.1、 14.2 来完善其系统功能。一般对于第三方库来说，副版本的更新就是新增一些 API，但不包含不可兼容的更新。</p>
</li>
<li><p><strong>PATCH 是指补丁版本号</strong>，一般用于 bug fix 以及修复安全性问题等。对于第三方库来说，补丁版本号的更新也不应该有不可兼容的更新。虽然实际操作中这会有些困难，但我们可以通过把原有 API 标记为 deprecated，或者为新 API 参数提供默认值等办法来解决。</p>
</li>
<li><p><strong>BUILD 是指构建版本号</strong>，通常在内部测试时使用。一般当我们使用 CI 服务器进行自动构建时，构建版本号会自动更新。</p>
</li>
</ul>
<h2 id="Pod-版本管理"><a href="#Pod-版本管理" class="headerlink" title="Pod 版本管理"></a>Pod 版本管理</h2><p>要使用 CocoaPods 管理第三方依赖库，首先要新建一个 Podfile 文件，然后执行 <code>bundle exec pod install</code> 命令来安装所有依赖库。这时候 CocoaPods 会自动帮我们建立一个 Podfile.lock 文件和一个 Workspace文档。</p>
<p>注意，在第一讲我们说过，由于是通过 Bundler 来安装 CocoaPods，每次执行<code>pod</code>命令前，都需要加上<code>bundle exec</code>。不过为了简洁，后面涉及<code>pod</code>命令时，我会省略<code>bundle exec</code>部分。</p>
<p>接下来，我详细介绍下 Podfile 文件、 Podfile.lock 和 Workspace 文档到底是什么，以及如何使用。</p>
<h3 id="Podfile-文件"><a href="#Podfile-文件" class="headerlink" title="Podfile 文件"></a>Podfile 文件</h3><p><code>Podfile</code> 文件是一个配置文件，它主要是用来描述 Xcode 项目里各个 target 的依赖库。我们项目的 Podfile 文件可以在<a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Podfile">仓库中</a>找到。在这里，我主要和你介绍一下 Podfile 文件中的几个重要配置。</p>
<h3 id="source-配置"><a href="#source-配置" class="headerlink" title="source 配置"></a>source 配置</h3><p><code>source</code>用于指向 PodSpec（Pod 规范）文件的 Repo，从而使得 CocoaPods 能查询到相应的 PodSpec 文件。</p>
<p>具体来说，当使用公共依赖库的时候，source需要指向 CocoaPods Master Repo，这个主仓库集中存放所有公共依赖库的 PodSpec 文件。 由于 CocoaPods 经常被开发者吐槽 Pod 下载很慢，因此 CocoaPods 使用了 CDN （Content Delivery Network，内容分发网络）来缓存整个 CocoaPods Master Repo， 方便开发者快速下载。具体的配置方法就是使source指向 CND 的地址，代码示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">source <span class="string">&#x27;https://cdn.cocoapods.org/&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果使用的是私有依赖库，我们也需要把source指向私有库的 PodSpec Repo，以使得 CocoaPods 能找到相应的 PodSpec 文件。 代码示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">source <span class="string">&#x27;https://my-git-server.com/internal-podspecs&#x27;</span></span><br></pre></td></tr></table></figure>

<p>注意，当我们使用私有库时，执行pod install命令的机器必须能访问到source所指向的 Repo。</p>
<h3 id="project-和-workspace"><a href="#project-和-workspace" class="headerlink" title="project 和 workspace"></a>project 和 workspace</h3><p>project用于指定我们的主项目文档。该项目文档会使用到 CocoaPods 管理的所有第三方依赖库。</p>
<p>workspace用于指定要生成和更新的 Workspace 文档。和其他依赖库管理工具不一样，CocoaPods 会自动生成一个 Workspace 文档，然后我们只能使用该文档而不是 Xcode 项目文档来进行后续开发。</p>
<p>代码示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">project <span class="string">&#x27;./Moments/Moments.xcodeproj&#x27;</span></span><br><span class="line">workspace <span class="string">&#x27;./Moments.xcworkspace&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这其中 <code>Moments.xcodeproj</code> 就是我们的主项目文档，它一般放在和项目名字相同的下一层目录下。</p>
<p>而 <code>Moments.xcworkspace</code> 是 CocoaPods 为我们生成的 Workspace文档，为了统一，我建议名字也是和主项目相同。</p>
<h3 id="platform-和-use-frameworks"><a href="#platform-和-use-frameworks" class="headerlink" title="platform 和 use_frameworks"></a>platform 和 use_frameworks</h3><p>先看示例，它表示什么呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">platform :ios, <span class="string">&#x27;14.0&#x27;</span></span><br><span class="line">use_frameworks!</span><br></pre></td></tr></table></figure>

<p>为了保证所有依赖库与主项目在编译和运行时兼容，我们指定的系统版本号需要和主项目所支持的系统版本号保持一致。而<code>platform</code>就是用于指定操作系统以及所支持系统的最低版本号。比如，例子中的<code>platform :ios, &#39;14.0&#39;</code>就表示支持 iOS 14.0 以上的所有 iOS 版本。</p>
<p>另外一行的<code>use_frameworks!</code>这一配置会让 CocoaPods 把所有第三方依赖库打包生成一个动态加载库，而不是静态库。因为动态库是我们经常用到的，它能有效地加快编译和链接的速度。</p>
<h3 id="组织同类型的第三方依赖库"><a href="#组织同类型的第三方依赖库" class="headerlink" title="组织同类型的第三方依赖库"></a>组织同类型的第三方依赖库</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">def dev_pods</span><br><span class="line">  pod <span class="string">&#x27;SwiftLint&#x27;</span>, <span class="string">&#x27;0.40.3&#x27;</span>, <span class="attr">configurations</span>: [<span class="string">&#x27;Debug&#x27;</span>]</span><br><span class="line">  pod <span class="string">&#x27;SwiftGen&#x27;</span>, <span class="string">&#x27;6.4.0&#x27;</span>, <span class="attr">configurations</span>: [<span class="string">&#x27;Debug&#x27;</span>]</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>其中<code>configurations: [&#39;Debug&#39;]</code>用于指定该依赖库只是使用到<code>Debug</code>构建目标（target）里面，而不在其他（如<code>Release</code>）构建目标里面，这样做能有效减少 App Store 发布版本的体积。</p>
<p><code>def dev_pods end</code>代码块是“复用同一类依赖库方式”的意思，我们可以把同类型的依赖库都放进这个代码块里面。比如，我们的 Moments 项目中就分别有<code>dev_pods</code>（开发相关的库）,<code>core_pods</code>（核心库）以及<code>thirdparty_pods</code>(第三方库)等代码块定义。</p>
<h3 id="target-配置"><a href="#target-配置" class="headerlink" title="target 配置"></a>target 配置</h3><p>有了这些复用库定义以后，怎样使用到项目的构建目标（target）里面呢？下面就是一个例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">target <span class="string">&#x27;Moments&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  dev_pods</span><br><span class="line">  core_pods</span><br><span class="line">  # other pods...</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>我们可以把构建目标所使用的所有依赖库放进<code>target</code>代码块中间，上面中的<code>Moments</code>就是我们的 App 构建目标。该构建目标依赖了<code>dev_pods</code>和<code>core_pods</code>等各组依赖库。执行<code>pod install</code>的时候，CocoaPods 会把<code>dev_pods</code>代码块自动展开为<code>SwiftLint</code>和<code>SwiftGen</code>，那么<code>Moments</code>构建目标能使用<code>SwiftLint</code>和<code>SwiftGen</code>依赖库了。</p>
<h3 id="依赖库的版本"><a href="#依赖库的版本" class="headerlink" title="依赖库的版本"></a>依赖库的版本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pod <span class="string">&#x27;RxSwift&#x27;</span>, <span class="string">&#x27;= 5.1.1&#x27;</span></span><br><span class="line">pod <span class="string">&#x27;RxRelay&#x27;</span>, <span class="string">&#x27;= 5.1.1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在 CocoaPods 里面，每一个依赖库称为一个 Pod （注意这里首字母大写，Pod 指一个库），指定一个 Pod 的命令是<code>pod</code>（注意这里是小写，表示一条命令）。在 Podfile 里面我们可以通过这样的格式<code>pod &#39;RxSwift&#39;, &#39;= 5.1.1&#39;</code>来配置依赖库的版本号。其中，<code>RxSwift</code>或者<code>RxRelay</code>是依赖库的名字，<code>5.1.1</code>为版本号。这些库的名字以及版本号都可以在 CocoaPods 官网上找到。</p>
<p><strong>为了统一管理第三方依赖库的版本，我建议统一使用 <code>= </code>来锁定该依赖库的版本，这样就能保证每次执行<code>pod install</code>的时候都可以为同一个库下载同一个版本。</strong></p>
<p>除了 <code>=</code> 操作符以外，CocoaPods 还支持其他操作符来指定版本：</p>
<ul>
<li><p><code>&gt; 0.1</code>表示大于 0.1 的任何版本，这样可以包含 0.2 或者 1.0；</p>
</li>
<li><p><code>&gt;= 0.1</code>表示大于或等于 0.1 的任何版本；</p>
</li>
<li><p><code>&lt; 0.1</code>表示少于 0.1 的任何版本；</p>
</li>
<li><p><code>&lt;= 0.1</code>表示少于或等于 0.1 的任何版本；</p>
</li>
<li><p><code>~&gt; 0.1.2</code>表示大于 0.1.2 而且最高支持 0.1.* 的版本，但不包含 0.2 版本。</p>
</li>
</ul>
<p>这几个操作符相里面，<code>~&gt;</code>（Squiggy arrow）操作符更为常用，它是以最后一个部分的版本号（例子中 0.1.2 的最后一个部分是补丁版本号 ..2）来计算可以支持的最高版本号。</p>
<p>例如<code>~&gt; 0.1.2</code>表示 &gt;= 0.1.2 并且 &lt; 0.2.0，但不能等于 0.2.0， 因为 0.2.0 已经更新了副版本号而不仅仅是补丁版本号了。</p>
<p>另外一个例子是<code>~&gt; 0.1</code>，表示  &gt;= 0.1  并且 &lt; 1.0，举例来说，我们可以更新到 0.9 但不能更新到 1.0。</p>
<p>前面我介绍的是引用外部的第三方依赖库，如果我们的项目有自己的内部依赖库，要怎样在 CocoaPods 引用它呢？其实很简单，我们可以执行以下命令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pod <span class="string">&#x27;DesignKit&#x27;</span>, :<span class="function"><span class="params">path</span> =&gt;</span> <span class="string">&#x27;./Frameworks/DesignKit&#x27;</span>, :<span class="function"><span class="params">inhibit_warnings</span> =&gt;</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>和其他外部依赖库不一样，我们需要使用<code>:path</code>来指定该内部库的路径。</p>
<h3 id="Podfile-lock-文件"><a href="#Podfile-lock-文件" class="headerlink" title="Podfile.lock 文件"></a>Podfile.lock 文件</h3><p><code>Podfile.lock</code> 文件是由 CocoaPods 自动生成和更新的，该文件会详细列举所有依赖库具体的版本号。比如，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">DEPENDENCIES</span>:</span><br><span class="line">  - <span class="title class_">Alamofire</span> (= <span class="number">5.2</span><span class="number">.0</span>)</span><br><span class="line">  - <span class="title class_">Firebase</span>/<span class="title class_">Analytics</span> (= <span class="number">7.0</span><span class="number">.0</span>)</span><br><span class="line"><span class="variable constant_">PODFILE</span> <span class="attr">CHECKSUM</span>: 400d19dbc4f5050f438797c5c6459ca0ef74a777</span><br></pre></td></tr></table></figure>

<p>当执行<code>pod install</code>后，CocoaPods 会根据 Podfile 文件解释出各依赖库的特定版本号，然后一一列举在 <code>DEPENDENCIES</code> 下面。在上述的例子中，我们的 App 在构建过程中使用了5.2.0 的 Alamofire 库以及 7.0.0 的 Firebase Analytics 库。</p>
<p><code>PODFILE CHECKSUM</code> 用于记录 Podfile 的验证码，任何库的版本号的更改，都会改变该验证码。这样能帮助我们在不同的机器上，快速检测依赖库的版本号是否一致。</p>
<p>我建议要把 <code>Podfile</code> 和 <code>Podfile.lock</code> 文件一同 commit 并 push 到 Git 代码管理服务器里面。特别是在团队开发的环境下，这样能帮助我们保证各个依赖库版本号的一致性。</p>
<p>在实践操作中，无论我们在哪台机器上执行<code>pod install</code>， <code>PODFILE CHECKSUM</code> 都不应该发生任何改变。因为我们在 Git 保存了 <code>Podfile.lock</code>，一旦我们发现老版本 App 的 Bug ，就可以根据该文件为各个依赖库重新安装同一版本号，来重现和定位问题，从而帮助我们快速修改这些 Bug。</p>
<h3 id="Workspace-文档"><a href="#Workspace-文档" class="headerlink" title="Workspace 文档"></a>Workspace 文档</h3><p><code>Workspace</code> 文档是 Xcode 管理子项目的方式。通过 Workspace，我们可以把相关联的多个 Xcode 子项目组合起来方便开发。</p>
<p>前面说过，当我们执行<code>pod install</code>的时候，CocoaPods 会自动创建或者更新一个叫作 Pods 的项目文档（<code>Pods.xcodeproj</code> ）以及一个 Workspace 文档（在我们项目中叫作 <code>Moments.xcworkspace</code>）。</p>
<p>其中，Pods 项目文档负责统一管理各个依赖库，当我们在 Podfile 里面指定构建成动态库的时候，该项目会自动生成一个名叫<code>Pods_&lt;项目名称&gt;.framework</code>的动态库供我们项目使用。</p>
<p>而 Workspace 文档则统一管理了我们原有的主项目 （Moments.xcodeproj）以及那个 Pods 项目。</p>
<p>与此同时，CocoaPods 还会修改 Xcode 项目中的 <code>Build Phases</code>  以此来检测 <code>Podfile.lock</code> 和 <code>Manifest.lock</code> 文件的一致性，并把<code>Pods_&lt;项目名称&gt;.framework</code>动态库嵌入我们的主项目中去。</p>
<p>以上所有操作都是由 CocoaPods 自动帮我们完成。以后的开发，我们都可以打开 Workspace 文档而不是原有的 Xcode 项目文档来进行。</p>
<h2 id="Pod-版本更新"><a href="#Pod-版本更新" class="headerlink" title="Pod 版本更新"></a>Pod 版本更新</h2><p>使用 CocoaPods 管理第三方依赖库的操作非常简单，可是一旦使用不当，特别是在 Pod 更新的时候，很容易引起依赖库版本不一致，从而出现各种问题。</p>
<p>比如，在编译程序的时候，有些开发者可以顺利进行，而另外一些开发者编译时候就会出错；或者程序在本地编译时运行良好，一旦在 <code>CI</code> 上构建，就会出现 App 崩溃，等等。</p>
<p>那么，怎么保证更新 Pod 的时候都能保证版本一致呢？</p>
<p>下面结合我的实践经验，以第三方网络库 Alamofire 为例子和你介绍下。</p>
<p><strong>第一步</strong>，CocoaPods 已经为我们提供了<code>pod outdated</code>命令，我们可以用它一次查看所有 Pod 的最新版本，而无须到 GitHub 上逐一寻找。下面是执行<code>pod outdated</code>命令的其中一条结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">The</span> following pod updates are <span class="attr">available</span>:</span><br><span class="line">- <span class="title class_">Alamofire</span> <span class="number">5.2</span><span class="number">.0</span> -&gt; <span class="number">5.2</span><span class="number">.0</span> (latest version <span class="number">5.4</span><span class="number">.0</span>)</span><br></pre></td></tr></table></figure>

<p>这表示当前我们使用了版本为 5.2.0 的 Alamofire ，其最新版本为 5.4.0。如果我们决定更新到版本 5.4.0，那么可以继续下一步。</p>
<p><strong>第二步</strong>，在更新依赖库版本之前，为了避免在新版本中不小心引入 Bug，我们需要了解新的版本到底提供了哪些新功能，修改了哪些 Bug，与老版本是否兼容等事项。具体我们可以到 CocoaPods 官网上查找需要更新的第三方依赖库，然后在 GitHub 等平台上找到，并仔细阅读该库的版本说明（<code>release note</code>）。</p>
<p><code>请注意，我们要阅读当前使用版本到要更新的版本之间的所有版本说明</code>。 在这个例子中，我们要阅读 5.2.1，5.2.2，5.3.0 和 5.4.0 的所有版本说明。这些版本说明会列出新增功能，更新的 API，修改的 Bug，有没有不可兼容的更新 。</p>
<p><strong>第三步</strong>，在 Podfile 文件里把要更新的 Pod 的版本号进行修改。例如把<code>pod &#39;Alamofire&#39;, &#39;= 5.2.0&#39;</code>改成<code>pod &#39;Alamofire&#39;, &#39;= 5.4.0&#39;</code>。 然后执行pod install来重新生成 Podfile.lock 文件。</p>
<p>此时特别注意的是，我们要使用<code>pod install</code>而不是<code>pod update</code>。因为执行pod update会自动更新所有 Pod 的版本，这可能会更新了一些我们目前还不想更新的 Pod，从而会引入一些难以觉察的问题。</p>
<p><strong>第四步</strong>，如果所更新的版本包含了不可兼容的更新，我们需要修改代码来保证代码能顺利完成编译。</p>
<p><strong>第五步</strong>，很多第三方依赖库都是一些通用的基础组件，一旦发生问题会影响到整个 App 的功能，因此我们需要根据所更新的库进行回归测试。例如当更新了 Alamofire 库的时候，我们需要把每个网络请求都执行一遍，避免所更新的版本引入新的 Bug。</p>
<p><strong>第六步</strong>，为了把更新的版本共享给所有开发者和 CI 服务器，我们需要把 Podfile 和 Podfile.lock 文件一同 commit 并 push 到 Git 代码管理服务器，并通过 Pull Request 流程并入主分支。</p>
<p><strong>第七步</strong>，一旦更新的代码并入主分支后，要通过 Slack 等内部通信软件告诉所有开发者 pull 或者 rebase 主分支的代码，并执行pod install来更新他们开发环境的所有依赖库。</p>
<p><code>特别注意，千万不要使用pod update，因为pod update会自动把开发者机器上所有 Pod 的版本自动更新了</code>。这种更新往往不是我们想要的结果，我们希望统一更新各个 Pod 的版本，并通过 Git 进行集中管理。</p>
<p>如果开发者在编译新代码前没有执行pod install命令，会出现以下的错误。</p>
<blockquote>
<p>The sandbox is not in sync with the Podfile.lock. Run ‘pod install’ or update your CocoaPods installation.</p>
</blockquote>
<p>这错误可以有效提醒所有开发者，需要再次执行pod install来更新他们本地的依赖库，从而保证所有开发者使用的依赖库的版本都是一致的。</p>
<p>另外，如果更新了基础组件的依赖库（如网络库），在测试阶段，我们还需要进行全面的回归测试。因为这些基础组件库的新版本如果有 Bug 很可能导致我们的 App 会发生大比例的崩溃，严重影响用户的体验。</p>
<p>有了上面的一流程，我们就可以有效地保证每个开发者使用的依赖库版本都是一致的，同时也能保证 CI 在自动构建 App 的时候所使用的依赖库版本也是统一的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一讲我介绍了如何使用 CocoaPods 来统一管理依赖库的版本。特别是根据我自己的经验总结了一套更新 Pod 版本的流程，希望你灵活使用这些步骤，从而少走弯路。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788497199239.jpg"></p>
<p><strong>这里我再特别强调一下，为了保证依赖库版本都能保持一致，尽量不要执行pod update，而是使用通过修改 Podfile 文件里的版本号并执行pod install来更新 Pod 的版本，然后把 Podfile 和 Podfile.lock 文件一同并入 Git 主分支中进行统一管理。</strong></p>
<h3 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h3><blockquote>
<p>Podfile 文件地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Podfile">https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Podfile</a></p>
</blockquote>
<h1 id="学习笔记与扩展"><a href="#学习笔记与扩展" class="headerlink" title="学习笔记与扩展"></a>学习笔记与扩展</h1><h2 id="Carthage-的简单使用"><a href="#Carthage-的简单使用" class="headerlink" title="Carthage 的简单使用"></a>Carthage 的简单使用</h2><h3 id="一、安装-Carthage："><a href="#一、安装-Carthage：" class="headerlink" title="一、安装 Carthage："></a>一、安装 Carthage：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">brew install carthage</span><br><span class="line"><span class="comment">// 查看版本</span></span><br><span class="line">carthage version</span><br><span class="line"><span class="comment">// 升级</span></span><br><span class="line">brew upgrade carthage</span><br><span class="line"><span class="comment">// 卸载</span></span><br><span class="line">brew uninstall carthage</span><br></pre></td></tr></table></figure>

<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788497339391.jpg"></p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788497595924.jpg"></p>
<h3 id="二、使用-Carthage-下载三方库"><a href="#二、使用-Carthage-下载三方库" class="headerlink" title="二、使用 Carthage 下载三方库"></a>二、使用 Carthage 下载三方库</h3><h4 id="1、在工程文件里创建-Cartfile-文件"><a href="#1、在工程文件里创建-Cartfile-文件" class="headerlink" title="1、在工程文件里创建 Cartfile 文件:"></a>1、在工程文件里创建 Cartfile 文件:</h4><p><code>cd</code> 到工程目录下，然后执行如下命令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 Cartfile 文件</span></span><br><span class="line">touch <span class="title class_">Cartfile</span></span><br><span class="line"><span class="comment">// 使用 Xcode 命令打开 Cartfile 文件</span></span><br><span class="line">open -a <span class="title class_">Xcode</span> <span class="title class_">Cartfile</span></span><br></pre></td></tr></table></figure>

<h4 id="2、在-Cartfile-文件添加依赖库"><a href="#2、在-Cartfile-文件添加依赖库" class="headerlink" title="2、在 Cartfile 文件添加依赖库"></a>2、在 Cartfile 文件添加依赖库</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">github <span class="string">&quot;SnapKit/SnapKit&quot;</span> ~&gt; <span class="number">5.6</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788497742378.jpg"></p>
<p>版本含义：如果没有指明版本号，则会自动使用最新的版本</p>
<ul>
<li><code>~&gt;5.0</code>：表示使用版本 <code>5.0</code> 以上但是低于 <code>6.0</code> 的最新版本，如 <code>5.1</code> ，<code>5.4</code></li>
<li><code>==5.0</code>：表示使用 <code>5.0</code> 版本</li>
<li><code>&gt;=5.0</code>：表示使用 <code>5.0</code> 或更高的版本</li>
</ul>
<h4 id="3、保存-Cartfile-文件，然后执行安装"><a href="#3、保存-Cartfile-文件，然后执行安装" class="headerlink" title="3、保存 Cartfile 文件，然后执行安装"></a>3、保存 Cartfile 文件，然后执行安装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载添加依赖库的第三方框架</span></span><br><span class="line">carthage update</span><br></pre></td></tr></table></figure>

<p>执行成功之后，会在工程目录里生成一个 <code>Carthage</code> 的文件夹，里面有自动生成的 <code>framework</code>:</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788497876744.jpg"></p>
<ul>
<li>有时候 Carthage 更新会出现 arm64 报错：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A shell task (<span class="regexp">/usr/</span>bin/xcrun lipo -create /<span class="title class_">Users</span>/coming_ay/<span class="title class_">Library</span>/<span class="title class_">Caches</span>/org.<span class="property">carthage</span>.<span class="property">CarthageKit</span>/<span class="title class_">DerivedData</span>/<span class="number">12.5</span><span class="number">.1_12E507</span>/<span class="title class_">Alamofire</span>/<span class="number">5.4</span><span class="number">.4</span>/<span class="title class_">Build</span>/<span class="title class_">Intermediates</span>.<span class="property">noindex</span>/<span class="title class_">ArchiveIntermediates</span>/<span class="title class_">Alamofire</span>\ iOS/<span class="title class_">IntermediateBuildFilesPath</span>/<span class="title class_">UninstalledProducts</span>/iphoneos/<span class="title class_">Alamofire</span>.<span class="property">framework</span>/<span class="title class_">Alamofire</span> /<span class="title class_">Users</span>/coming_ay/<span class="title class_">Library</span>/<span class="title class_">Caches</span>/org.<span class="property">carthage</span>.<span class="property">CarthageKit</span>/<span class="title class_">DerivedData</span>/<span class="number">12.5</span><span class="number">.1_12E507</span>/<span class="title class_">Alamofire</span>/<span class="number">5.4</span><span class="number">.4</span>/<span class="title class_">Build</span>/<span class="title class_">Products</span>/<span class="title class_">Release</span>-iphonesimulator/<span class="title class_">Alamofire</span>.<span class="property">framework</span>/<span class="title class_">Alamofire</span> -output /<span class="title class_">Users</span>/coming_ay/<span class="title class_">Desktop</span>/AY_Project/<span class="number">123456</span>/<span class="title class_">Carthage</span>/<span class="title class_">Build</span>/iOS/<span class="title class_">Alamofire</span>.<span class="property">framework</span>/<span class="title class_">Alamofire</span>) failed <span class="keyword">with</span> exit code <span class="number">1</span>:</span><br><span class="line">fatal <span class="attr">error</span>: <span class="regexp">/Applications/</span><span class="title class_">Xcode</span>.<span class="property">app</span>/<span class="title class_">Contents</span>/<span class="title class_">Developer</span>/<span class="title class_">Toolchains</span>/<span class="title class_">XcodeDefault</span>.<span class="property">xctoolchain</span>/usr/bin/<span class="attr">lipo</span>: <span class="regexp">/Users/</span>coming_ay/<span class="title class_">Library</span>/<span class="title class_">Caches</span>/org.<span class="property">carthage</span>.<span class="property">CarthageKit</span>/<span class="title class_">DerivedData</span>/<span class="number">12.5</span><span class="number">.1_12E507</span>/<span class="title class_">Alamofire</span>/<span class="number">5.4</span><span class="number">.4</span>/<span class="title class_">Build</span>/<span class="title class_">Intermediates</span>.<span class="property">noindex</span>/<span class="title class_">ArchiveIntermediates</span>/<span class="title class_">Alamofire</span> iOS/<span class="title class_">IntermediateBuildFilesPath</span>/<span class="title class_">UninstalledProducts</span>/iphoneos/<span class="title class_">Alamofire</span>.<span class="property">framework</span>/<span class="title class_">Alamofire</span> and /<span class="title class_">Users</span>/coming_ay/<span class="title class_">Library</span>/<span class="title class_">Caches</span>/org.<span class="property">carthage</span>.<span class="property">CarthageKit</span>/<span class="title class_">DerivedData</span>/<span class="number">12.5</span><span class="number">.1_12E507</span>/<span class="title class_">Alamofire</span>/<span class="number">5.4</span><span class="number">.4</span>/<span class="title class_">Build</span>/<span class="title class_">Products</span>/<span class="title class_">Release</span>-iphonesimulator/<span class="title class_">Alamofire</span>.<span class="property">framework</span>/<span class="title class_">Alamofire</span> have the same architectures (arm64) and can<span class="string">&#x27;t be in the same fat output file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Building universal frameworks with common architectures is not possible. The device and simulator slices for &quot;Alamofire&quot; both build for: arm64</span></span><br><span class="line"><span class="string">Rebuild with --use-xcframeworks to create an xcframework bundle instead.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>根据提示终端重新输入：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不区分iOS、macOS</span></span><br><span class="line">carthage update --use-xcframeworks</span><br><span class="line"><span class="comment">// 只限iOS</span></span><br><span class="line">carthage update --platform iOS --use-xcframeworks</span><br></pre></td></tr></table></figure>

<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788498111841.jpg"></p>
<h3 id="三、将下载三方框架集成到项目"><a href="#三、将下载三方框架集成到项目" class="headerlink" title="三、将下载三方框架集成到项目"></a>三、将下载三方框架集成到项目</h3><h4 id="1、添加-framework-文件："><a href="#1、添加-framework-文件：" class="headerlink" title="1、添加 framework 文件："></a>1、添加 framework 文件：</h4><p>打开工程文件中的iOS文件夹 -&gt; 将 framework 文件拖入到项目 General 中的 Frameworks，Libraries 中</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788498234874.jpg"></p>
<h4 id="2、添加编译脚本："><a href="#2、添加编译脚本：" class="headerlink" title="2、添加编译脚本："></a>2、添加编译脚本：</h4><p><strong>Target -&gt; Build Phases -&gt; 点击 + -&gt; New Run Script Phase</strong> -&gt; 添加如下脚本：</p>
<p><code>/usr/local/bin/carthage copy-frameworks</code></p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788498355244.jpg"></p>
<h4 id="3、编译，导入头文件使用"><a href="#3、编译，导入头文件使用" class="headerlink" title="3、编译，导入头文件使用"></a>3、编译，导入头文件使用</h4><p>编译，然后导入头文件使用，但是可能会出现如下错误：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788498494980.jpg"></p>
<p>这是因为，我使用的是模拟器运行，但是导入的却是 iOS 真机的 framework，这时候我们需要将原来的 framework 删除，然后导入模拟器 framework。找到如下目录然后拖入：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788498611867.jpg"></p>
<p>然后，我们再次编译运行，就可以成功了，效果如下：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02%EF%BD%9C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E7%BB%9F%E4%B8%80%E4%BE%9D%E8%B5%96%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%9F/16788498763007.jpg"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS进阶】04 | 编码规范：如何使用 SwiftLint 统一编码规范？</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04%EF%BD%9C%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-SwiftLint-%E7%BB%9F%E4%B8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="如何使用-SwiftLint-统一编码规范？"><a href="#如何使用-SwiftLint-统一编码规范？" class="headerlink" title="如何使用 SwiftLint 统一编码规范？"></a>如何使用 SwiftLint 统一编码规范？</h1><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04%EF%BD%9C%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-SwiftLint-%E7%BB%9F%E4%B8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9F/16781731613340.jpg" alt="16781731613340"></p>
<span id="more"></span>

<p>在软件开发领域有很多有趣且重要的话题，比如使用什么样的系统架构来让代码更容易维护，使用哪些第三方库能提高开发效率，等等。但也有一些话题不仅无趣，还很难得出结论，比如像下面这行变量定义，里面的空格哪个正确？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="title class_">String</span> = <span class="string">&quot;Jake&quot;</span></span><br><span class="line"><span class="keyword">let</span> name : <span class="title class_">String</span> = <span class="string">&quot;Jake&quot;</span></span><br><span class="line"><span class="keyword">let</span> name :<span class="title class_">String</span> = <span class="string">&quot;Jake&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="title class_">String</span>= <span class="string">&quot;Jake&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="title class_">String</span>=<span class="string">&quot;Jake&quot;</span></span><br></pre></td></tr></table></figure>

<p>还有代码缩减，到底是用 2 个空格还是 4 个？这就像豆浆到底是喝甜的还是喝咸的一样，并没有标准答案。也因此，出现了许多永无休止的讨论。特别是当新成员所提交的代码风格，与团队其他成员有很大的区别时，往往会出现沟通与协作问题，甚至发生争执而影响工作。此时，团队如果有一套统一的编码规范，那么这样的问题就很容易解决。</p>
<p>除了能促进沟通协作，一套统一的编码规范还能降低代码维护的成本和减少 Bug 的数量。此外，由于规范往往由团队资深开发者指定并不断完善，也有助于其他团队成员快速成长。</p>
<p>既然统一的编码规范由那么多优点，那么我们如何在团队中实施统一编码规范呢？在 iOS 开发领域，使用 SwiftLint 能有效地建立和改进 Swift 项目的编码规范。接下来我就和你聊聊这方面的内容。</p>
<h2 id="安装-SwiftLint"><a href="#安装-SwiftLint" class="headerlink" title="安装 SwiftLint"></a>安装 SwiftLint</h2><p>安装 <code>SwiftLint</code> 的方式有很多种，例如使用 <code>Homebrew</code>，<code>Mint</code>，下载 SwiftLint.pkg 安装包等等。但我只推荐 <code>CocoaPods</code> 这一种方法，因为通过 CocoaPods 可以有效地管理 SwiftLint 的版本，从而保证团队内各个成员都能使用一模一样的 SwiftLint 及其编码规范。</p>
<p>通过 CocoaPods 来安装 SwiftLint 非常简单。在 Moments App 项目中，我们在<code>Podfile</code>文件中添加<code>SwiftLint Pod</code> 即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pod <span class="string">&#x27;SwiftLint&#x27;</span>, <span class="string">&#x27;= 0.41.0&#x27;</span>, <span class="attr">configurations</span>: [<span class="string">&#x27;Debug&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>由于我们只在开发环境下使用 SwiftLint，因此配置了只有<code>Debug</code>的 <code>Build Configuration</code> 才生效。</p>
<p>为了每次编译完都使用 SwiftLint 来检查代码，我们需要在主 App TargetMoments的 <code>Build Phases</code> 里面添加<code>Run SwiftLint</code>步骤。然后配置它执行<code>&quot;$&#123;PODS_ROOT&#125;/SwiftLint/swiftlint&quot;</code>命令。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04%EF%BD%9C%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-SwiftLint-%E7%BB%9F%E4%B8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9F/16781724760038.jpg" alt="16781724760038"></p>
<p>这里要注意，由于 SwiftLint 的设计是检查有效的 Swift 代码（编译通过的代码就是有效的代码），我们需要把<code>Run SwiftLint</code>步骤放在<code>Compile Source</code>步骤之后。否则 SwiftLint 可能会反馈一些错误的结果。</p>
<p>有了上面的配置以后，每次编译程序， SwiftLint 都会自动执行检查，我们可以在 Xcode 上修正这些警告信息来保证编码规范的统一。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04%EF%BD%9C%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-SwiftLint-%E7%BB%9F%E4%B8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9F/16781725272726.jpg" alt="16781725272726"></p>
<p>例如上面的截图所示，SwiftLint 告诉我们空格的使用不正确。</p>
<p>那么，这些警告信息到底怎样来的呢？我们一起看看<code>.swiftlint.yml</code>文件吧。</p>
<h2 id="swiftlint-yml-文件"><a href="#swiftlint-yml-文件" class="headerlink" title=".swiftlint.yml 文件"></a>.swiftlint.yml 文件</h2><p>当我们执行 <code>SwiftLint</code> 命令时，它会自动帮我们启动一堆编码规则，并扫描和检查我们的项目。这些规则有<code>comma</code>（逗号前后的空格处理），<code>private_over_fileprivate</code>（优先使用 priviate），<code>force_cast</code>（避免强制转型）等等 。详细规则列表你也可以在 <a href="https://realm.github.io/SwiftLint/rule-directory.html">SwiftLint 官网</a> 找到。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04%EF%BD%9C%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-SwiftLint-%E7%BB%9F%E4%B8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9F/SwiftLint%E5%AE%98%E7%BD%91.png" alt="SwiftLint官网"></p>
<p>但正如 SwiftLint 的作者所说： <em>“规则存在，但并不意味着你必须用它”</em>。我们需要根据团队自身的情况和成员的统一意见，来决定需要启动和关闭哪些规则。此时，就需要用到 <code>.swiftlint.yml</code> 文件了。</p>
<p><code>.swiftlint.yml</code>主要用于启动和关闭 SwiftLint 所提供的规则，以及自定义配置与规则。一旦我们有了 .swiftlint.yml 文件以后，SwiftLint 在执行过程中会严格按照该文件的定义来扫描和检查代码。由于 .swiftlint.yml 是一个纯文本文件，我们可以通过 Git 统一管理，这样能保证整个团队在执行 SwiftLint 的时候都会得到一模一样的效果，从而保证了整个团队代码规范的一致性。</p>
<h3 id="规则设置"><a href="#规则设置" class="headerlink" title="规则设置"></a>规则设置</h3><p>SwiftLint 提供了<code>disabled_rules</code>,<code>opt_in_rules</code>和<code>only_rules</code>三种规则设置方法。其中，<code>disabled_rules</code>能帮我们关闭默认生效的规则，而<code>opt_in_rules</code>可以启动默认关闭的规则。</p>
<p>另外，SwiftLint 所提供的每条规则都有一个叫作<code>Enabled by default</code>的属性来表示该规则是否默认启动。例如<code>class_delegate_protocol</code>规则是默认启动的，而<code>array_init</code>规则是默认关闭的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">disabled_rules</span>:</span><br><span class="line">  - class_delegate_protocol</span><br><span class="line"><span class="attr">opt_in_rules</span>:</span><br><span class="line">  - array_init</span><br></pre></td></tr></table></figure>

<p>上面的配置表示，关闭默认生效的<code>class_delegate_protocol</code>，并同时启动<code>array_init</code>。</p>
<p>虽然使用<code>disabled_rules</code>和<code>opt_in_rules</code>能够完成配置，但我不推荐你使用它们 ，而是用<code>only_rules</code>来定义每条生效的规则。</p>
<p>我们在 Moments App 项目中也使用了<code>only_rules</code>。你可以在 <a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Moments/.swiftlint.yml">代码仓库</a> 找到该 <code>.swiftlint.yml</code> 文件来查看项目启动的所有规则。由于<code>only_rules</code>是 <code>SwiftLint 0.41.0</code> 引入的，如果你需要以前版本，可以使用<code>whitelist_rules</code>来替代。下面是 .swiftlint.yml 文件中的部分规则。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">only_rules</span>:</span><br><span class="line">  - array_init</span><br><span class="line">  - attributes</span><br><span class="line">  - block_based_kvo</span><br><span class="line">  - class_delegate_protocol</span><br><span class="line">  - closing_brace</span><br></pre></td></tr></table></figure>

<p>通过<code>only_rules</code>，我们可以把每一条规则明确添加到 SwiftLint 里面。这样能保证我们整个团队都使用一致的规则，而不会像使用<code>disabled_rules</code>和<code>opt_in_rules</code>那样，随着 SwiftLint 默认规则的改变，导致最终启动的规则不一样。</p>
<h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>在我们配置一条规则的时候，为了符合团队自身的情况，可以修改其默认配置。例如<code>line_length</code>的默认配置是当一行代码多于 120 个字符的时候会报告编译警告，而多于 200 个字符的时候报告编译错误。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04%EF%BD%9C%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-SwiftLint-%E7%BB%9F%E4%B8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9F/16781729423822.jpg" alt="16781729423822"></p>
<p>我们可以在 .swiftlint.yml 文件中修改这些配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">line_length</span>: <span class="number">110</span></span><br><span class="line"><span class="attr">file_length</span>:</span><br><span class="line">  <span class="attr">warning</span>: <span class="number">500</span></span><br><span class="line">  <span class="attr">error</span>: <span class="number">1200</span></span><br></pre></td></tr></table></figure>

<p>上述的配置表示我们修改了<code>line_length</code>的配置，当一行代码多于 110 个字符（而不是默认的 120 个字符）时就会报告编译警告。我们也可以同时覆盖编译警告和编译错误的配置，例如把<code>file_length</code>的编译警告改成 500，而编译错误改成 1200。</p>
<h3 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h3><p>除了 SwiftLint 所提供的默认规则以外，我们还可以自定义规则。例如在 Moments App 项目中，我就自定义了<strong>“不能硬编码字符串”</strong>的规则，具体如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_rules</span>:</span><br><span class="line">  <span class="attr">no_hardcoded_strings</span>:</span><br><span class="line">    <span class="attr">regex</span>: <span class="string">&quot;([A-Za-z]+)&quot;</span></span><br><span class="line">    <span class="attr">match_kinds</span>: string</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;Please do not hardcode strings and add them to the appropriate `Localizable.strings` file; a build script compiles all strings into strongly typed resources available through `Generated/Strings.swift`, e.g. `L10n.accessCamera&quot;</span></span><br><span class="line">    <span class="attr">severity</span>: warning</span><br></pre></td></tr></table></figure>

<p>该规则<code>no_hardcoded_strings</code>会通过正则表达式来检查字符串是否进行了硬编码。如果是SwiftLint 会根据我们的自定义规则显示警告信息，如下图所示。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04%EF%BD%9C%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-SwiftLint-%E7%BB%9F%E4%B8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9F/16781730434720.jpg" alt="16781730434720"></p>
<h3 id="排除扫描文件"><a href="#排除扫描文件" class="headerlink" title="排除扫描文件"></a>排除扫描文件</h3><p>默认情况下 SwiftLint 会扫描和检查整个项目的所有代码。因为一些第三方依赖库的源码风格可能和我们团队的风格不一致，为了方便使用第三方依赖库，我们可以用<code>excluded</code>来把它排除在外，避免扫描和检查。示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">excluded</span>:</span><br><span class="line">  - <span class="title class_">Pods</span></span><br></pre></td></tr></table></figure>

<p>现在我们已经通过配置 .swiftlint.yml 文件来帮助我们统一编码规范了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这一讲，我介绍了如何使用 SwiftLint 来统一编码规范。特别是其中的<code>only_rules</code>，我们要使用它来定义需要生效的规则。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04%EF%BD%9C%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-SwiftLint-%E7%BB%9F%E4%B8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%9F/16781731613340.jpg" alt="16781731613340"></p>
<p>此外，在制定编码规范时，我们还需要注意以下几点。</p>
<ul>
<li><p><strong>首先</strong>，所制定的规范要和业界标准同步，这能让新成员接手代码时，更容易接受而不是反驳。一个建议是，你可以从 SwiftLint 所提供的默认规则开始，毕竟这些规则都是通过许多人沟通和完善下来的，比你独自一人想出来要靠谱得多。</p>
</li>
<li><p><strong>其次</strong>，在制定规范时，重点是提高代码的可读性，而不是为了高大上去使用黑魔法或者选择那些不常用功能等。这样可以让团队绝大部分成员更容易理解和遵循这些规范。</p>
</li>
<li><p><strong>最后要强调的是</strong>，一套编码规范是需要不断迭代和完善的，我建议团队要定时 <code>Retro（Retrospective，敏捷回顾）</code>，讨论和优化这些规范，让得大家都有机会贡献到规范中，增加他的认同感。这种做法在多团队平行开发的环境下特别有效。</p>
</li>
</ul>
<h3 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h3><blockquote>
<p>swiftlint.yml 文件<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Moments/.swiftlint.yml">https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Moments/.swiftlint.yml</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS进阶】05 | 自动化准备：如何使用 Fastlane 管理自动化操作？</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05%EF%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Fastlane-%E7%AE%A1%E7%90%86%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9C%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="如何使用-Fastlane-管理自动化操作？"><a href="#如何使用-Fastlane-管理自动化操作？" class="headerlink" title="如何使用 Fastlane 管理自动化操作？"></a>如何使用 Fastlane 管理自动化操作？</h1><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05%EF%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Fastlane-%E7%AE%A1%E7%90%86%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9C%EF%BC%9F/16784358918168.jpg" alt="16784358918168"></p>
<span id="more"></span>

<p>要成为一个优秀的 iOS 开发者，我们要做的事情远多于 <strong>“开发”</strong> ，例如我们要构建和打包 App，管理证书，为 App 进行签名，把 App 分发给测试组，上传 App 到 App Store，等等。这些操作不但繁琐费时，而且容易出错。那么，有没有更便利的方法呢？有，那就是使用 fastlane 来完成这些重复性的工作。接下来这一讲，我们主要聊的也就是这个主题。</p>
<h2 id="fastlane-安装"><a href="#fastlane-安装" class="headerlink" title="fastlane 安装"></a>fastlane 安装</h2><p><strong>fastlane</strong> 是用 <code>Ruby</code> 语言编写的一个命令行工具，可以自动化几乎所有 iOS 开发所需要的操作，例如自动打包和签名 App，自动上传到 App Store 等等。有了 <code>fastlane</code>，我们就可以开发一套统一的、可靠的和可共享的配置，团队所有成员都可以通过这套配置实现自动化操作，减少重复性劳动。</p>
<p>如何安装 <code>fastlane</code> 呢？我记得在第一讲就曾提到过，可以使用 <code>Bundler</code> 来安装，只需要在 <code>Gemfile</code> 文件里面添加以下一行即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gem <span class="string">&quot;fastlane&quot;</span>, <span class="string">&quot;2.166.0&quot;</span></span><br></pre></td></tr></table></figure>

<p><font color="#CD5C5C">注意，由于是通过 Bundler 来安装 fastlane，每次执行 fastlane 命令前，都需要加上 <code>bundle exec</code>（<code>bundle exec fastlane</code>）。不过为了简洁，在这里后面凡涉及 fastlane 命令时，我会省略<code>bundle exec</code>部分。</font></p>
<h2 id="Action-与-Lane"><a href="#Action-与-Lane" class="headerlink" title="Action 与 Lane"></a>Action 与 Lane</h2><p>fastlane 为我们提供了一百多个 <strong>Action</strong>，它们是 iOS 项目开发中所有自动化操作的基础。所谓的Action，你可以理解成是 fastlane 自动化流程中的最小执行单元。一般常用的 Action 有：</p>
<ul>
<li><p><strong>scan</strong>，用于自动测试 App；</p>
</li>
<li><p><strong>cert</strong>，用于自动生成和管理 iOS App 签名的证书；</p>
</li>
<li><p><strong>sigh</strong>，用于自动生成、更新、下载和修复 Provisioning Profile；</p>
</li>
<li><p><strong>match</strong>，为整个团队自动管理和同步证书和 <code>Provisioning Profile</code>；</p>
</li>
<li><p><strong>gym</strong>，用于自动构建和打包 App；</p>
</li>
<li><p><strong>snapshot</strong>，用于自动在不同设备上截屏；</p>
</li>
<li><p><strong>pilot</strong>，用于自动把 App 部署到 <code>TestFlight</code> 并管理测试用户；</p>
</li>
<li><p><strong>deliver</strong>，用于自动把 App 上传到 <code>App Store</code>；</p>
</li>
<li><p><strong>pem</strong>，用于自动生成和更新推送消息的 <code>Profile</code>。</p>
</li>
</ul>
<p>这些 <code>Action</code> 怎么执行呢？我们可以通过<code>fastlane &lt;action&gt;</code>（例如<code>fastlane scan</code>）来执行。下面是执行效果，它提示我选择其中一个 Scheme 来继续执行。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05%EF%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Fastlane-%E7%AE%A1%E7%90%86%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9C%EF%BC%9F/16784334923105.jpg" alt="16784334923105"></p>
<p>从运行情况可知，尽管这些 <code>Action</code> 为我们提供了不少便利，但还是需要手工输入来继续。所以，我不推荐你直接使用这些 <code>Action</code>，而是根据项目需要，在开发自己的自动化操作时通过传入合适的参数来调用 fastlane 所提供的 Action。</p>
<p>具体来说，我们可以把所需的 Action 组合在一起，开发出对应的自动化操作。在 fastlane 中，我们把这个自动化操作或者任务叫作 <code>Lane</code>。<strong>实际上， iOS 开发中的所有自动化操作，主要通过 Lane 来封装和配置的。</strong></p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05%EF%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Fastlane-%E7%AE%A1%E7%90%86%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9C%EF%BC%9F/16784335778467.jpg" alt="16784335778467"></p>
<p><code>Lane</code> 和 <code>Action</code> 的关系如上图所示， 一条 Lane 可以通过参数调用一个或几个 Action 。以 Moments app 为例，我们要自动打包和签名 App，那么我就建了一条名叫<code>archive_appstore</code>的 Lane。因为这条 Lane 用到的“更新签名”和“打包”在 fastalne 里已经提供了相关的 Action——<code>update_code_signing_settings</code>和<code>gym</code>，我们可以到 <a href="https://docs.fastlane.tools/">fastlane官网</a> 去寻找，从而减轻了开发工作量。</p>
<p>一般，iOS 项目所需的自动化操作都配置为 <code>Lane</code> 并保存在 <code>Fastfile</code> 文件，由 <code>Git</code> 统一管理起来，共享给所有成员。然后，大家就可以使用统一的自动化配置了。</p>
<p>这里的 <code>Fastfile</code> 文件是怎么出来的呢？</p>
<p>它是由<code>fastlane init</code>命令自动生成。这条命令会建立一个 <code>fastlane</code> 文件夹，文件夹里除了 <code>Fastfile</code> ，还有 <code>Appfile</code>，以及执行过程中所生成的一些中间文件（如截图、日志与报告等）。因为我们之前已经在 <code>.gitignore</code> 文件里把这些中间文件忽略了，因此这些中间文件不再保存到 <code>Git</code> 里面。</p>
<p>fastlane 文件夹里的 <code>Appfile</code>，用于保存 App 的唯一标识符和 <code>Apple ID</code> 等信息。当 fastlane 在执行一个 Action 的时候，首先会使用传递进来的参数，当参数没有传递进来时，fastlane 会从 Appfile 文件中查找并使用对应的信息。</p>
<p>比如，我们在 Appfile 配置了<code>app_identifier &quot;com.ibanimatable.moments&quot;</code>以后，在调用<code>match</code> Action 时可以不传入<code>app_identifier</code>参数，fastlane 会自动把<code>&quot;com.ibanimatable.moments&quot;</code>作为<code>app_identifier</code>的值进行调用。</p>
<p>但是为了方便管理所有的 Lane ，保证每次执行的效果都一样，我建议在每次调用 Action 的时候，都明确传递每一个所需的参数，而不是从 Appfile 文件读取。下面我就演示下如何明确传递每一个参数来执行<code>match</code> Action。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">match</span>(</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;appstore&quot;</span>,</span><br><span class="line">      <span class="attr">force</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">storage_mode</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">      <span class="attr">git_url</span>: <span class="string">&quot;https://github.com/JakeLin/moments-codesign&quot;</span>,</span><br><span class="line">      <span class="attr">app_identifier</span>: <span class="string">&quot;com.ibanimatable.moments&quot;</span>, # pass  app_identifier explicitly</span><br><span class="line">      <span class="attr">team_id</span>: <span class="string">&quot;6HLFCRTYQU&quot;</span>,</span><br><span class="line">      <span class="attr">api_key</span>: api_key</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="常用-Lane-定义"><a href="#常用-Lane-定义" class="headerlink" title="常用 Lane 定义"></a>常用 Lane 定义</h2><p>通过上面的介绍你已经知道，我们会使用 Lane 来封装项目所需的各个自动化操作。那么，这些 Lane 是如何开发定义的呢？接下来，我就为你介绍<strong>几种非常实用的 Lane</strong>，一起来看看怎么做。</p>
<h3 id="扫描和检查代码"><a href="#扫描和检查代码" class="headerlink" title="扫描和检查代码"></a>扫描和检查代码</h3><p>每条 Lane 的定义都是放在一个<code>lane &lt;lane_name&gt; do &lt;lane_body&gt; end</code>的代码块里面。它以关键字<code>lane</code>开头，接着是这条 Lane 的名字。 下面是用于检查代码的 Lane 源码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lane :lint_code <span class="keyword">do</span></span><br><span class="line">  <span class="title function_">puts</span>(<span class="string">&quot;Lint code using SwfitLint&quot;</span>)</span><br><span class="line">  <span class="title function_">swiftlint</span>(</span><br><span class="line">    <span class="attr">mode</span>: :lint,</span><br><span class="line">    <span class="attr">executable</span>: <span class="string">&quot;./Pods/SwiftLint/swiftlint&quot;</span>,  # <span class="title class_">Important</span> <span class="keyword">if</span> you<span class="string">&#x27;ve installed it via CocoaPods</span></span><br><span class="line"><span class="string">    config_file: &#x27;</span>./<span class="title class_">Moments</span>/.<span class="property">swiftlint</span>.<span class="property">yml</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    raise_if_swiftlint_error: true)</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure>

<p>在上面的例子中，我们定义了一个叫作<code>lint_code</code>的 Lane。因为 fastlane 使用 Ruby 开发，所以在 <code>Fastfile</code> 里面，Lane 的名字也遵循它的编码规范，使用小写字母和下划线组合的<strong>蛇式命名法</strong>。</p>
<p>Lane 的实现逻辑放在<code>do</code>和<code>end</code>中间，我们可以调用 fastlane 提供的任意 Action。在这个例子中我们就调用了<code>swiftlint</code> Action，并把<code>lint</code>传递给<code>mode</code>参数，以此来执行代码扫描和检查操作。</p>
<p>特别需要注意的是，由于我们之前使用了 <code>CocoaPods</code> 来安装 <code>SwiftLint</code>，因此要为<code>executable</code>参数指定 SwiftLint 的安装路径<code>./Pods/SwiftLint/swiftlint</code>。同时要把 <code>.swiftlint.yml</code> 文件的所在路径也传递给<code>config_file</code>参数。这样就能保证 fastlane 使用了统一的 SwiftLint 版本和规则文件，方便团队所有人执行该 Lane 时得到统一的效果。</p>
<p>当一条 Lane 开发配置完毕以后，我们就可以在项目的根目录执行 <code>fastlane &lt;lane_name&gt;</code>。比如扫描和检查代码的 Lane ，我们可以在终端输入<code>fastlane lint_code</code>看到它的执行效果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Driving</span> the lane <span class="string">&#x27;ios lint_code&#x27;</span></span><br><span class="line"><span class="title class_">Lint</span> code using <span class="title class_">SwfitLint</span></span><br><span class="line">--- <span class="title class_">Step</span>: swiftlint ---</span><br><span class="line">$ ./<span class="title class_">Pods</span>/<span class="title class_">SwiftLint</span>/swiftlint lint --config ./<span class="title class_">Moments</span>/.<span class="property">swiftlint</span>.<span class="property">yml</span></span><br><span class="line"><span class="title class_">Linting</span> <span class="title class_">Swift</span> files <span class="keyword">in</span> current working directory</span><br><span class="line"><span class="title class_">Linting</span> <span class="string">&#x27;Strings.swift&#x27;</span> (<span class="number">1</span>/<span class="number">87</span>)</span><br><span class="line"><span class="title class_">Linting</span> <span class="string">&#x27;MomentListItemViewModel.swift&#x27;</span> (<span class="number">2</span>/<span class="number">87</span>)</span><br><span class="line"><span class="title class_">Linting</span> ......s</span><br><span class="line"></span><br><span class="line"><span class="title class_">UIButtonExtensions</span>.<span class="property">swift</span>:<span class="number">14</span>:<span class="number">46</span>: <span class="attr">warning</span>: no_hardcoded_strings <span class="title class_">Violation</span>: <span class="title class_">Please</span> <span class="keyword">do</span> not hardcode strings and add them to the appropriate <span class="title class_">Localizable</span>.<span class="property">strings</span> file; a build script compiles all strings into strongly typed resources available through <span class="title class_">Generated</span>/<span class="title class_">Strings</span>.<span class="property">swift</span>, e.<span class="property">g</span>. <span class="string">`L10n.accessCamera (no_hardcoded_strings)</span></span><br><span class="line"><span class="string">Done linting! Found 6 violations, 0 serious in 87 files.</span></span><br><span class="line"><span class="string">fastlane.tools finished successfully</span></span><br></pre></td></tr></table></figure>

<p>在执行过程中，fastlane 先从 Fastfile 文件里名叫<code>lint_code</code>的 Lane 的定义，然后执行了该 Lane 里使用到的 <code>swiftlint</code> Action。<code>swiftlint</code> Action 会把项目下 87 个 Swift 源代码文件进行扫描和检查，并把所有不符合规范的代码提示给我们。</p>
<h3 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h3><p>检查代码之后，接下来就是清理不符合规范的代码，比如删掉所有代码中不必要的空格或者空行，修正缩进的大小等等。我们可以定义一条叫作<code>format_code</code>的 Lane 来执行该功能。有了它以后，我们只需要执行<code>fastlane format_code</code>就能把整个项目所有的代码进行格式化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lane :format_code <span class="keyword">do</span></span><br><span class="line">  <span class="title function_">puts</span>(<span class="string">&quot;Lint and format code using SwfitLint&quot;</span>)</span><br><span class="line">  <span class="title function_">swiftlint</span>(</span><br><span class="line">    <span class="attr">mode</span>: :autocorrect,</span><br><span class="line">    <span class="attr">executable</span>: <span class="string">&quot;./Pods/SwiftLint/swiftlint&quot;</span>,  # <span class="title class_">Important</span> <span class="keyword">if</span> you<span class="string">&#x27;ve installed it via CocoaPods</span></span><br><span class="line"><span class="string">    config_file: &#x27;</span>./<span class="title class_">Moments</span>/.<span class="property">swiftlint</span>.<span class="property">yml</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    raise_if_swiftlint_error: true)</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure>

<p><code>format_code</code>和<code>lint_code</code>两条 Lane 都使用了<code>swiftlint</code> Action，唯一不同的地方是为<code>mode</code>参数传递了<code>autocorrect</code>。</p>
<h3 id="排序-Xcode-项目文件列表"><a href="#排序-Xcode-项目文件列表" class="headerlink" title="排序 Xcode 项目文件列表"></a>排序 Xcode 项目文件列表</h3><p>在多人开发的项目下，我们经常会修改项目文件，这往往很容易引起合并冲突，而合并 xcodeproj 文件又是一件非常麻烦的事情。怎么办呢？</p>
<p>一个有效办法就是在每次新建源代码和资源文件时，把 <code>xcodeproj</code> 里面的文件列表进行重新排序。这样能极大地减低合并冲突的发生。我们把这一个经常使用到的操作也配置到 Fastfile 里面，如下所示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lane :sort_files <span class="keyword">do</span></span><br><span class="line">  <span class="title function_">puts</span>(<span class="string">&quot;Sort the files for the Xcode project&quot;</span>)</span><br><span class="line">  sh <span class="string">&quot;../scripts/sort-Xcode-project-file.pl ../Moments/Moments.xcodeproj&quot;</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>可以看到，fastlane 除了能调用其提供的 Action 以外，还可以通过<code>sh</code>来调用其他程序命令。<strong>在这里我们调用了由苹果公司提供的一个<code>Perl</code> 程序来为 xcodeproj 里面的文件列表进行排序</strong>。你也可以在此<a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/scripts/sort-Xcode-project-file.pl">代码仓库</a>找到这个<code>Perl</code> 程序。</p>
<h3 id="调用其他-Lane-操作"><a href="#调用其他-Lane-操作" class="headerlink" title="调用其他 Lane 操作"></a>调用其他 Lane 操作</h3><p>除了调用一些程序命令（如<code>sh</code>）以外，一条 Lane 还可以调用 Fastfile 里面其他的 Lane。例如我们定义了一条叫作<code>prepare_pr</code>的 Lane ，它可以帮我们在提交 <code>Pull Request</code> 之前做一些必要的准备。下面这个代码表示的就是，这条 Lane 在内部调用了另外两条 Lane —— <code>format_code</code>和<code>sort_files</code>，以此来同时完成格式化代码和排序 Xcode 项目文件列表的操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lane :prepare_pr <span class="keyword">do</span></span><br><span class="line">  format_code</span><br><span class="line">  sort_files</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h3 id="定义私有-Lane-和返回值"><a href="#定义私有-Lane-和返回值" class="headerlink" title="定义私有 Lane 和返回值"></a>定义私有 Lane 和返回值</h3><p>类似于 Swift 语言能通过<code>private</code>来定义内部使用的方法，我们也能定义私有 Lane 给Fastfile 内的其他 Lane 所调用，提高代码的复用。其做法就是把原先的关键字<code>lane</code>替换成<code>private_lane</code>。例如我们定义一条叫作<code>get_pi</code>的私有 Lane，代码如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private_lane :get_pi <span class="keyword">do</span></span><br><span class="line">  pi = <span class="number">3.1415</span></span><br><span class="line">  pi</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>该 Lane 的实现体有两行代码，第一行是给一个临时变量pi赋值。第二行表示把<code>pi</code>作为返回值传递给调用者。例如下面就演示了如何调用<code>get_pi</code>并取得返回值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lane :foo <span class="keyword">do</span></span><br><span class="line">  pi = get_pi</span><br><span class="line">  <span class="title function_">puts</span>(pi)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>这是执行<code>fastlane foo</code>的结果：</p>
<blockquote>
<p>Driving the lane ‘ios foo’<br>— Step: Switch to ios get_pi lane —<br>Cruising over to lane ‘ios get_pi’<br>Cruising back to lane ‘ios foo’<br>3.1415</p>
</blockquote>
<p>fastlane 首先调用<code>foo</code> Lane，然后进去<code>get_pi</code> Lane 并返回到<code>foo</code>，同时把返回结果打印出来。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一讲我介绍了如何从头开始搭建一个 fastlane 环境。在这里需要注意三点：</p>
<ol>
<li><p>不要单独手工执行 fastlane 所提供的 Action，而是使用 Fastfile 文件来统一开发、配置和管理日常中经常使用的所有自动化操作；</p>
</li>
<li><p>在开发我们的 Lane 时，要优先使用和调用 fastlane 提供的 Action，因为这些 Action 都是经过社区完善的，且会随着 Xcode 版本的升级而更新；</p>
</li>
<li><p>当我们调用 fastlane 所提供的 Action 时，要明确传递各个参数，在执行过程中就无须任何手工交互就能从头到尾执行整个操作。</p>
</li>
</ol>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05%EF%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Fastlane-%E7%AE%A1%E7%90%86%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9C%EF%BC%9F/16784358918168.jpg" alt="16784358918168"></p>
<p>有了项目需要的所有 Lane 以后，能有效减轻团队成员的重复劳动，并为项目的自动化和工程化打下坚实的基础。在后面的章节中，我会详细介绍如何使用 fastlane 来管理证书，打包 App 和上传到 App Store。</p>
<h3 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h3><blockquote>
<p>Fastfile 文件地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/fastlane/Fastfile#L19-L50">https://github.com/lagoueduCol/iOS-linyongjian/blob/main/fastlane/Fastfile#L19-L50</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS进阶】06 | 代码管理：如何使用 Git 与 GitHub 统一代码管理流程？</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06%EF%BD%9C%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E4%B8%8EGitHub%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="如何使用-Git-与-GitHub-统一代码管理流程？"><a href="#如何使用-Git-与-GitHub-统一代码管理流程？" class="headerlink" title="如何使用 Git 与 GitHub 统一代码管理流程？"></a>如何使用 Git 与 GitHub 统一代码管理流程？</h1><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06%EF%BD%9C%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E4%B8%8EGitHub%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%EF%BC%9F/16784401369610.jpg" alt="16784401369610"></p>
<span id="more"></span>

<p>在软件开发当中，代码管理一直是其中重要的一环，每当软件出现问题，我们就需要查看源码，及时发现其中的漏洞加以修复。并且，由于分工不同，软件开发需要多个人共同完成，如何保证每个人编写的代码符合要求，能够相互配合，也是一个重要的问题。所以，一个非常实用的代码管理工具和一套统一的代码管理流程在开发当中必不可少。</p>
<p>而在这方面，<strong>StackOverflow</strong> 曾调查发现，有超过 <strong>87%</strong> 的开发者使用 <strong>Git</strong>，有超过 <strong>82%</strong> 的开发者使用 <strong>GitHub</strong> 来进行代码托管和开发协作。可以说，熟练使用 <strong>Git</strong> 和 <strong>GitHub</strong> 已经成为开发者的基本技能，而如何结合它们来规范代码管理也是 iOS 开发工程化实践当中的基础。</p>
<h2 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h2><p>现代的软件开发活动通常需要多人参与。为了保证不同开发者可以同时贡献到同一个代码库，<code>Git</code> 提供了分支（<code>Branch</code>）来支持并行开发。不同团队有不同的 Git 分支管理方式，根据我们团队多年的经验，经过不断的完善，最终形成出一套简单并十分有效的 Git 分支管理规范，你可以参考下。这套规范是怎样的呢？</p>
<p>具体来说，我把所有的 Git 分支分成三类：<strong>主分支，功能分支和发布分支</strong>，让它们各自承担不同的功能。</p>
<h3 id="主分支"><a href="#主分支" class="headerlink" title="主分支"></a>主分支</h3><p><strong>主分支</strong>，也称为<code>mater</code>或者<code>main</code>分支， 是 <code>Git</code> 代码仓库的默认分支。在 <code>Xcode 12</code> 以后，新建项目时也会默认生成命名为<code>main</code>的主分支。</p>
<p>主分支在软件开发中非常重要，它是我们 App 的唯一的信息源（<code>Single source of truth</code>），不论是编译出不同版本的 App 还是排查问题，都需要用到主分支的代码。并且，团队同事的代码，最终也必须汇总到这个主分支中，且不能出错。所以，<strong>所谓的统一代码管理流程，就是制定其他分支的代码如何合并到主分支的流程。</strong></p>
<h3 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h3><p><strong>功能分支</strong>，是我们在开发过程中建立的临时分支，它可以用来保存一次开发活动的状态。根据不同的开发活动，我把功能分支分成几个小类。</p>
<ol>
<li><p><code>feature</code>分支，当开发一个新功能的时候，我会为每一个功能建立一个叫作<code>feature</code>的分支，当整个功能完成后就将其合并到主分支里面，并把该分支从 <code>Git</code> 代码仓库中删除掉。</p>
</li>
<li><p><code>bugfix</code>分支，当发现 <code>Bug</code> 的时候，会专门建立一个<code>bugfix</code>分支，修改 Bug 后把它合并到主分支里面去。</p>
</li>
<li><p><code>spike</code>分支，当我们探索或研究一些新技术（如 <code>App Clips</code> 功能）的时候，会建立一个叫作<code>spike</code>的分支。在得出结论以后，我才决定是否把该分支合并到主分支。如果探索失败，我就不会把相关的<code>spike</code>分支合并到主分支了。</p>
</li>
</ol>
<p>在新建一个功能分支的时候，我们都遵循一定的命名规范，一般会把功能的描述作为分支的名称。例如当我们要开发一个点赞功能时，可以把该分支命名为<code>feature/add-like-button-to-moments-screen</code>。又例如当我们需要修改用户头像的一个 UI Bug 时，会把分支命名为<code>bugfix/fix-avatar-ui-bug</code>。</p>
<p>有那么多功能分支，在并行开发过程中我们该如何管理它们呢？</p>
<p>来看下面这幅。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06%EF%BD%9C%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E4%B8%8EGitHub%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%EF%BC%9F/16784370985101.jpg" alt="16784370985101"></p>
<p>举例来说，我有一个同事要开发点赞功能，他就从主分支最新的 <code>MC1</code> commit 签出（<code>checkout</code>）并新建<code>feature/add-like-button-to-moments-screen</code>来进行点赞功能的开发。与此同时，另外一个同事发现了一个用户头像的 UI Bug，她也从 <code>MC1</code> commit 签出并新建了<code>bugfix/fix-avatar-ui-bug</code>来修改 Bug。</p>
<p>当头像的 Bug 修改完成后，开发组长把 <code>BC2</code> commit 合并到主分支里面。在此之后点赞功能也开发完毕，开发组长又把该功能分支上的 <code>FC4</code> commit 合并到主分支里面。这两个分支彼此独立，而且互不影响。</p>
<p>除了主分支和功能分支以外，我们在发布 App 的时候还使用到发布分支。</p>
<h3 id="发布分支"><a href="#发布分支" class="headerlink" title="发布分支"></a>发布分支</h3><p><strong>发布分支</strong>，一般命名为<code>release</code>。每次当我们发布 App 之前都会把主分支的最新代码合并到发布分支去。因此发布分支会一直保存 App 发布版的源码记录。</p>
<p>有了发布分支以后，一旦发生严重的线上事故，例如出现引起高崩溃率的 Bug 时，我们可以马上在发布分支上进行修复。一般的做法是从发布分支上签出一个功能分支，例如当修复点赞按钮引起的崩溃时，我们可以建立一个叫作 <code>bugfix/fix-like-button-crash</code> 的功能分支，在修复该崩溃以后马上合并到发布分支，并提交到 App Store ，更新线上的 App。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06%EF%BD%9C%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E4%B8%8EGitHub%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%EF%BC%9F/16784375243224.jpg" alt="16784375243224"></p>
<p>由上图可见，当我们把主分支最新的 <code>MC1</code> commit 合并到 <code>release</code> 分支以后，提交了一个版本号为<code>V2.0</code>的 App 到 App Store。当我们通过查看崩溃报告，得知新上线的点缀功能引起很多崩溃时，可以采取如下措施：</p>
<ol>
<li><p>马上从<code>release</code>分支的 <code>V2.0</code> commit 签出<code>bugfix/fix-like-button-crash</code>分支并修复该崩溃；</p>
</li>
<li><p>把 <code>BC2</code> commit 合并回<code>release</code>分支，并立刻提交版本号为<code>V2.1</code>的 App 到 App Store；</p>
</li>
<li><p>把包含了该修复的 <code>V2.1</code> commit 合并到<code>main</code>分支，保证主分支统一管理所有代码的更新状态。</p>
</li>
</ol>
<p>有了上面讲的三大分支，以及它们签出和合并的流程，我们就定义了一部分的代码管理规范——知道什么时候要使用哪个分支进行开发或者发布。但是你可能已经察觉到，当我们把功能分支合并到主分支的时候并没有进行任何的审查，万一有人不小心把 Bug 合并到主分支怎么办？</p>
<p>我们在这方面就吃过很多大的亏，有人把没有经过验证的代码直接 Push 到主分支，使得 App 的崩溃率提升了 10% 以上。为了保证主分支受控，我们就需要引入一个代码管理流程来管控主分支的合并过程。目前管控这一流程最有效的办法是使用<strong>Pull Request</strong>，众多代码托管和协作平台（如 GitLab，BitBucket 等）都支持 Pull Request 功能。下面我就以 GitHub Pull Request 为例子来看看它是如何工作的。</p>
<h2 id="GitHub-Pull-Request-流程"><a href="#GitHub-Pull-Request-流程" class="headerlink" title="GitHub Pull Request 流程"></a>GitHub Pull Request 流程</h2><p><strong>Pull Request</strong> 我把它简称为 <strong>PR</strong>。PR 是一种团队协助的机制，在 GitLab 也叫作 Merge Request。当一个开发者完成一个功能的开发时，可以通过 PR 来通知团队其他成员进行代码审查和讨论。在协商并得到共识后可以通过 PR 把功能代码合并到主分支中。</p>
<p>一套完善的 PR 流程能有效降低沟通成本，提高代码质量，以及提升项目的自动化和工程化程度。</p>
<p>下面我们一起看一套完整的，并经过我们多年实践证明过的 PR 流程。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06%EF%BD%9C%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E4%B8%8EGitHub%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%EF%BC%9F/16784381478018.jpg" alt="16784381478018"></p>
<p>这套流程分成六步。</p>
<p><strong>第一步</strong>，当我们要开发一个新功能或者修改一个 Bug 时，从主分支签出并建立一个功能分支。<strong>这里需要注意的是，为了减少合并时出现的冲突，我们需要从主分支最新的一个 commit 签出。</strong></p>
<p><strong>第二步</strong>，我们可以在功能分支上持续开发并多次提交 commit。因为我们是在独立的功能分支上进行开发，所有的变动都不会影响到主分支，所以可以放心修改所需的代码。</p>
<p><strong>第三步</strong>，当我们完成一个功能的开发以后，就可以提交一个 <code>PR</code> 了。<strong>为了避免合并冲突，我建议在提交 <code>PR</code> 前先 <code>rebase</code> 主分支的 Git 历史</strong>。同时为了方便其他成员审查代码和参与讨论，<em>我们在提交 PR 的时候需要清楚地描述所完成的功能，并把注意事项，UI 前后变动的区别，测试步骤等等一同写到 PR 描述文档里面。</em></p>
<p>在我们 Moments App 项目中，为了方便开发者编写 PR 描述文档，我们建立了一个模板文件<code>pull_request_template.md</code>。当我们提交 PR 的时候，GitHub 会自动读取并准备好描述文档的模板，我们只需要填写相关内容即可。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06%EF%BD%9C%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E4%B8%8EGitHub%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%EF%BC%9F/16784385522677.jpg" alt="16784385522677"></p>
<p>你可以到 <a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/.github/pull_request_template.md">此代码仓库</a> 查看该模板文件。</p>
<p>在提交 <strong>PR</strong> 的时候，我们还可以加上代码审查人（<em>Reviewer</em>）来通知他/她审查代码。同时也可以加上分类的标签（<em>Label</em>）来方便管理所有的 PR，例如使用 <code>enhancement</code> 表示功能开发，使用 <code>bug</code> 表示 Bug 修改。如果你的项目由多团队同时开发，我们还会为每个产品团队都建立一个标签，这样就能清楚地知道这个 PR 来自那个产品团队了。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06%EF%BD%9C%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E4%B8%8EGitHub%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%EF%BC%9F/16784395274002.jpg" alt="16784395274002"></p>
<p><strong>第四步</strong>，一旦 PR 提交以后，其他成员就会收到通知消息，他们可以进行代码审查，并把反馈意见留言到 RP 里面。提交者可以根据留言来修改代码和提交新的 commit。当所有留言都修正和完善以后，可以再次通知审查人进行进一步的审查。</p>
<p><em>在项目之初，这个过程可能需要来回好几遍。但随着团队的不断磨合，这个过程会越来越快。因为代码审查人一般由项目中最资深开发者组成，他们的留言能帮助团队新成员迅速熟悉项目相关的技术和背景知识。同时能保证代码风格的一致性和提高整个项目的代码质量。</em></p>
<p>根据我们的经验，在代码审查上的投资所得到的好处，远高于所花的时间成本，我建议你或者你所在的团队在项目初期多投入 PR 审查工作。</p>
<p><strong>第五步</strong>，大家通过协商得到共识以后，审查人就可以批准（<em>approve</em>）该 PR。这表示该 PR 可以随时合并到主分支了。</p>
<p><strong>第六步</strong>，当 PR 得到批准以后，提交人可以把 PR 合并到主分支里面去。我建议在合并之前先 <code>rebase</code> 主分支上的最新 commit，这样能保证合并过程没有冲突，并使得 Git 的历史更加简洁。</p>
<p>上面就是我们的统一的代码管理流程。为了进一步保证少犯错误，我们可以通过修改 GitHub 上的配置来为每一步操作做自动检查，以保证所有成员都必须严格遵循一致的代码管理流程。</p>
<h2 id="GitHub-配置"><a href="#GitHub-配置" class="headerlink" title="GitHub 配置"></a>GitHub 配置</h2><p><strong>首先</strong>，我们可以把主分支<em>保护</em>起来，不允许任何人直接 Push 到主分支。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06%EF%BD%9C%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E4%B8%8EGitHub%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%EF%BC%9F/16784396993344.jpg" alt="16784396993344"></p>
<p><strong>然后</strong>，要求所有 PR 在合并之前都必须经过一个或以上的<em>代码审查人</em>批准。审查人的数量可以根据团队的情况进行调整。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06%EF%BD%9C%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E4%B8%8EGitHub%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%EF%BC%9F/16784399029329.jpg" alt="16784399029329"></p>
<p>当 Github 检查到有某些条件不完全符合时，就不允许我们合并该 PR。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06%EF%BD%9C%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E4%B8%8EGitHub%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%EF%BC%9F/16784399346622.jpg" alt="16784399346622"></p>
<p>比如，因为我们的 Moments 项目配置了所有的 PR 都必须有一个或以上的代码审查人批准后才能合并。上图可以见 GitHub PR 页面上的 <code>Merge pull request</code> 按钮是失效的，并提示 <em>“Merging can be performed automatically with 1 approving review”（需要一个代码审查通过后才能合并）</em>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这一讲我介绍了 Git 的分支管理和 GitHub 的 <strong>Pull Request</strong> 流程。根据多年的项目经验，我给出了一套完整的统一代码管理流程，其重点是把 Git 分支分成三类，<strong>主分支、功能分支和发布分支</strong>，然后严格按照 <strong>GitHub Pull Request</strong> 流程来把代码合并到主分支里面。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06%EF%BD%9C%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E4%B8%8EGitHub%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%EF%BC%9F/16784401369610.jpg" alt="16784401369610"></p>
<p>有了这个规范，开发者就能严格遵循这个流程贡献代码，从而保证主分支在管控状态，同时也为项目的自动化和工程化打下基础。</p>
<h3 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h3><blockquote>
<p>pull_request_template.md<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/.github/pull_request_template.md">https://github.com/lagoueduCol/iOS-linyongjian/blob/main/.github/pull_request_template.md</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS进阶】09 | 开关组件：如何使用功能开关，支持产品快速迭代</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09%EF%BD%9C%E5%BC%80%E5%85%B3%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%9F%E8%83%BD%E5%BC%80%E5%85%B3%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BA%A7%E5%93%81%E5%BF%AB%E9%80%9F%E8%BF%AD%E4%BB%A3/</url>
    <content><![CDATA[<h1 id="如何使用功能开关，支持产品快速迭代"><a href="#如何使用功能开关，支持产品快速迭代" class="headerlink" title="如何使用功能开关，支持产品快速迭代"></a>如何使用功能开关，支持产品快速迭代</h1><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09%EF%BD%9C%E5%BC%80%E5%85%B3%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%9F%E8%83%BD%E5%BC%80%E5%85%B3%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BA%A7%E5%93%81%E5%BF%AB%E9%80%9F%E8%BF%AD%E4%BB%A3/17391673736001.jpg"></p>
<span id="more"></span>

<p>代码管理规范一讲我提到过，开发功能的时候要新建功能分支。在实际工作当中，有一种功能分支我把它叫作 <strong>长命功能分支（Long lived feature branch）</strong>，因为有些大功能需要我们花几周甚至几个月来开发，相对应地它的功能分支也会非常庞大。</p>
<p>当整个功能开发完毕后，我们需要把它合并到主分支里面，因为里面代码实在太多了，不可避免地就会出现许多合并冲突。哪怕勉强修正并编译通过，App 里面也很可能隐藏一些不容易发现的 Bug。</p>
<p>怎样解决这种难题呢？</p>
<p>通常的办法是我们会把一个庞大的功能分拆成多个小任务，每个任务都建一个独立的功能分支，当一个任务完成后马上合并到主分支里面。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09%EF%BD%9C%E5%BC%80%E5%85%B3%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%9F%E8%83%BD%E5%BC%80%E5%85%B3%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BA%A7%E5%93%81%E5%BF%AB%E9%80%9F%E8%BF%AD%E4%BB%A3/17391552993926.jpg"></p>
<p>如上图所示，为了完成一个庞大的功能，如实时通讯功能，我们分拆成多个小的功能分支，比如显示对话的子功能分支 <code>branch-1</code>，显示表情符号的子功能分支 <code>branch-2</code> 等等。注意，我在图里面使用数字作为分支名字只是为了演示同一个大功能使用多个子分支，在现实情况下要根据每个小任务的内容进行命名。</p>
<p>但这样拆分成多个小的功能分支会导致什么问题呢？会出现我们每次把小任务合并到主分支的时候，不小心把未完成的功能发布给用户。例如我们在发布V1.2版本的 App 时就包含了 <code>branch-1</code> 分支上的代码，可是整个功能还没有开发完毕，我们并不愿意把这部分代码发布给 App Store 的用户。</p>
<p>那有没有什么办法既能及时合并代码，又能保证主分支可以随时发布呢？有，答案就是使用功能开关组件。</p>
<h2 id="功能开关的好处"><a href="#功能开关的好处" class="headerlink" title="功能开关的好处"></a>功能开关的好处</h2><p><strong>功能开关</strong> 是软件开发中一种十分实用且功能强大的技术，它允许我们在不改变代码的情况下调整软件的行为。有了它，我们在快速开发的同时，也能放心定期发布新版本。</p>
<p>具体来说，当我们开发每一个大功能时，如果先定义一个功能开关，然后在整个功能开发完毕后再移除它，那么在移除之前，我们提交的任何版本就能避免因为疏忽大意而把未完成的功能发布到终端用户手上。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09%EF%BD%9C%E5%BC%80%E5%85%B3%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%9F%E8%83%BD%E5%BC%80%E5%85%B3%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BA%A7%E5%93%81%E5%BF%AB%E9%80%9F%E8%BF%AD%E4%BB%A3/17391555708301.jpg"></p>
<p>如上图所示，当我们开发一个大功能时，先从主分支签出一个功能分支 <code>add-toggle</code> 来添加一个功能开关。 然后我们就可以把该功能拆分成多个子功能分支来进行开发，并不断地合并到主分支里面。在整个功能开发完毕以后，我们可以从主分支签出一个分支 <code>remove-toggle</code> 来把功能开关删除掉。这个功能只会在 V1.4 版本里面才会发布给终端用户。在此之前用户完全不知道这个功能的存在。</p>
<p>使用功能开关是保证主分支可以随时进行发布的有效手段。可以说，<strong>一个能随时发布的主分支是衡量一个开发环境成熟与否的标准</strong>，为什么这样说呢？有两大原因：</p>
<ol>
<li><p>它是多团队平行开发的基础，当其中一个团队完成了一个功能以后，就可以在不与任何其他团队沟通的情况下马上进行发布；</p>
</li>
<li><p>它是自动化发布的基础，有了随时可以发布的主分支，我们只需要更新版本号就可以让 CI 在任何时候打包并发布到 App Store，无须任何人为参与。</p>
</li>
</ol>
<p>既然功能开关那么强大，那怎么实现呢？接下来我们就结合 Moments App 一起来看看。</p>
<h2 id="功能开关组件的实现"><a href="#功能开关组件的实现" class="headerlink" title="功能开关组件的实现"></a>功能开关组件的实现</h2><p>根据不同的使用场景，我们为Moments App 开发了三类功能开关组件：<strong>编译时开关、本地开关和远程开关</strong>。</p>
<ul>
<li><p>编译时开关：让编译器通过检查编译条件来启动或者关闭一些功能。</p>
</li>
<li><p>本地开关：让用户在 App 里面手动启动或者关闭一些功能。</p>
</li>
<li><p>远程开关：让产品经理远程遥控 App 来启动或者关闭一些功能。</p>
</li>
</ul>
<p>下面我们一起来看看怎样实现这些功能开关组件吧。首先我们定义了一个名字叫作 <code>ToggleType</code> 的协议 <code>（Protocol）</code>，然后分别定义了三个枚举类型 <code>（Enum）</code>来代表三类开关。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09%EF%BD%9C%E5%BC%80%E5%85%B3%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%9F%E8%83%BD%E5%BC%80%E5%85%B3%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BA%A7%E5%93%81%E5%BF%AB%E9%80%9F%E8%BF%AD%E4%BB%A3/17391557516999.jpg"></p>
<p>有了这些功能开关的定义以后，接着我们定义这些开关的 <code>DataStore</code>。首先建立了一个名叫 <code>TogglesDataStoreType</code> 的协议，它只定义了两个方法，其中 <code>isToggleOn(_ toggle: ToggleType) -&gt; Bool</code> 用于读取某个开关的值，而 <code>update(toggle: ToggleType, value: Bool)</code> 用于更新某个开关的值。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09%EF%BD%9C%E5%BC%80%E5%85%B3%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%9F%E8%83%BD%E5%BC%80%E5%85%B3%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BA%A7%E5%93%81%E5%BF%AB%E9%80%9F%E8%BF%AD%E4%BB%A3/17391558141309.jpg"></p>
<p>然后我们为每一类开关定义一个实现的结构体<code>（Struct）</code>。因为远程开关我会在后面的 29 讲详细介绍，所以在这一讲我主要为你介绍下编译时开关和本地开发怎样实现的。</p>
<h2 id="编译时开关组件"><a href="#编译时开关组件" class="headerlink" title="编译时开关组件"></a>编译时开关组件</h2><p>下面是编译时开关 <code>BuildTargetTogglesDataStore</code>的实现代码。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BuildTargetTogglesDataStore</span>: <span class="title class_">TogglesDataStoreType</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared: <span class="type">BuildTargetTogglesDataStore</span> <span class="operator">=</span> .<span class="keyword">init</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> buildTarget: <span class="type">BuildTargetToggle</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">#if</span> <span class="type">DEBUG</span></span><br><span class="line">        buildTarget <span class="operator">=</span> .debug</span><br><span class="line">        <span class="keyword">#endif</span></span><br><span class="line">        <span class="keyword">#if</span> <span class="type">INTERNAL</span></span><br><span class="line">        buildTarget <span class="operator">=</span> .internal</span><br><span class="line">        <span class="keyword">#endif</span></span><br><span class="line">        <span class="keyword">#if</span> <span class="type">PRODUCTION</span></span><br><span class="line">        buildTarget <span class="operator">=</span> .production</span><br><span class="line">        <span class="keyword">#endif</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isToggleOn</span>(<span class="keyword">_</span> <span class="params">toggle</span>: <span class="type">ToggleType</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> toggle <span class="operator">=</span> toggle <span class="keyword">as?</span> <span class="type">BuildTargetToggle</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> toggle <span class="operator">==</span> buildTarget</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">update</span>(<span class="params">toggle</span>: <span class="type">ToggleType</span>, <span class="params">value</span>: <span class="type">Bool</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为 <code>BuildTargetTogglesDataStore</code> 遵循了 <code>TogglesDataStoreType</code>，我在这里实现了 <code>isToggleOn</code> 和 <code>update</code> 两个方法。由于我们不可能在运行时更新编译时的编译条件，因此 <code>update</code> 方法的实现体为空。</p>
<p>而在 <code>isToggleOn</code> 方法里面，我们会检查传递进来的 <code>ToggleType</code> 的值是否和属性 <code>buildTarget</code> 的值相等，如果相等就返回 <code>true</code>，如果不相等就返回 <code>false</code>。</p>
<p>那 <code>buildTarget</code> 的值是怎样来的呢？我们可以看看 <code>init</code> 方法。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09%EF%BD%9C%E5%BC%80%E5%85%B3%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%9F%E8%83%BD%E5%BC%80%E5%85%B3%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BA%A7%E5%93%81%E5%BF%AB%E9%80%9F%E8%BF%AD%E4%BB%A3/17391562905265.jpg"></p>
<p>在 <code>init</code> 方法里面，我们有三条判断编译条件的语句，当编译条件包含了 <code>INTERNAL</code> 时，就会把 <code>buildTarget</code> 赋值为 <code>.internal</code> 。那 <code>INTERNAL</code> 从哪里来的呢？</p>
<p>我在如何搭建多环境支持那一讲提到过怎样通过 <code>xcconfig</code> 文件来配置多个 <code>Build Configuration</code>。该编译条件 <code>INTERNAL</code> 来自 <code>InternalProject.xcconfig</code> 文件。如下所示，我们把 <code>INTERNAL</code> 赋值给 <code>SWIFT_ACTIVE_COMPILATION_CONDITIONS</code> 。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">SWIFT_ACTIVE_COMPILATION_CONDITIONS</span> <span class="operator">=</span> $(inherited) <span class="type">INTERNAL</span></span><br></pre></td></tr></table></figure>

<p>在编译的时候，编译器会从 <code>SWIFT_ACTIVE_COMPILATION_CONDITIONS</code>读取编译条件的值，当发现该编译条件已经定义了，就会编译 <code>#if #endif</code> 代码块内的代码。</p>
<p>回到上图 init 方法的例子，当我们选择了 <code>Moments-Internal Scheme </code> 时，编译器就会选择名字叫作 <code>Internal</code> 的 <code>Build Configuration</code>。这个 <code>Configuration</code> 读取 <code>InternalProject.xcconfig</code> 后把<code>SWIFT_ACTIVE_COMPILATION_CONDITIONS</code> 赋值为 <code>INTERNAL</code>。因此，在编译的时候，上面的代码只有第 25 行会编译，第 21 行和第 29 行都会被忽略掉。</p>
<p>通过编译时开关，我们就能让不同环境版本的 App 激活或者隐藏不同的功能。下面是如何导航到隐藏功能菜单页面的代码。它的大致逻辑是，我们通过重写 <code>UIWindow</code> 的 <code>motionEnded</code> 方法来捕捉手机震动的事件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">UIWindow</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">motionEnded</span>(<span class="keyword">_</span> <span class="params">motion</span>: <span class="type">UIEvent</span>.<span class="type">EventSubtype</span>, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">BuildTargetTogglesDataStore</span>.shared.isToggleOn(<span class="type">BuildTargetToggle</span>.debug)</span><br><span class="line">            <span class="operator">||</span> <span class="type">BuildTargetTogglesDataStore</span>.shared.isToggleOn(<span class="type">BuildTargetToggle</span>.internal) &#123;</span><br><span class="line">            <span class="keyword">let</span> router: <span class="type">AppRouting</span> <span class="operator">=</span> <span class="type">AppRouter</span>()</span><br><span class="line">            <span class="keyword">if</span> motion <span class="operator">==</span> .motionShake &#123;</span><br><span class="line">                router.route(to: <span class="type">URL</span>(string: <span class="string">&quot;<span class="subst">\(UniversalLinks.baseURL)</span>InternalMenu&quot;</span>), from: rootViewController, using: .present)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体来说，当用户在摇动手机的时候，代码会通过<code>BuildTargetTogglesDataStore</code> 的 <code>isToggleOn</code> 方法来检查当前的 App 是否为开发环境或者测试环境版本，如果“是”就会使用 <code>AppRouter</code> 到导航到隐藏功能菜单页面。如果“不是”（如生产环境 App Store版本），就不进行导航。这样能保证从 App Store 上下载 App 的用户，没办法使用隐藏菜单的功能。</p>
<h2 id="本地开关组件"><a href="#本地开关组件" class="headerlink" title="本地开关组件"></a>本地开关组件</h2><p>如果说编译时开关能够方便你为不同环境的 App 激活或者隐藏不同的功能，那么本地开关则可以让内部测试人员和产品经理随时测试和验证功能，从而保证产品快速的迭代。</p>
<p>下面一起看看本地开关的实现代码。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">InternalToggle</span>: <span class="title class_">String</span>, <span class="title class_">ToggleType</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> isLikeButtonForMomentEnabled</span><br><span class="line">    <span class="keyword">case</span> isSwiftUIEnabled</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">InternalTogglesDataStore</span>: <span class="title class_">TogglesDataStoreType</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userDefaults: <span class="type">UserDefaults</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>(<span class="params">userDefaults</span>: <span class="type">UserDefaults</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.userDefaults <span class="operator">=</span> userDefaults</span><br><span class="line">        <span class="keyword">self</span>.userDefaults.register(defaults: [</span><br><span class="line">            <span class="type">InternalToggle</span>.isLikeButtonForMomentEnabled.rawValue: <span class="literal">false</span>,</span><br><span class="line">            <span class="type">InternalToggle</span>.isSwiftUIEnabled.rawValue: <span class="literal">false</span></span><br><span class="line">            ])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared: <span class="type">InternalTogglesDataStore</span> <span class="operator">=</span> .<span class="keyword">init</span>(userDefaults: .standard)</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">isToggleOn</span>(<span class="keyword">_</span> <span class="params">toggle</span>: <span class="type">ToggleType</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> toggle <span class="operator">=</span> toggle <span class="keyword">as?</span> <span class="type">InternalToggle</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userDefaults.bool(forKey: toggle.rawValue)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">update</span>(<span class="params">toggle</span>: <span class="type">ToggleType</span>, <span class="params">value</span>: <span class="type">Bool</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> toggle <span class="operator">=</span> toggle <span class="keyword">as?</span> <span class="type">InternalToggle</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        userDefaults.set(value, forKey: toggle.rawValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当每次新增一个本地开关的时候，我们都在 <code>InternalToggle</code> 枚举里面添加一个 <code>case</code>。当前的 Moments App 有两个本地开关，分别用于 <strong>点赞功能</strong> 和 <strong>使用 SwiftUI</strong>。</p>
<p>因为 <code>InternalTogglesDataStore</code> 也遵循了<code>TogglesDataStoreType</code> 协议，所以也需要实现 <code>isToggleOn</code> 和<code>update</code> 两个方法。它们都使用了 <code>UserDefaults</code> 来读写配置信息，这样能保证用户重启 App 以后也能获取之前所选择的开关配置。</p>
<p>这里我给你分享一个管理本地开关的技巧。</p>
<p>在 <code>init</code> 方法里面，我通过 <code>UserDefaults</code> 的 <code>register</code> 方法为每个开关赋予默认值。绝大多数情况下，这个默认值都为 <code>false</code>，表示该功能还没有发布。</p>
<p>那什么时候这个值会成为 <code>true</code> 呢？假如我们完成了一个功能，而且产品经理验证过可以发布上线，那么我就可以把该开关的默认值设为 <code>true</code>。但上线以后发现该功能引起严重的崩溃，我们可以马上把该值修改为 <code>false</code> 并立刻发布新版本。</p>
<p>还有一点需要注意的是，当功能上线并运行正常的情况下，要及时清理相关的功能开关，因为开关太多会增加代码逻辑的复杂度。</p>
<p>下面一起看看代码中使用本地开关的例子吧。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="type">InternalTogglesDataStore</span>.shared.isToggleOn(<span class="type">InternalToggle</span>.isSwiftUIEnabled) &#123;</span><br><span class="line">    window<span class="operator">?</span>.rootViewController <span class="operator">=</span> <span class="type">UIHostingController</span>(rootView: <span class="type">SwiftUIMomentsListView</span>().environmentObject(<span class="type">UserDataStoreObservableObject</span>()))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    window<span class="operator">?</span>.rootViewController <span class="operator">=</span> <span class="type">MomentsListViewController</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们通过 <code>InternalTogglesDataStore</code> 来检查 <code>.isSwiftUIEnabled</code> 开关是否启动，如果“是”就启动 <code>SwiftUI</code> 的界面，否则就启动 <code>UIKit</code> 的界面。下面是演示的效果。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09%EF%BD%9C%E5%BC%80%E5%85%B3%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8A%9F%E8%83%BD%E5%BC%80%E5%85%B3%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BA%A7%E5%93%81%E5%BF%AB%E9%80%9F%E8%BF%AD%E4%BB%A3/17391573121369.gif"></p>
<p>我们可以在内部隐藏菜单里面启动或者关闭 <code>SwiftUIEnable</code> 开关。App 在启动的时候会根据该开关来选择启动 <code>SwiftUI</code> 或者 <code>UIKit</code> 的界面。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一讲主要介绍了如何使用功能开关来解决长命功能分支的问题，并详细介绍了如何开发编译时开关组件和本地开发组件。有了这些功能开关组件以后，既保证我们能快速开发功能，又能保证发布的版本不会出错，让整个团队在安全的环境下快速迭代。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS进阶】08 | 设计组件：DesignKit组件桥接设计与开发规范</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/08%EF%BD%9C%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6%EF%BC%9ADesignKit%E7%BB%84%E4%BB%B6%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="DesignKit-组件桥接设计与开发规范"><a href="#DesignKit-组件桥接设计与开发规范" class="headerlink" title="DesignKit 组件桥接设计与开发规范"></a>DesignKit 组件桥接设计与开发规范</h1><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/08%EF%BD%9C%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6%EF%BC%9ADesignKit%E7%BB%84%E4%BB%B6%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/17373431283113.jpg"></p>
<span id="more"></span>

<p>在上一模块“配置与规范”中，我主要介绍了如何统一项目的配置，以及如何制定统一开发和设计规范。</p>
<p>接下来我们将进入基础组件设计模块，我会为你介绍一些在 iOS 开发过程中，工程化实践需要用的组件，比如 <strong>设计组件</strong>、<strong>路由组件</strong> 。除此之外，我还会聊聊在开发中如何支持 <strong>多语言</strong>、<strong>动态字体</strong> 和 <strong>深色模式</strong> 等辅助功能，让你的 App 既有国际范，获取更多用户，还能提升用户体验，获得更多好评。</p>
<p>这一讲，我们就先来聊聊公共组件库，以及如何封装基础设计组件。</p>
<h2 id="封装公共功能组件库"><a href="#封装公共功能组件库" class="headerlink" title="封装公共功能组件库"></a>封装公共功能组件库</h2><p>随着产品不断发展，我们会发现，越来越多的公共功能可以封装成组件库，从而被各个模块甚至多个 App 共同使用，比如 <strong>字体</strong>、<strong>调色板</strong>、<strong>间距</strong> 和 <strong>头像</strong> 可以封装成 <strong>UI 设计组件库</strong>，<strong>登录会话</strong> 和 <strong>权限管理</strong> 可以封装成 <strong>登录与鉴权组件库</strong>。</p>
<p>通过利用这些公共功能组件库，不仅能节省大量开发时间，不需要我们再为每个模块重复实现类似的功能；还能减少编译时间，因为如果没有独立的组件库，一点代码的改动都会导致整个 App 重新编译与链接。</p>
<p>那么，怎样才能创建和使用公共功能组件库呢？下面我们以一个设计组件库 <strong>DesignKit</strong> 为例子介绍下具体怎么做。</p>
<h3 id="创建内部公共功能组件库"><a href="#创建内部公共功能组件库" class="headerlink" title="创建内部公共功能组件库"></a>创建内部公共功能组件库</h3><p>公共功能组件库根据使用范围可以分为三大类：<strong>内部库</strong>、<strong>私有库</strong> 和 <strong>开源库</strong>。</p>
<ul>
<li><p><strong>内部库</strong>，是指该库和主项目共享一个 <code>Repo</code> ，它可以共享到主项目的所有模块中。</p>
</li>
<li><p><strong>私有库</strong>，是指该库使用独立的私有 <code>Repo</code> ，它可以共享到公司多个 App 中。</p>
</li>
<li><p><strong>开源库</strong>，是指该库发布到 GitHub 等开源社区提供给其他开发者使用。</p>
</li>
</ul>
<p>这三类库的创建和使用方式都是一致的。<strong>在实际操作中，我们一般先创建内部库，如果今后有必要，可以再升级为私有库乃至开源库。</strong> 下面咱们一起看看怎样创建内部库。</p>
<p>为了方便管理各个内部公共功能组件库，首先我们新建一个叫作 <strong>Frameworks</strong> 的文件夹，来保存所有的内部库。这个文件夹所在位置和主项目文件夹（在我们例子中是 Moments）以及 Workplace 文档（<code>Moments.xcworkspace</code>）平行。</p>
<p>例如下面的文件结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Frameworks</span>          <span class="title class_">Moments</span>             <span class="title class_">Pods</span>            <span class="title class_">Moments</span>.<span class="property">xcworkspace</span></span><br></pre></td></tr></table></figure>

<p>然后我们通过 <strong>CocoaPods</strong> 创建和管理这个内部库。</p>
<p>怎么做呢？有两种办法可以完成这项工作：</p>
<p><strong>一种是</strong>，使用 <code>pod lib create [pod name]</code> 命令。比如在这个案例当中，我们可以在 Frameworks 文件夹下执行 <code>bundle exec pod lib create DesignKit</code> 命令，然后输入邮箱、语言和平台等信息，让 CocoaPods 创建一个  <code>DesignKit.podspec</code> 以及例子项目等一堆文件。具体如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">DesignKit</span>         <span class="title class_">Example</span>           <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line"><span class="title class_">DesignKit</span>.<span class="property">podspec</span> <span class="variable constant_">LICENSE</span>           _Pods.<span class="property">xcodeproj</span></span><br></pre></td></tr></table></figure>

<p><code>DesignKit.podspec</code> 是 DesignKit 库的 Pod 描述文件，用于描述该 Pod 库的一个特定版本信息。它存放在 CocoaPods 的中心 Repo 供使用者查找和使用。</p>
<p>随着这个 Pod 库的迭代，CocoaPods 的中心 Repo 会为每个特定的 Pod 版本存放一个对应的 podspec 文件。每个 podspec 文件都包括 Pod 对应 Repo 的 URL、源码存放的位置、所支持的系统平台及其系统最低版本号、Swift 语言版本，以及 Pod 的名字、版本号和描述等信息。</p>
<p>DesignKit 组件库的 podspec 文件你可以在 <a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Frameworks/DesignKit/DesignKit.podspec?fileGuid=xxQTRXtVcqtHK6j8">代码仓库</a> 中找到。下面是该 podspec 文件的一些重要配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="property">name</span>    = <span class="string">&#x27;DesignKit&#x27;</span></span><br><span class="line">s.<span class="property">version</span> = <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line">s.<span class="property">ios</span>.<span class="property">deployment_target</span> = <span class="string">&#x27;14.0&#x27;</span></span><br><span class="line">s.<span class="property">swift_versions</span> = <span class="string">&#x27;5.3&#x27;</span></span><br><span class="line">s.<span class="property">source_files</span> = <span class="string">&#x27;src/**/*&#x27;</span></span><br><span class="line">s.<span class="property">resources</span> = <span class="string">&#x27;assets/**/*&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>name</code>：是该组件的名字；</li>
<li><code>version</code>：是组件的版本号，当我们更新组件的时候同时需要使用 <strong>Semantic Versioning</strong>（语义化版本号）更新该版本号。</li>
<li><code>ios.deployment_target</code>：为该库所支持的平台和所支持平台的最低版本号。</li>
<li><code>swift_versions</code>：是支持 Swift 语言的版本号。</li>
<li><code>source_files</code>：是该库的源代码所在的文件夹，在我们例子中是 src。</li>
<li><code>resources</code>：是该库资源文件所在的文件夹。</li>
</ul>
<p><strong>另外一种</strong>，是手工创建 DesignKit.podspec 文件。<strong>我偏向于这一种，因为手工创建出来的项目更简练。</strong></p>
<p>比如在这里，我们只需要在 Frameworks 新建一个叫作 DesignKit 的文件夹，然后在它下面建立 src 和 assets 这两个文件夹，以及 LICENSE 和 DesignKit.podspec 这两个文件即可。</p>
<p>如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">DesignKit</span>.<span class="property">podspec</span>       <span class="variable constant_">LICENSE</span>         assets            src</span><br></pre></td></tr></table></figure>

<p>以后所有 <em>源代码文件</em> 都存放在 <code>src</code> 文件夹下面，而 <em>图片</em>、<em>Xib</em> 和 <em>Storyboard</em> 等 <em>资源文件</em> 存放在 <code>assets</code> 文件夹下。</p>
<p><code>LICENSE</code> 是许可证文件，如果是开源库，我们必须严格选择一个许可证，这样才能方便其他开发者使用我们的库。</p>
<h3 id="检测内部公共功能组件库"><a href="#检测内部公共功能组件库" class="headerlink" title="检测内部公共功能组件库"></a>检测内部公共功能组件库</h3><p>为了保证组件库的使用者能顺利安装和使用我们的库，当我们配置好 <code>DesignKit.podspec</code> 文件后，需要执行 <code>bundle exec pod spec lint</code> 命令来检测该 podspec 文件是否正确。如果我们维护的是一个开源库，这一步尤为重要。因为它会影响到使用者的第一印象，因此我们在发布该 Pod 之前需要把每个错误或者警告都修复好。</p>
<p>不过需要注意的是， CocoaPods 对内部库的检测存在一个 Bug， 会显示下面的警告以及错误信息：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">WARN</span> | <span class="title class_">Missing</span> primary key <span class="keyword">for</span> source attribute </span><br><span class="line"><span class="variable constant_">ERROR</span> | <span class="attr">unknown</span>: <span class="title class_">Encountered</span> an unknown error (<span class="title class_">Unsupported</span> download strategy <span class="string">`&#123;:path=&gt;&quot;.&quot;&#125;`</span>.) during validation</span><br></pre></td></tr></table></figure>

<p>由于我们创建的是内部库，所以可以忽略这个警告和错误，只要没有其他错误信息就可以了。</p>
<h3 id="使用内部公共功能组件库"><a href="#使用内部公共功能组件库" class="headerlink" title="使用内部公共功能组件库"></a>使用内部公共功能组件库</h3><p>使用内部公共功能组件库非常简单，只要在主项目的 <code>Podfile</code> 里面使用 <code>:path</code> 来指定该内部库的路径即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pod <span class="string">&#x27;DesignKit&#x27;</span>, :<span class="function"><span class="params">path</span> =&gt;</span> <span class="string">&#x27;./Frameworks/DesignKit&#x27;</span>, :<span class="function"><span class="params">inhibit_warnings</span> =&gt;</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>当执行 <code>bundle exec pod install</code> 命令以后，CocoaPods 会在 Pods 项目下建立一个<br><code>Development Pods</code> 文件夹来存放所有内部库的相关文件。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/08%EF%BD%9C%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6%EF%BC%9ADesignKit%E7%BB%84%E4%BB%B6%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/17373431509846.jpg"></p>
<p>有了 CocoaPods，我们新建、管理和使用公共组件库就会变得非常简单。下面我们介绍下如何开发设计组件 DesignKit。</p>
<h2 id="DesignKit-设计组件"><a href="#DesignKit-设计组件" class="headerlink" title="DesignKit 设计组件"></a>DesignKit 设计组件</h2><p>DesignKit 是一个设计组件，用于封装与 UI 相关的公共组件。为了方便维护，每次新增一个组件，我们最好都建立一个独立的文件夹，例如把 <code>UIButtonExtensions.swift</code> 放在新建的 <code>FavoriteButton</code> 文件夹中。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/08%EF%BD%9C%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6%EF%BC%9ADesignKit%E7%BB%84%E4%BB%B6%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/17373431685601.jpg"></p>
<p>下面以几乎每个 App 都会使用到的三个组件：<em>间距（Spacing）</em>、<em>头像（Avatar）</em> 和 <em>点赞按钮（Favorite Button）</em> 为例子，介绍下如何封装基础设计组件。</p>
<h3 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h3><p>为了呈现信息分组并体现信息的主次关系，所有 App 的所有页面都会使用到间距来添加留白效果。</p>
<p>间距看起来这么简单，为什么我们还需要为其独立封装为一个公共组件呢？主要原因有这么几条。</p>
<ol>
<li><p>可以为整个 App 提供一致的体验，因为我们统一定义了所有间距，各个功能模块的 UI 呈现都保持一致。</p>
</li>
<li><p>可以减低设计师和开发者的沟通成本，不会再为某些像素值的多与少而争论不休。设计师只使用预先定义的间距，而开发者也只使用在代码中定义好的间距就行了。</p>
</li>
<li><p>可以减低设计师的工作量，很多 UI 界面可以只提供一个设计稿来同时支持 iOS、Android 以及移动 Web。因为设计师只提供预先定义的间距名，而不是 hardcoded （硬编码）的像素值。不同设备上像素值有可能不一样，但间距名却能保持一致。</p>
</li>
<li><p>在支持响应式设计的时候，这些间距定义可以根据设备的宽度而自动调整。这远比硬编码的像素值灵活很多，例如在 iPhone 中 twoExtraSmall 是 4 points，而在 iPad 中是 6 points。</p>
</li>
</ol>
<p>别看间距公共组件有那么多优点，但实现起来并不难，一个 <strong>struct</strong> 就搞定了，简直是一本万利的投入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public struct <span class="title class_">Spacing</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">let</span> <span class="attr">twoExtraSmall</span>: <span class="title class_">CGFloat</span> = <span class="number">4</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">let</span> <span class="attr">extraSmall</span>: <span class="title class_">CGFloat</span> = <span class="number">8</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">let</span> <span class="attr">small</span>: <span class="title class_">CGFloat</span> = <span class="number">12</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">let</span> <span class="attr">medium</span>: <span class="title class_">CGFloat</span> = <span class="number">18</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">let</span> <span class="attr">large</span>: <span class="title class_">CGFloat</span> = <span class="number">24</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">let</span> <span class="attr">extraLarge</span>: <span class="title class_">CGFloat</span> = <span class="number">32</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">let</span> <span class="attr">twoExtraLarge</span>: <span class="title class_">CGFloat</span> = <span class="number">40</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">let</span> <span class="attr">threeExtraLarge</span>: <span class="title class_">CGFloat</span> = <span class="number">48</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了上述的定义以后，使用这些间距变得很简单。请看：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">DesignKit</span></span><br><span class="line"></span><br><span class="line">private <span class="keyword">let</span> <span class="attr">likesStakeView</span>: <span class="title class_">UIStackView</span> = <span class="title function_">configure</span>(<span class="params">.init()</span>) &#123;</span><br><span class="line">    $0.<span class="property">spacing</span> = <span class="title class_">Spacing</span>.<span class="property">twoExtraSmall</span></span><br><span class="line">    $0.<span class="property">directionalLayoutMargins</span> = <span class="title class_">NSDirectionalEdgeInsets</span>(<span class="attr">top</span>: <span class="title class_">Spacing</span>.<span class="property">twoExtraSmall</span>, <span class="attr">leading</span>: <span class="title class_">Spacing</span>.<span class="property">twoExtraSmall</span>, <span class="attr">bottom</span>: <span class="title class_">Spacing</span>.<span class="property">twoExtraSmall</span>, <span class="attr">trailing</span>: <span class="title class_">Spacing</span>.<span class="property">twoExtraSmall</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以先 <code>import DesignKit</code> 库，然后通过 <code>Spacing</code> 结构体直接访问预定义的间距，例如 <code>Spacing.twoExtraSmall</code>。</p>
<h3 id="头像组件"><a href="#头像组件" class="headerlink" title="头像组件"></a>头像组件</h3><p>iOS 开发者都知道，头像组件应用广泛，例如在房产 App 中显示中介的头像，在我们例子 Moments App 中显示自己和好友头像，在短视频 App 中显示视频博主头像等。</p>
<p>也许你会问，头像那么简单，为什么需要独立封装为一个组件？原因主要是方便以后改变其 UI 的呈现方式，例如从圆角方形改成圆形，添加边界线（border），添加阴影效果（shadow）等。有了独立的组件以后，我们只需要修改一个地方就能把这个 App 的所有头像一次性地修改呈现效果。</p>
<p>下面是头像组件的实现方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public extension <span class="title class_">UIImageView</span> &#123;</span><br><span class="line">    func <span class="title function_">asAvatar</span>(<span class="params">cornerRadius: CGFloat = <span class="number">4</span></span>) &#123;</span><br><span class="line">        clipsToBounds = <span class="literal">true</span></span><br><span class="line">        layer.<span class="property">cornerRadius</span> = cornerRadius</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们为 UIKit 所提供的 <code>UIImageView</code> 实现了一个扩展方法 <code>asAvatar(cornerRadius:)</code> ，该方法接收 <code>cornerRadius</code> 作为参数来配置圆角的角度，默认值是 <code>4</code>。</p>
<p>使用也是非常简单，只有创建一个 <code>UIImageView</code> 的实例，然后调用 <code>asAvatar(cornerRadius:)</code> 方法即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private <span class="keyword">let</span> <span class="attr">userAvatarImageView</span>: <span class="title class_">UIImageView</span> = <span class="title function_">configure</span>(<span class="params">.init()</span>) &#123;</span><br><span class="line">    $0.<span class="title function_">asAvatar</span>(<span class="attr">cornerRadius</span>: <span class="number">4</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是人像组件的显示效果，可以在内部菜单查看。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/08%EF%BD%9C%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6%EF%BC%9ADesignKit%E7%BB%84%E4%BB%B6%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/17373431939202.jpg"></p>
<h3 id="点赞按钮"><a href="#点赞按钮" class="headerlink" title="点赞按钮"></a>点赞按钮</h3><p>可以说，每个具有社交属性的 App 都会用到点赞功能，所以在开发当中，点赞按钮也是必不可少的功能组件。</p>
<p>那么，点赞按钮该如何封装呢？和人像组件十分类似，我们可以通过扩展 <code>UIButton</code>来实现。示例代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public extension <span class="title class_">UIButton</span> &#123;</span><br><span class="line">    func <span class="title function_">asStarFavoriteButton</span>(<span class="params">pointSize: CGFloat = <span class="number">18</span>, weight: UIImage.SymbolWeight = .semibold, scale: UIImage.SymbolScale = .<span class="keyword">default</span>, fillColor: UIColor = UIColor(hex: <span class="number">0xf1c40f</span>)</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> symbolConfiguration = <span class="title class_">UIImage</span>.<span class="title class_">SymbolConfiguration</span>(<span class="attr">pointSize</span>: pointSize, <span class="attr">weight</span>: weight, <span class="attr">scale</span>: scale)</span><br><span class="line">        <span class="keyword">let</span> starImage = <span class="title class_">UIImage</span>(<span class="attr">systemName</span>: <span class="string">&quot;star&quot;</span>, <span class="attr">withConfiguration</span>: symbolConfiguration)</span><br><span class="line">        <span class="title function_">setImage</span>(starImage, <span class="attr">for</span>: .<span class="property">normal</span>)</span><br><span class="line">        <span class="keyword">let</span> starFillImage = <span class="title class_">UIImage</span>(<span class="attr">systemName</span>: <span class="string">&quot;star.fill&quot;</span>, <span class="attr">withConfiguration</span>: symbolConfiguration)</span><br><span class="line">        <span class="title function_">setImage</span>(starFillImage, <span class="attr">for</span>: .<span class="property">selected</span>)</span><br><span class="line">        tintColor = fillColor</span><br><span class="line">        <span class="title function_">addTarget</span>(self, <span class="attr">action</span>: #<span class="title function_">selector</span>(touchUpInside), <span class="attr">for</span>: .<span class="property">touchUpInside</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private extension <span class="title class_">UIButton</span> &#123;</span><br><span class="line">    @objc</span><br><span class="line">    private func <span class="title function_">touchUpInside</span>(<span class="params">sender: UIButton</span>) &#123;</span><br><span class="line">        isSelected = !isSelected</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其核心逻辑把当前 <code>UIButton</code> 对象的普通 (<code>.normal</code>) 状态和选中 (<code>.selected</code>) 状态设置不同的图标。比如在这里我就把星星按钮的普通状态设置成了名叫 “Star” 的图标，并把它的选中状态设置成了名叫 “tar.fill”” 的图标。</p>
<p>注意，这些图标来自苹果公司的 <a href="https://developer.apple.com/sf-symbols/">SF Symbols</a> 不需要额外安装，<code>iOS 14</code> 系统本身就自带了。而且它们的使用也非常灵活，支持字号、字重、填充色等配置。</p>
<p>使用点赞按钮组件也非常简单，只需要建立一个 <code>UIButton</code> 的实例，然后调用 <code>asStarFavoriteButton</code> 方法就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private <span class="keyword">let</span> <span class="attr">favoriteButton</span>: <span class="title class_">UIButton</span> = <span class="title function_">configure</span>(<span class="params">.init()</span>) &#123;</span><br><span class="line">    $0.<span class="title function_">asStarFavoriteButton</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点赞按钮的运行效果，也可以在内部菜单查看。</p>
<p>以上我们以间距、头像、点赞按钮为例介绍了如何使用 DesignKit 封装与 UI 相关的公共组件。以我多年的开发经验来说，在封装 UI 组件的时候，可以遵循下面几个原则:</p>
<ol>
<li><p>尽量使用扩展方法而不是子类来扩展组件，这样做可以使其他开发者在使用这些组件时，仅需要调用扩展方法，而不必使用特定的类。</p>
</li>
<li><p>尽量使用代码而不要使用 Xib 或者 Storyboard，因为有些 App 完全不使用 Interface Builder。</p>
</li>
<li><p>如果可以，要为组件加上 <code>@IBDesignable</code> 和 <code>@IBInspectable</code> 支持，这样能使得开发者在使用 <code>Interface Builder</code> 的时候预览我们的组件。</p>
</li>
<li><p>尽量只使用 UIkit 而不要依赖任何第三方库，否则我们可能会引入一个不可控的依赖库。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前面我介绍了如何封装公共功能组件库，以及以怎样封装基础设计组件，希望对你有所帮助。合理使用功能组件可以让你的开发事半功倍。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/08%EF%BD%9C%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6%EF%BC%9ADesignKit%E7%BB%84%E4%BB%B6%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/17373431283113.jpg"></p>
<p>不过，在封装组件的时候，我还需要提醒你注意这么几点。</p>
<ul>
<li><p><strong>首先</strong>，为了减低组件之间的耦合性，提高组件的健壮性，组件的设计需要符合单一功能原则 。也就是说，一个组件只做一件事情，一个组件库只做一类相关的事情。每个组件库都要相对独立且功能单一。</p>
<p>比如，我们可以分别封装 <em>网络库</em>、<em>UI 库</em>、<em>蓝牙处理库</em> 等底层库，但不能把所有库合并在一个单独的库里面，这样可以方便上层应用按需使用这些依赖库。例如，广告 SDK 可以依赖于网络库、UI 库，但并不依赖蓝牙处理库。这样做一方面可以减少循环依赖的可能性，另一方面可以加快编译和链接的速度，方便使用。</p>
</li>
<li><p><strong>其次</strong>，每次发布新增和更新组件的时候，都需要严格按照 <em>Semantic Versioning</em> 来更新版本号，这样有效防止因为版本的问题而引入 Bug。</p>
</li>
<li><p><strong>最后</strong>，组件的开发并不是一蹴而就，很多时候可以根据业务需求把公共模块一点点地移入公共组件库中，一步步地完善组件库的功能。不要为了开发组件而开发组件，很多时候当我们充分理解了使用者的需求后，才能为组件定义完善的接口和完整的功能。</p>
</li>
</ul>
<h3 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h3><blockquote>
<p>DesignKit 源代码：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Frameworks/DesignKit">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Frameworks/DesignKit</a></p>
</blockquote>
<h1 id="学习笔记与扩展"><a href="#学习笔记与扩展" class="headerlink" title="学习笔记与扩展"></a>学习笔记与扩展</h1><p>上文中有提到，功能组件库可以分为三大类：<strong>内部库</strong>、<strong>私有库</strong> 和 <strong>开源库</strong>。而文中只介绍了 <code>Cocoapods</code> 管理 <strong>内部库</strong> 的使用方法，作为学习笔记和扩展，这里就来介绍一下 <strong>私有库</strong> 和 <strong>开源库</strong> 的使用。</p>
<h2 id="私有库"><a href="#私有库" class="headerlink" title="私有库"></a>私有库</h2><h3 id="什么是私有库？"><a href="#什么是私有库？" class="headerlink" title="什么是私有库？"></a>什么是私有库？</h3><p>顾名思义，就是你的私人代码仓库，而不是开源出去让大家都能看到并参与开发的项目。私有仓库可以进行权限控制，只有拥有权限的人才能访问并修改它，也就是我们所说的合作者。</p>
<p>私有库不在<code>cocoaPods</code>的官方<code>Repo</code>仓库中，而是在自建的<code>spec repo</code>中，库索引是以 <code>*.podspec</code>文件形式存在，自建的<code>spec repo</code>放在路径<code>~/.cocoapods/repos</code>下，与<code>master</code>同级，其链接的远程仓库可以是公开的，也可以是私有的。</p>
<h3 id="创建-pod-私有库"><a href="#创建-pod-私有库" class="headerlink" title="创建 pod 私有库"></a>创建 pod 私有库</h3><p>创建私有库有两种方案：<br>第一种方案手动创建 <code>podspec</code>与自己私有仓库进行关联，<br>第二种直接使用 <code>cocoapods</code> 创建</p>
<h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><ol>
<li>首先选择在 Xcode 里新建 <code>framework</code> 项目，并且在公司代码仓库新建两个远程仓库 <strong>（索引库、代码库）</strong> 用 <code>git</code> 将本地 <code>framework</code> 项目推入远端，再用终端本地执行：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#用于创建一个新的 <span class="type">Pod（即一个</span> iOS 或 macOS 的库或框架）的规范文件（`.podspec` 文件）</span><br><span class="line">pod spec create <span class="type">PodName</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 <code>.podspec</code> 里面进行编辑，稍后会详细讲解 <code>podspec</code>文件内容<br>最后在终端执行查看当前 <code>pod</code>文件是否规范：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#用于检查一个 <span class="type">Pod</span> 的规范文件（`.podspec` 文件）是否符合规范和要求</span><br><span class="line">pod spec lint <span class="type">PodName</span>.podspec</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>如果编译成功，符合规范要求就可以提交pod  **(方案一与方案二提交都一样，此处先略过了)**：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">pod repo push 索引库 podName.podspec<span class="operator">--</span>verbose<span class="operator">--</span>use<span class="operator">-</span>libraries<span class="operator">--</span>allow<span class="operator">-</span>warning</span><br></pre></td></tr></table></figure>

<h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><ol>
<li>直接使用 <code>cocoapods</code> 创建</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">pod lib create <span class="type">PodName</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>然后依次输入，执行即可</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">What</span> platform <span class="keyword">do</span> you want to use<span class="operator">??</span> [ iOS <span class="operator">/</span> macOS ]</span><br><span class="line"><span class="operator">&gt;</span> iOS</span><br><span class="line"><span class="type">What</span> language <span class="keyword">do</span> you want to use<span class="operator">??</span> [ <span class="type">Swift</span> <span class="operator">/</span> <span class="type">ObjC</span> ]</span><br><span class="line"><span class="operator">&gt;</span> <span class="type">ObjC</span></span><br><span class="line"><span class="type">Would</span> you liketo include a demo application with your library<span class="operator">?</span> [ <span class="type">Yes</span> <span class="operator">/</span> <span class="type">No</span> ]</span><br><span class="line"><span class="operator">&gt;</span> <span class="type">YES</span></span><br><span class="line"><span class="type">Which</span> testing frameworks will you use<span class="operator">?</span> [ <span class="type">Specta</span> <span class="operator">/</span> <span class="type">Kiwi</span> <span class="operator">/</span> <span class="type">None</span> ]</span><br><span class="line"><span class="operator">&gt;</span> <span class="type">None</span></span><br><span class="line"><span class="type">Would</span> you like to <span class="keyword">do</span> view based testing<span class="operator">?</span> [ <span class="type">Yes</span> <span class="operator">/</span> <span class="type">No</span> ]</span><br><span class="line"><span class="operator">&gt;</span> <span class="type">No</span></span><br><span class="line"><span class="type">What</span> <span class="keyword">is</span> your <span class="keyword">class</span> <span class="title class_">prefix</span>?</span><br><span class="line">&gt; <span class="title class_">HY</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>添加库文件</li>
</ol>
<p>成功后会创建出一个pod_test工程，目录结构如下:</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/08%EF%BD%9C%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6%EF%BC%9ADesignKit%E7%BB%84%E4%BB%B6%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/17373534365111.jpg"></p>
<ol start="4">
<li>将编写好的一些文件拉入 <code>pod_test/classes</code>中，或者在<code>pod_test/classes</code> 目录下新建代码文件：</li>
</ol>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/08%EF%BD%9C%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6%EF%BC%9ADesignKit%E7%BB%84%E4%BB%B6%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/17373535574754.jpg"></p>
<ol start="5">
<li>配置 <code>.podspec</code> 文件</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># <span class="type">Be</span> sure to run `pod lib lint <span class="type">SYCoreKit</span>.podspec&#x27; to ensure this <span class="keyword">is</span> a</span><br><span class="line"># valid spec before submitting.</span><br><span class="line">#</span><br><span class="line"># <span class="keyword">Any</span> lines starting with a # are <span class="keyword">optional</span>, but their use <span class="keyword">is</span> encouraged</span><br><span class="line"># <span class="type">To</span> learn more about a <span class="type">Podspec</span> see https:<span class="comment">//guides.cocoapods.org/syntax/podspec.html</span></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"><span class="type">Pod</span>::<span class="type">Spec</span>.new <span class="keyword">do</span> <span class="operator">|</span>s<span class="operator">|</span></span><br><span class="line">  s.name             <span class="operator">=</span> &#x27;xxxxx&#x27;  #搜索的关键词,注意这里一定要和.podspec的名称一样</span><br><span class="line">  s.version          <span class="operator">=</span> &#x27;<span class="number">0.0</span>.<span class="number">1</span>&#x27; #版本号，每一个版本对应一个tag</span><br><span class="line">  s.summary          <span class="operator">=</span> <span class="string">&quot;iOS框架&quot;</span> #项目简介</span><br><span class="line">  s.description      <span class="operator">=</span> <span class="string">&quot;iOS框架&quot;</span> #pod详细描述</span><br><span class="line">  s.homepage         <span class="operator">=</span> &#x27;&#x27; #项目主页地址</span><br><span class="line">  # s.screenshots   <span class="operator">=</span> &#x27;www.example.com<span class="operator">/</span>screenshots_1&#x27;, &#x27;www.example.com<span class="operator">/</span>screenshots_2&#x27;</span><br><span class="line">  s.license          <span class="operator">=</span> &#123; :type <span class="operator">=&gt;</span> &#x27;<span class="type">MIT</span>&#x27;, :file <span class="operator">=&gt;</span> &#x27;<span class="type">LICENSE</span>&#x27; &#125; #许可证</span><br><span class="line">  s.author           <span class="operator">=</span> &#123; &#x27;superMan&#x27; <span class="operator">=&gt;</span> &#x27;xxxxxxxx&#x27; &#125;#作者</span><br><span class="line">  s.source           <span class="operator">=</span> &#123; :git <span class="operator">=&gt;</span> &#x27;http:<span class="comment">//xxx.git&#x27;, :tag =&gt; s.version.to_s &#125;#项目的地址</span></span><br><span class="line">  s.social_media_url <span class="operator">=</span> &#x27;https:<span class="comment">//twitter.com/xxx&#x27;#作者社交地址</span></span><br><span class="line">#  s.pod_target_xcconfig <span class="operator">=</span> &#123; &#x27;<span class="type">VALID_ARCHS</span>&#x27; <span class="operator">=&gt;</span> &#x27;arm64&#x27;&#125; 是修改当前pod工程中的项目设置</span><br><span class="line">#  s.user_target_xcconfig <span class="operator">=</span> &#123; &#x27;<span class="type">VALID_ARCHS</span>&#x27; <span class="operator">=&gt;</span> &#x27;arm64&#x27;,&#x27;<span class="type">EXCLUDED_ARCHS</span>[sdk<span class="operator">=</span>iphonesimulator<span class="operator">*</span>]&#x27; <span class="operator">=&gt;</span> &#x27;arm64&#x27;&#125;  是修改当前用户工程中的项目设置</span><br><span class="line">  s.ios.deployment_target <span class="operator">=</span> &#x27;<span class="number">12.0</span>&#x27; #支持的pod最低版本</span><br><span class="line">  s.static_framework <span class="operator">=</span> <span class="literal">true</span> #动态库模式pod</span><br><span class="line">  s.requires_arc     <span class="operator">=</span> <span class="literal">true</span> # 是否启用<span class="type">ARC</span></span><br><span class="line">  s.source_files <span class="operator">=</span> &#x27;<span class="type">SYCoreKit</span><span class="operator">/</span><span class="type">Classes</span><span class="comment">/**/</span><span class="operator">*</span>&#x27; #需要包含的源文件</span><br><span class="line">  </span><br><span class="line">  # s.resource_bundles <span class="operator">=</span> &#123;</span><br><span class="line">  #   &#x27;<span class="type">SYCoreKit</span>&#x27; <span class="operator">=&gt;</span> [&#x27;<span class="type">SYCoreKit</span><span class="operator">/</span><span class="type">Assets</span><span class="comment">/*.png&#x27;]</span></span><br><span class="line"><span class="comment">  # &#125; 资源文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  # s.public_header_files = &#x27;Pod/Classes<span class="comment">/**/</span>*.h&#x27; #标记公共头文件列表</span></span><br><span class="line"><span class="comment">  s.ios.frameworks = &quot;UIKit&quot;, &quot;Foundation&quot; #支持的系统框架</span></span><br><span class="line"><span class="comment">  s.dependency &#x27;YYModel&#x27;, &#x27;1.0.4&#x27;#三方依赖</span></span><br><span class="line"><span class="comment">end</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>使用 Example 测试私有库是否可用</li>
</ol>
<p><code>Example</code>是创建<code>Pods</code>工程时生成的一个工程，用于验证添加的库文件是否能正常使用。<code>Example</code>目录下<code>Podfile</code>文件中自动设置了<code>pod_test</code>依赖，如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">target &#x27;pod_test_Example&#x27; <span class="keyword">do</span></span><br><span class="line">pod &#x27;pod_test&#x27;, :path <span class="operator">=&gt;</span> &#x27;<span class="operator">../</span>&#x27;    #自动添加了</span><br></pre></td></tr></table></figure>

<p><code>cd Example</code>文件夹下，终端执行<code>pod install</code>或<code>pod update</code>，安装<code>pod_test</code>依赖就可以查看在项目中应用了</p>
<ol start="7">
<li>检验 <code>.podspec</code>文件并推送到远端，提交pods库到github上。打标签，推送到远程。</li>
</ol>
<p><strong>重点：tag 打的版本号必须和 podspec 中的 s.version 值相同：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># 检查 <span class="type">Pod</span> 的规范文件（`.podspec` 文件）是否符合规范和要求</span><br><span class="line">pod spec lint <span class="type">PodName</span>.podspec</span><br><span class="line"># 符合规范要求就可以提交pod</span><br><span class="line">pod repo push 索引库 podName.podspec<span class="operator">--</span>verbose<span class="operator">--</span>use<span class="operator">-</span>libraries<span class="operator">--</span>allow<span class="operator">-</span>warning</span><br></pre></td></tr></table></figure>

<h2 id="公有库"><a href="#公有库" class="headerlink" title="公有库"></a>公有库</h2><p>公有库和私有库基本类似，唯一的区别就是公有库是开源的。</p>
<p>所以，生成私有库、公有库前面几步都是一样的，只有最后推送位置不同。一个是推送至个人的私有仓库、一个是推送至 <code>pod</code> 公共仓库。</p>
<p>创建公有库在执行完私有库流程后多了几步：</p>
<ol>
<li>检查是否已注册 CocoaPods 账户:</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>注册 cocoaPods 账号，执行该命令后，对应邮箱会收到一份邮件，去邮件内进行验证:</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">pod trunk register 你的邮箱 &#x27;你的用户名&#x27; <span class="operator">--</span>description<span class="operator">=</span>&#x27;这里是描述&#x27; </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>推送至 pod 公共仓库</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">pod trunk push <span class="type">LXExtension</span>.podspec <span class="operator">--</span>allow<span class="operator">-</span>warnings</span><br></pre></td></tr></table></figure>

<h2 id="相关终端命令总结"><a href="#相关终端命令总结" class="headerlink" title="相关终端命令总结"></a>相关终端命令总结</h2><ul>
<li><p>生成pod私有库模板<br><code>pod lib create xxx</code> ： 创建私有组件库模板<br>添加对应的Classes、Assets</p>
</li>
<li><p>关联远程仓库<br><code>git add .</code> ： 添加git文件<br><code>git commit -m &#39;init&#39;</code> ：提交<br><code>git remote add origin https://github.com/your-username/your-repo.git </code>： 关联到远程仓库<br><code>git push origin master </code>：推送至远程仓库</p>
</li>
<li><p>创建tag<br><code>git tag 1.0.0</code> ： 增加1.0.0tag<br><code>git tag</code>：查看本地tag<br><code>git ls-remote</code> ：查看远程所有分支及tag<br><code>git push origin 1.0.4</code> ： 推送特定tag到远程仓库<br><code>git push origin --tags</code> ： 推送所有tags到远程仓库<br><code>git tag -d 1.0.0</code> ： 删除本地tag<br><code>git push origin :refs/tags/1.0.3</code> ：删除远程tag</p>
</li>
<li><p>本地库校验<br><code>pod lib lint</code> ： 本地组件库校验<br><code>pod lib lint AFXXXX.podspec --allow-warnings</code> ：本地组件库校验忽略警告<br><code>pod lib lint --sources=https://github.com/xxxx/xxxxspecs.git --use-libraries --allow-warnings</code> ：如果你的库同时依赖了私有库，可通过上面方式指定source索引<br><code>pod lib lint --sources=https://github.com/xxxx/xxxxspecs.git,https://github.com/CocoaPods/Specs.git --use-libraries --allow-warnings</code> ： 如果你的库同时依赖了私有库以及公有库，可通过指定多个source索引，中间用逗号分隔</p>
</li>
<li><p>远程库校验<br><code>pod spec lint </code> ：远程组件库校验<br><code>pod spec lint --allow-warnings</code> ： 远程组件库校验忽略警告</p>
</li>
<li><p>生成私有库<br><code>pod repo add LXPodSpec https://github.com/xxx/LXPodSpec.git</code> ： 添加私有索引库到本地repo中<br><code>pod repo push LXPodSpec LXMyTools.podspec --allow-warnings</code> ：推送到 CocoaPods 服务器上，其他开发者可通过CocoaPods 安装和使用这个 Pod，但是需要指定source为<a href="https://github.com/xxx/LXPodSpec.git">https://github.com/xxx/LXPodSpec.git</a><br><code>pod repo push LXPodSpec LXMyTools.podspec -skip-import-validation --allow-warnings</code> ：如果你的库同时依赖了私有库以及公有库，可通过上面方式跳过验证，谨慎使用</p>
</li>
<li><p>生成公有库<br><code>pod trunk me</code> ：检查是否已注册 CocoaPods 账户<br><code>pod trunk push LXExtension.podspec --allow-warnings</code> ：推送至pod公共仓库</p>
</li>
<li><p>一些其他命令<br><code>pod spec cat SnapKit</code> ： 查看SnapKit 的 podspec 文件的内容。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS进阶】07 | 设计规范：如何统一设计规范，提高沟通效率？</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="如何统一设计规范，提高沟通效率？"><a href="#如何统一设计规范，提高沟通效率？" class="headerlink" title="如何统一设计规范，提高沟通效率？"></a>如何统一设计规范，提高沟通效率？</h1><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370948031886.jpg"></p>
<span id="more"></span>

<p>作为 iOS 工程师，我们开发的绝大部分功能都是与 <em>用户界面</em> 和 <em>用户交互</em> 有关。所以，和设计师协调沟通也成了我们的日常工作之一。在这个过程中，就免不了和他们争论有关 <strong>间距大小、字体粗细、字号大小、颜色深浅</strong> 等问题。想必有时候你也很烦恼，怎么和这些设计师们沟通就那么麻烦呢！</p>
<p>其实，这些问题都可以用一套统一的 <em>设计规范</em> 来解决，从而有效降低沟通成本。有了规范，设计师可以根据明确的指引和预定义好的设计元素，来设计出新的界面；而开发者也能使用预先封装好的、可重用的设计组件实现快速开发。最后，开发的产品为用户提供一致的体验。</p>
<p>那一套统一的设计规范到底是怎样的呢？它通常包括 <strong>间距、字体、颜色、图标和常用组件</strong> 等，这一讲，我们就一起看看怎样定义这些设计规范吧。</p>
<h2 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h2><p><strong>间距（Spacing）</strong>，是父子组件之间、以及平级组件之间的留白，合理使用间距能有效分离和组织内容，也能保证页面风格一致，提升用户体验。</p>
<p>但是，在实际工作当中，你有没有遇到过打开设计师给的设计稿后发现，同一个界面里的间距定义杂乱无章，不同页面类似组件的间距也大不相同，这样导致的结果是，开发出的 App 在视觉上会给人风格混乱的感觉。</p>
<p>那怎样定义统一的间距呢？其实很简单，我们只保留几个可用的间距，并给它们赋予定义，下面是我们 Moments App 的间距定义。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370949005151.jpg"></p>
<p>根据我们的经验，在选择间距的值时，为了具有和谐感，我们把间距分成三组：<strong>小（Small）、中（Medium）、大（Large）</strong>。两个 <em>小间距</em> 之间的差别是 <code>4pt</code>， <em>中间距</em> 与 <em>小间距</em> 相差 <code>6pt</code>，而 <em>大间距</em> 直接相差 <code>8pt</code>，给用户一种循序渐进的感觉。这些间距的定义能覆盖 App 所有的使用需求了。</p>
<p>有了统一的间距定义，设计师就可以在设计稿里面标注间距的定义，而不是具体的值。开发者也可以通过代码中原先定义好的间距，而无须每次都 <em>硬编码（Hardcode）</em> 间距的值。</p>
<p>除了 iOS 以外，统一的间距还可以用到 Android 和 Web 上，如下面是开源设计规范 Backpack 所定义的间距，其包含了 <code>iOS</code>、 <code>Android</code> 和 <code>Web</code> 三个平台。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370949194793.jpg"></p>
<p>有了这些间距的定义以后，设计师只需设计一份设计稿，不同平台的开发者都可以使用同一份设计稿进行开发。</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>任何一款 App，都离不开文字，除了其本身传达信息，文字的各种样式，包括 <strong>字体类型、大小、粗细</strong> ，在其中也承担着重要角色。比如合理使用行楷会给人美感；字体放大可以暗示优先阅读；字体加粗，会起到强调的作用，吸引用户关注等等。</p>
<p>在开发当中， <em>字体类型、字号大小、字体粗细</em> 分别由 <code>Font family</code>、<code>Font size</code>、<code>Font weight</code> 属性定义。除非有特殊的原因（如品牌需要，或者为了增强游戏体验），iOS 的 App 一般都使用 iOS 系统所自带的字体系列。这样更能符合用户的阅读习惯。在自带的字体系列的基础上，通过把字号大小和字体粗细组合起来定义一些字体类型。下面是我们 Moments App 所定义的字体规范。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370949335106.jpg"></p>
<p>根据字体类型的时候，我们分成四组：</p>
<ul>
<li><p><strong>大标题（Display）</strong>，用于显示这个页面的唯一标题，使用特大字号（如 <code>42pt</code> 和 <code>36pt</code>）；</p>
</li>
<li><p><strong>标题（Titile）</strong>，用于显示段落的标题，我们提供了五种不同的段落标题，其字号由大变小；</p>
</li>
<li><p><strong>文本（Body）</strong>，用于显示一般的内容文本，我们提供了普通和加粗两种类型来呈现不同的文本；</p>
</li>
<li><p><strong>小文本（Small text）</strong>，使用较小的字体来显示辅佐内容，例如 <em>备注、版本信息</em> 等。</p>
</li>
</ul>
<p>为了让读者有更好的阅读体验，我们在字体粗细上都统一选择了偏细的字重，比如使用 <code>semibold</code> 而不是 <code>bold</code> ，并且选择 <code>light</code> 而不是 <code>regular</code> 来定义这套字体。</p>
<p>有了这些字体类型的定义，设计师可以很方便地选择字体，比如在设计文章内容部分时，可以从 <code>body</code> 或者 <code>bodyBold</code> 中选择出来，而不需要思考到底是使用 <code>14pt</code>、<code>15pt</code> 还是 <code>16pt</code>。同时，开发者也可以使用原先定义好的字体组件，提升效率。</p>
<p>除此之外，还有 <strong>动态字体</strong>，因为我们在此之前已经对字体的类型、大小、粗细做了定义，设计师只需要做一个设计稿就行了，无须为不同的字体设计出不同的版本，而我们开发者只需要通过封装好的字体组件来支持即可。<strong>具体如何封装字体组件，我会在第 12 讲详细介绍。</strong></p>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>在一款 App 的视觉体验中，颜色毫无疑问在其中占据很重要的位置。如果颜色搭配不当，很容易被用户吐槽甚至弃用。所以设计之初，就要对颜色做好规范。</p>
<p>为了给用户提供颜色一致的体验，在 App 设计中，我们一般采用统一的 <em>调色板（Color palette）</em> 来完成。在实际工作当中，你可以和设计师一起在各类开源设计网站中寻找，比如，以天蓝为主色调的  <em>Backpack</em> ，还有谷歌的 <em>Material Design</em> 还提供了调色板生成工具，你可以根据自己品牌的颜色来生成一个调色板。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370949510710.jpg" alt="来源：backpack.github.io"></p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370949927338.jpg" alt="来源：2014 Material Design color palettes"></p>
<p>有了调色板，我们就可以在设计常用组件时（如按钮，卡片，警告信息等）使用调色板里面的颜色。例如  <em>Backpack</em>  的主色是天蓝色，在设计按钮时，主按钮的背景可以使用天蓝色（#0770e3）。</p>
<p>为了照顾不同用户的使用习惯，提高夜间视觉体验，iOS 系统在原有的浅色模式之外，还提供了深色模式。我们在设计调色板的时候，也最好考虑到对深色模式的支持。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370950144474.jpg" alt="来源：backpack.github.io"></p>
<p>在  Moments App 项目中，我们采用 Backpack 的调色板来设计深色模式下的颜色。该调色板定义了一组语义化的颜色（<code>Semantic color</code>）供我们选择。比如设计师在选择背景颜色的时候可以根据需要从 <em>背景主色、背景副色、背景</em> 第三色中任选一个，Backpack 每种颜色都提供了 <strong>浅色模式</strong> 和 <strong>深色模式</strong> 两种类型，设计师在设计过程中就不需要为这两种模式制作不同的设计稿了，开发者也可以使用定义好的颜色组件来同时支持两种模式，不需任何额外的工作。</p>
<p>需要注意的是，在定义语义化颜色时要特别注意颜色之间的对比度，例如使用了 <code>Text Primary Color</code> 的文本在使用 <code>Background Color</code> 的背景下能容易阅读，而使用灰色的背景再使用黑色的文本会难以阅读。</p>
<p>如果你所在团队没有专门的设计师来定义这些颜色，也可以使用 iOS 提供的 <strong>动态系统颜色（Dynamic System Colors）</strong>，它为我们定义了同时支持 <strong>浅色模式</strong> 和 <strong>深色模式</strong> 的各种颜色。</p>
<h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><p><strong>图标（Iconography）</strong>，在 App 设计中也承担重要的作用，它可以有效地把功能呈现给用户，例如一个 <em>加号（+）</em> 的图标能让用户知道点击的时候可以进行新增操作。图标也能简化界面的设计，让页面更加吸引用户，<em>例如在买房的 App 里面我们可以使用一辆车的图标表示多少个车位，一个浴缸的图标表示多少个洗手间</em>，这样能省去大量的文件描述。图标还能帮助用户导航。因此我们在设计 App 的时候也需要合理地使用图标。</p>
<p>如果你们公司没有专门的图标设计师，那么你可能会购买或者使用一些开源的图标。这里我有一些建议。</p>
<p>首先，<strong>同一个 App 只需要一种图标，千万不要把不同风格的图标混合使用</strong>。</p>
<p>其次，如果没有特殊要求，我推荐直接使用苹果公司提供的。具体来说，在 iOS 系统内置的 <code>SF Symbols</code>  为我们提供了 <code>3150</code> 个一致的、可定制的图标，如下面的例子。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370950414375.jpg"></p>
<p><code>SF Symbols</code> 有很多优点：</p>
<ol>
<li><p>它数量巨大，几乎覆盖所有应用场景；</p>
</li>
<li><p>整合了 <code>San Francisco</code> 字体系统，当用户改变字体大小的时候，这些图标都会自动对齐；</p>
</li>
<li><p>所有图标都支持颜色，我们可以根据需求搭配不同的颜色；</p>
</li>
<li><p>使用这些图标时也无须安装，可以减少 App 的体积。</p>
</li>
</ol>
<p>我们的 Moments App 也使用到 <code>SF Symbols</code> 来呈现点赞按钮。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370950563563.jpg"></p>
<p><code>SF Symbols</code> 里绝大部分的图标都通过了轮廓和填充两个版本，我们可以使用填充的图标表示选中状态。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370950719288.jpg"></p>
<h2 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h2><p>随着 App 功能的增多，你会发现一些 UI 会出现在许多地方，例如下图的用户头像，分别出现在个人主页、朋友圈、点赞处。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370950907203.jpg"></p>
<p>在这种情况下，我们就可以把这个重复出现的 UI 封装成一个常用的设计组件，并纳入我们在制定设计规范中。常用的组件一般有 <em>按钮（Button）</em>、<em>用户头像（User avatar）</em>、<em>复选框（Checkbox）</em>、<em>徽章（Badge）</em> 等等。下面是 Moments App 设计规定中用户头像组件的定义。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370951068571.jpg"></p>
<p>有了用户头像组件，设计师在设计过程中就不需要考虑在呈现头像时需要怎样设计，使用的圆角到底要多少度，是否需要阴影和边框等等。开发者也可以使用原先封装好的组件来加快开发。</p>
<p>需要注意的是，UI 组件是在开发过程中发现某个 UI 反复使用后才封装的，在开始的时候不要贪多，避免定义一堆不用的组件。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这一讲，我们通过 <strong>间距，字体，颜色，图标和常用组件</strong> 为例子来讲述一套统一的设计规范。有了它，能极大降低设计师与开发者的沟通成本，也节省设计师和开发者在设计或实现过程的时间，一举多得。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07%EF%BD%9C%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%EF%BC%8C%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%EF%BC%9F/17370951352722.jpg"></p>
<p>在定义和管理设计规范过程中需要注意这几点：</p>
<ul>
<li><p>在定义规范过程中，设计师和开发者要一起参与进来，达成共识方便后期彼此间的沟通与协作；</p>
</li>
<li><p>在更新规范时，要有设计审查流程保证主设计版本一直在受控状态，我建议使用上节课所说的 GitHub Pull Request 流程来管理这套规范；</p>
</li>
<li><p>每次更新的时候，都需要更新设计文档，就像 Backpack 的文档一样，当设计师或者开发者有疑问的时候都可以把这个文档作为唯一信息源来查看；</p>
</li>
<li><p><strong>坚持少即是多的原则</strong>，特别是在定义规范开始的时候，不要求多求全，可以根据业务需要不断地迭代完善。</p>
</li>
</ul>
<h1 id="相关资料："><a href="#相关资料：" class="headerlink" title="相关资料："></a>相关资料：</h1><blockquote>
<p><a href="https://developer.apple.com/sf-symbols/">SF Symbols 官方下载链接</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS进阶】03 | 配置准备：如何搭建多环境支持，为 App 开发作准备</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h1 id="一、配置准备：如何搭建多环境支持，为-App-开发作准备"><a href="#一、配置准备：如何搭建多环境支持，为-App-开发作准备" class="headerlink" title="一、配置准备：如何搭建多环境支持，为 App 开发作准备"></a>一、配置准备：如何搭建多环境支持，为 App 开发作准备</h1><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788668316765.jpg"></p>
<span id="more"></span>

<p>在开始之前，我先问你几个问题，在测试的时候，App 一般需要连接测试服务器，那么在上架后，还需要连生产服务器吗？在发布前，你的 App 需要通过 <code>Ad-hoc </code>分发给内部测试组吗？在发布到 <code>App Store</code> 的时候，你的 App 需要同时支持免费版和收费版吗？</p>
<p>如果你的回答是<code>“是”</code>，那么你的 App 就需要搭建多环境支持，优化开发的工作流程。多环境提供很多好处，比如能基于同一套源代码自动构建出有差异功能的 App；能支持多个团队并行开发，也能分离测试和生产环境，提高产品的迭代速度，保证上架的 App 通过严格测试和功能验证。</p>
<p>在 Moments App 项目中，我们就使用了三个不同的环境，分别是<code>开发环境</code>，<code>测试环境</code>和<code>生产环境</code>。它们到底有什么区别呢？</p>
<ul>
<li><p><strong>开发环境</strong>， 用于日常的开发，一般有未完成的功能模块。编译时，也不进行任何优化，可以打印更多的日志，帮助开发者快速定位问题。</p>
</li>
<li><p><strong>测试环境</strong>， 主要是用于测试，以及为产品经理进行功能验证，包括部分完成的功能模块，也提供一些隐藏功能，方便我们进行开发和迭代，例如快速切换用户，清理 Cache，连接到不同后台服务器等等。</p>
</li>
<li><p><strong>生产环境</strong>， 只包含通过了测试并验证过的功能模块，它是最终提交到 App Store 供终端用户使用的版本。</p>
</li>
</ul>
<p>多环境支持需要用到 Xcode 的构建配置，这一讲，我就结合 Moments App 项目来聊聊这个问题。</p>
<h2 id="Xcode-构建基础概念"><a href="#Xcode-构建基础概念" class="headerlink" title="Xcode 构建基础概念"></a>Xcode 构建基础概念</h2><p>一般在构建一个 iOS App 的时候，需要用到 <code>Xcode Project</code>，<code>Xcode Target</code>，<code>Build Settings</code>，<code>Build Configuration</code> 和 <code>Xcode Scheme</code> 等构建配置。它们各有什么用呢？</p>
<h3 id="Xcode-Project"><a href="#Xcode-Project" class="headerlink" title="Xcode Project"></a>Xcode Project</h3><p><code>Xcode Project</code>用于组织源代码文件和资源文件。一个 Project 可以包含多个 Target，例如当我们新建一个 Xcode Project 的时候，它会自动生成 App 的主 Target，Unit Test Target 和 UI Test Target。</p>
<p>在 Moments App 项目中，主 Target 就是 Moments，Unit Test Target 是 MomentsTests， UI Test Target 就是 MomentsUITests。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788669693800.jpg"></p>
<h3 id="Xcode-Target"><a href="#Xcode-Target" class="headerlink" title="Xcode Target"></a>Xcode Target</h3><p><code>Xcode Target</code>用来定义如何构建出一个产品（例如 <code>App</code>， <code>Extension</code> 或者 <code>Framework</code>），Target 可以指定需要编译的源代码文件和需要打包的资源文件，以及构建过程中的步骤。</p>
<p>例如在我们的 Moments App 项目中，负责单元测试的MomentsTestsTarget 就指定了 14 个测试文件需要构建（见下图的 Compile Sources），并且该 Target 依赖了主 App TargetMoments（见下图的 Dependencies）。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788669841278.jpg"></p>
<p>有了 Target 的定义，构建系统就可以读取相关的源代码文件进行编译，然后把相关的资源文件进行打包，并严格按照 Target 所指定的设置和步骤执行。那么 Target 所指定的设置哪里来的呢？来自 Build Settings。</p>
<h3 id="Build-Settings"><a href="#Build-Settings" class="headerlink" title="Build Settings"></a>Build Settings</h3><p><code>Build Setting</code>保存了构建过程中需要用到的信息，它以一个变量的形式而存在，例如所支持的设备平台，或者支持操作系统的最低版本等。</p>
<p>通常，一条 Build Setting 信息由两部分组成：名字和值。比如下面是一条 Setting 信息，<code>iOS Development Target</code>是名字，而<code>iOS 14.0</code>是值。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788670287057.jpg"></p>
<p>有了这些基础知识以后，接下来我就结合 Moments App 来和你介绍下如何进行多环境配置，从而生成不同环境版本的 App。</p>
<h2 id="Moments-App-构建配置"><a href="#Moments-App-构建配置" class="headerlink" title="Moments App 构建配置"></a>Moments App 构建配置</h2><p>一般用 Xcode 编译出不同环境版本的 App 有多种办法，例如拷贝复制所有源代码，建立多个 Target 来包含不同的源码文件等等。不过，在这里我推荐使用 <code>Build Configuration</code> 和 <code>Xcode Scheme</code> 来管理多环境，进而构建出不同环境版本的 App。为什么？因为这两个是目前管理成本最低的办法。接下来我一一介绍下。</p>
<h3 id="Build-Configuration"><a href="#Build-Configuration" class="headerlink" title="Build Configuration"></a>Build Configuration</h3><p>当我们在 Xcode 上新建一个项目的时候，Xcode 会自动生成两个 Configuration：<code>Debug</code>和<code>Release</code>。Debug 用于日常的本地开发，Release 用于构建和分发 App。而在我们的 Moments App 项目中，有三个 configuration：<code>Debug</code>，<code>Internal</code> 和 <code>AppStore</code>。它们分别用于构建<code>开发环境</code>、<code>测试环境</code>和<code>生产环境</code>。 其中 Internal 和 AppStore 是从自动生成的 Release 拷贝而来的。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788670470474.jpg"></p>
<p>那什么是 Build Configuration 呢？</p>
<p><code>Build Configuration</code>就是一组 Build Setting。 我们可以通过 Build Configuration 来分组和管理不同组合的 Build Setting 集合，然后传递给 Xcode 构建系统进行编译。</p>
<p>有了 Build Configuration 以后，我们就能为同一个 Build Setting 设置不同的值。例如<code>Build Active Architecture Only</code>在 Debug configuration 是<code>Yes</code>，而在 Internal 和 AppStore configuration 则是<code>No</code>。这样就能做到同一份源代码通过使用不同的 Build Configuration 来构建出功能不一样的 App 了。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788670611837.jpg"></p>
<p>那么，在构建过程中怎样才能选择不同的 Build Configuration 呢？答案是使用 Xcode Scheme。</p>
<h3 id="Xcode-Scheme"><a href="#Xcode-Scheme" class="headerlink" title="Xcode Scheme"></a>Xcode Scheme</h3><p><code>Xcode Scheme</code>用于定义一个完整的构建过程，其包括指定哪些 Target 需要进行构建，构建过程中使用了哪个 Build Configuration ，以及需要执行哪些测试案例等等。在项目新建的时候只有一个 Scheme，但可以为同一个项目建立多个 Scheme。不过这么多 Scheme 中，同一时刻只能有一个 Scheme 生效。</p>
<p>我们一起看一下 Moments App 项目的 Scheme 吧。 Moments App 项目有三个 Scheme 来分别代表三个环境，<code>Moments Scheme</code> 用于开发环境，<code>Moments-Internal Scheme</code> 用于测试环境，而 <code>Moments-AppStore Scheme</code> 用于生产环境。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788670751535.jpg"></p>
<p>下面是<code>MomentsScheme</code> 的配置。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788670865410.jpg"></p>
<p>左边是该 Scheme 的各个操作，如当前选择了 Build 操作；右边是对应该操作的配置，比如 Build 对应的 Scheme 可以构建三个不同的 Targets。不同的 Scheme 所构建的 Target 数量可以不一样，例如下面是<code>Moments-InternalScheme</code> 的配置。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788670987138.jpg"></p>
<p>该 Scheme 只构建主 App TargetMoments，而不能构建其他两个测试 Target。</p>
<p>当我们选择 Run、Test、Profile、 Analyze 和 Archive 等操作时，在右栏有一个很关键的配置<br>叫作 Build Configuration，我们可以通过下拉框来选择 Moments App 项目里面三个 Configuration （Debug，Internal 和 AppStore） 中的其中一个。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788671106806.jpg"></p>
<p>为了方便管理，我们通常的做法是，一个 <code>Scheme</code> 对应一个 <code>Configuration</code>。有了这三个 Scheme 以后，我们就可以很方便地构建出 <code>Moments α（开发环境）</code>，<code>Moments β（测试环境</code>）和 <code>Moments（生产环境）</code>三个功能差异的 App。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788671219745.jpg"></p>
<p>你可能已经注意到这三个 App 的名字都不一样，怎么做到的呢？实际上是我们为不同的 Configuration 设置了不一样的 Build Setting。其中决定 App 名字的 Build Setting 叫作<code>PRODUCT_BUNDLE_NAME</code>，然后在 <code>Info.plist</code> 文件里面为 <code>Bundle name</code> 赋值，就能构建出名字不一样的 App。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788671327468.jpg"></p>
<p>为了构建出不同环境版本的 App，我们需要经常为各个 Build Configuration 下的 Build Setting 设置不一样的值。 在这其中，使用好 xcconfig 配置文件就显得非常重要。</p>
<h2 id="xcconfig-配置文件"><a href="#xcconfig-配置文件" class="headerlink" title="xcconfig 配置文件"></a>xcconfig 配置文件</h2><p>xcconfig 会起到什么作用呢？</p>
<p>一般修改 Build Setting 的办法是在 Xcode 的 Build Settings 界面上进行。 例如下面的例子中修改 Suppress Warnings。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788671456874.jpg"></p>
<p>这样做有一些不好的地方，首先是手工修改很容易出错，例如有时候很难看出来修改的 Setting 到底是 Project 级别的还是 Target 级别的。其次，最关键的是每次修改完毕以后都会修改了 xcodeproj 项目文档 （如下图所示），导致 Git 历史很难查看和对比。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788671580857.jpg"></p>
<p>幸运的是，Xcode 为我们提供了一个统一管理这些 Build Setting 的便利方法，那就是使用 xcconfig 配置文件来管理。</p>
<h3 id="xcconfig-概念及其作用"><a href="#xcconfig-概念及其作用" class="headerlink" title="xcconfig 概念及其作用"></a>xcconfig 概念及其作用</h3><p><code>xcconfig</code>也叫作 <code>Build configuration file（构建配置文件）</code>，我们可以使用它来为 Project 或 Target 定义一组 Build Setting。由于它是一个纯文本文件，我们可以使用 Xcode 以外的其他文本编辑器来修改，而且可以保存到 Git 进行统一管理。 这样远比我们在 Xcode 的 Build Settings 界面上手工修改要方便很多，而且还不容易出错。</p>
<p>在 xcconfig 文件里面的每一条 Setting 都是下面的格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">BUILD_SETTING_NAME</span> = value</span><br></pre></td></tr></table></figure>

<p>其中，<code>BUILD_SETTING_NAME</code>表示 Build Setting 的名字，而value是该 Setting 的值。下面是一个例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">SWIFT_VERSION</span> = <span class="number">5.0</span></span><br></pre></td></tr></table></figure>

<p><code>SWIFT_VERSION</code>是用于定义 Swift 语言版本的 Build Setting，其值是<code>5.0</code>。Setting 的名字都是由大写字母，数值和下划线组成。这种命名法我们一般称为<code>蛇型命名法</code>，例如<code>SNAKE_CASE_NAME</code>。</p>
<p>当我们使用 xcconfig 时，Xcode 构建系统会按照下面的优先级来计算出 Build Setting 的最后生效值：</p>
<ol>
<li><p><strong>Platform Defaults</strong> (平台默认值)</p>
</li>
<li><p><strong>Xcode Project xcconfig File</strong>（Project 级别的 xcconfig 文件）</p>
</li>
<li><p><strong>Xcode Project File Build Settings</strong>（Project 级别的手工配置的 Build Setting）</p>
</li>
<li><p><strong>Target xcconfig File</strong> （Target 级别的 xcconfig 文件）</p>
</li>
<li><p><strong>Target Build Settings</strong>（Target 级别的手工配置的 Build Setting）</p>
</li>
</ol>
<p>Xcode 构建系统会按照上述列表从上而下读取 Build Setting，如果发现同样的 Setting ，就会把下面的 Setting 覆盖掉上面的，越往下优先级别越高。</p>
<p>例如我们在 Project 级别的 xcconfig 文件配置了<code>SWIFT_VERSION = 5.0</code>而在Target 级别的 xcconfig 文件配置了<code>SWIFT_VERSION = 5.1</code>，那么Target 级别的 Build Setting 会覆盖 Project 级别的<code>SWIFT_VERSION</code>设置，最终<code>SWIFT_VERSION</code>生效的值是<code>5.1</code>。</p>
<p>那么，要怎样做才能做到不覆盖原有的 Build Setting 呢？我们可以使用下面例子中的<code>$(inherited)</code>来实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">BUILD_SETTING_NAME</span> = $(inherited) additional value</span><br></pre></td></tr></table></figure>

<p>可以保留原先的 Setting，然后把新的值添加到后面去。比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">FRAMEWORK_SEARCH_PATHS</span> = $(inherited) ./<span class="title class_">Moments</span>/<span class="title class_">Pods</span></span><br></pre></td></tr></table></figure>

<p>其中的<code>FRAMEWORK_SEARCH_PATHS</code>会保留原有的值，然后加上<code>./Moments/Pods</code>作为新值。<br>在配置 Build Setting 时，还可以引用其他已定义的 Build Setting。</p>
<p>例如下面的例子中，<code>FRAMEWORK_SEARCH_PATHS</code>使用了另外一个 Build Setting <code>PROJECT_DIR</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">FRAMEWORK_SEARCH_PATHS</span> = $(inherited) $(<span class="variable constant_">PROJECT_DIR</span>)</span><br></pre></td></tr></table></figure>

<p>为了重用，我们可以通过<code>#include</code>引入其他 xcconfig 文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#include <span class="string">&quot;path/to/OtherFile.xcconfig&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Moments-App-xcconfig-配置文件"><a href="#Moments-App-xcconfig-配置文件" class="headerlink" title="Moments App xcconfig 配置文件"></a>Moments App xcconfig 配置文件</h3><p>下面我们一起来看看 Moments App 项目是怎样管理 xcconfig 配置文件吧。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788671799157.jpg"></p>
<p>我们把所有 xcconfig 文件分成三大类：<code>Shared</code>、 <code>Project</code> 和 <code>Targets</code>。</p>
<p>其中 Shared 文件夹用于保存分享到整个 App 的 Build Setting，例如 Swift 的版本号、App 所支持的 iOS 版本号等各种共享的基础信息。 下面是 <code>SDKAndDeviceSupport.xcconfig</code> 文件里面所包含的信息：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">TARGETED_DEVICE_FAMILY</span> = <span class="number">1</span></span><br><span class="line"><span class="variable constant_">IPHONEOS_DEPLOYMENT_TARGET</span> = <span class="number">14.0</span></span><br></pre></td></tr></table></figure>

<p><code>TARGETED_DEVICE_FAMILY</code>表示支持的设备，<code>1</code>表示 <code>iPhone</code>。<br>而<code>IPHONEOS_DEPLOYMENT_TARGET</code>表示支持 iOS 的最低版本，我们的 Moments App 所支持的最低版本是 <code>iOS 14.0</code>。</p>
<p>Project 文件夹用于保存 Xcode Project 级别的 Build Setting，其中 BaseProject.xcconfig 会引入 Shared 文件夹下所有的 xcconfig 配置文件，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#include <span class="string">&quot;CompilerAndLanguage.xcconfig&quot;</span></span><br><span class="line">#include <span class="string">&quot;SDKAndDeviceSupport.xcconfig&quot;</span></span><br><span class="line">#include <span class="string">&quot;BaseConfigurations.xcconfig&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后我们会根据三个不同的环境分别建了三个xcconfig 配置文件，如下：</p>
<ul>
<li>DebugProject.xcconfig 文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#include <span class="string">&quot;BaseProject.xcconfig&quot;</span></span><br><span class="line"><span class="variable constant_">SWIFT_ACTIVE_COMPILATION_CONDITIONS</span> = $(inherited) <span class="variable constant_">DEBUG</span></span><br></pre></td></tr></table></figure>

<ul>
<li>InternalProject.xcconfig 文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#include <span class="string">&quot;BaseProject.xcconfig&quot;</span></span><br><span class="line"><span class="variable constant_">SWIFT_ACTIVE_COMPILATION_CONDITIONS</span> = $(inherited) <span class="variable constant_">INTERNAL</span></span><br></pre></td></tr></table></figure>

<ul>
<li>AppStoreProject.xcconfig 文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#include <span class="string">&quot;BaseProject.xcconfig&quot;</span></span><br><span class="line"><span class="variable constant_">SWIFT_ACTIVE_COMPILATION_CONDITIONS</span> = $(inherited) <span class="variable constant_">PRODUCTION</span></span><br></pre></td></tr></table></figure>

<p>它们的共同点是都引入了用于共享的 BaseProject.xcconfig 文件，然后分别定义了 Swift 编译条件配置<code>SWIFT_ACTIVE_COMPILATION_CONDITIONS</code>。其中<code>$(inherited)</code>表示继承原有的配置，<code>$(inherited)</code>后面的<code>DEBUG</code>或者<code>INTERNAL</code>表示在原有配置的基础上后面添加了一个新条件。有了这些编译条件，我们就可以在代码中这样使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> <span class="variable constant_">DEBUG</span></span><br><span class="line">    <span class="title function_">print</span>(<span class="string">&quot;Debug Environment&quot;</span>)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>

<p>该段代码只在开发环境执行，因为只有开发环境的<code>SWIFT_ACTIVE_COMPILATION_CONDITIONS</code>才有<code>DEBUG</code>的定义。这样做能有效分离各个环境，保证同一份代码构建出对应不同环境的 App。</p>
<p>Targets 文件夹用于保存 Xcode Target 级别的 Build Setting，也是由一个 BaseTarget.xcconfig 文件来共享所有 Target 都需要使用的信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">PRODUCT_BUNDLE_NAME</span> = <span class="title class_">Moments</span></span><br></pre></td></tr></table></figure>

<p>这里的<code>PRODUCT_BUNDLE_NAME</code>是 App 的名字。<br>下面是三个不同环境的 Target xcconfig 文件。</p>
<ul>
<li>DebugTarget.xcconfig</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#include <span class="string">&quot;../Pods/Target Support Files/Pods-Moments/Pods-Moments.debug.xcconfig&quot;</span></span><br><span class="line">#include <span class="string">&quot;BaseTarget.xcconfig&quot;</span></span><br><span class="line"><span class="variable constant_">PRODUCT_BUNDLE_NAME</span> = $(inherited) α</span><br><span class="line"><span class="variable constant_">PRODUCT_BUNDLE_IDENTIFIER</span> = com.<span class="property">ibanimatable</span>.<span class="property">moments</span>.<span class="property">development</span></span><br></pre></td></tr></table></figure>

<ul>
<li>InternalTarget.xcconfig</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#include <span class="string">&quot;../Pods/Target Support Files/Pods-Moments/Pods-Moments.internal.xcconfig&quot;</span></span><br><span class="line">#include <span class="string">&quot;BaseTarget.xcconfig&quot;</span></span><br><span class="line"><span class="variable constant_">PRODUCT_BUNDLE_NAME</span> = $(inherited) β</span><br><span class="line"><span class="variable constant_">PRODUCT_BUNDLE_IDENTIFIER</span> = com.<span class="property">ibanimatable</span>.<span class="property">moments</span>.<span class="property">internal</span></span><br></pre></td></tr></table></figure>

<ul>
<li>AppStoreTarget.xcconfig</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#include <span class="string">&quot;../Pods/Target Support Files/Pods-Moments/Pods-Moments.appstore.xcconfig&quot;</span></span><br><span class="line">#include <span class="string">&quot;BaseTarget.xcconfig&quot;</span></span><br><span class="line"><span class="variable constant_">PRODUCT_BUNDLE_NAME</span> = $(inherited)</span><br><span class="line"><span class="variable constant_">PRODUCT_BUNDLE_IDENTIFIER</span> = com.<span class="property">ibanimatable</span>.<span class="property">moments</span></span><br></pre></td></tr></table></figure>

<p>它们都需要引入 CocoaPods 所生成的 xcconfig 和共享的 BaseTarget.xcconfig 文件，然后根据需要改写 App 的名字。例如DebugTarget 覆盖了<code>PRODUCT_BUNDLE_NAME</code>的值为<code>Moments α*</code>, 其所构建的 App 叫作<code>Moments α</code>。</p>
<p>一般在 App Store 上所有 App 的标识符都必须是唯一的。如果你的项目通过 Configuration 和 Scheme 来生成免费版和收费版的 App，那么，你必须在两个 Configuration 中分别为<code>PRODUCT_BUNDLE_IDENTIFIER</code>配置对应的标识符，例如<code>com.lagou.free</code>和<code>com.lagou.paid</code>。</p>
<p>在 Moments App 中，我们也为各个环境下的 App 使用了不同的标识符，以方便我们通过 CI 自动构建，并分发到内部测试组或者 App Store。同时，这也能为各个环境版本的 App 分离用户行为数据，方便统计分析。</p>
<p>一旦有了这些 xcconfig 配置文件，今后我们就可以在 Xcode 的 Project Info 页面里的 Configurations 上引用它们。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788672041808.jpg"></p>
<p>下面是所有 Configurations 所引用的 xcconfig 文件。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788672157238.jpg"></p>
<p>在配置好所有 xcconfig 文件的引用以后，可以在 Build Settings 页面查看某个 Build Setting 的生效值。我们以<code>IPHONEOS_DEPLOYMENT_TARGET</code>为例，一起看看。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788672309236.jpg"></p>
<p>当我们选择<code>All</code>和<code>Levels</code>时，可以看到所有配置信息分成了不同的列。这些列分别代表前面的 Build Setting 优先级：</p>
<ol>
<li><p>平台默认值</p>
</li>
<li><p>Project 级别的 xcconfig 文件</p>
</li>
<li><p>Xcode 项目文件中的 Project 级别配置</p>
</li>
<li><p>Target 级别的 xcconfig 文件</p>
</li>
<li><p>Xcode 项目文件中的 Target 级别配置</p>
</li>
</ol>
<p><strong>Build Settng 的优先级是从左到右排序的。越是左边优先级就越高</strong>。例如，我们在 Project 级别的 xcconfig 文件里面定义了<code>IPHONEOS_DEPLOYMENT_TARGET</code>的值为14.0，那么Project 级别的 xcconfig 文件（Project Config File） 一列上就会显示iOS 14.0，它覆盖了系统的默认值 （iOS Default）iOS 14.2。这就是因为 Project 级别的 xcconfig 文件，它的优先级高于系统默认值，因此最后生效的值是iOS 14.0。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本讲我介绍了如何通过 Build Configuration、 Xcode Scheme 以及 xcconfig 配置文件来统一项目的构建配置，从而搭建出多个不同环境，为后期构建出对应环境的 App 做准备。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788672568915.jpg"></p>
<p>在使用 xcconfig 配置时，还是需要注意以下两点：</p>
<ul>
<li><p><strong>首先</strong>，我们必须把所有 Build Setting 都配置在 xcconfig 文件里面，并通过 Git 进行统一管理；</p>
</li>
<li><p><strong>其次</strong>，我们千万不要在 Xcode 的 Build Settings 页面修改任何 Setting，否则该配置会覆盖 xcconfig 文件里面的配置。如果你不小心修改了，可以通过点击删除键把页面是的配置删掉。</p>
</li>
</ul>
<h3 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h3><blockquote>
<p><a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Configurations">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Configurations</a></p>
</blockquote>
<h1 id="二、学习笔记与扩展"><a href="#二、学习笔记与扩展" class="headerlink" title="二、学习笔记与扩展"></a>二、学习笔记与扩展</h1><h2 id="Swift-多个-Target-的管理与配置"><a href="#Swift-多个-Target-的管理与配置" class="headerlink" title="Swift 多个 Target 的管理与配置"></a>Swift 多个 Target 的管理与配置</h2><h3 id="1、创建多个-Target"><a href="#1、创建多个-Target" class="headerlink" title="1、创建多个 Target"></a>1、创建多个 Target</h3><p>创建一个新的Swift工程，并 <code>Duplicate</code> 多个Target。</p>
<p>(1)、<code>Duplicate</code> 复制 Target：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788672796397.jpg"></p>
<p>(2)、可以生成了新的 target 和 info.plist 文件：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788672924486.jpg"></p>
<p>(3)、修改 target 名字：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788673034270.jpg"></p>
<p>此处：</p>
<ul>
<li><code>TargetsDemo</code> ：为正式环境 target</li>
<li><code>TargetsDemo-Debug</code> ：为开发环境 target</li>
<li><code>TargetsDemo-Internal</code> ：为测试环境 target</li>
</ul>
<p>(4)、配置 Schemes：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788673161851.jpg"></p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788673310718.jpg"></p>
<p>修改成功如下：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788673438173.jpg"></p>
<h3 id="2、配置工程相关信息"><a href="#2、配置工程相关信息" class="headerlink" title="2、配置工程相关信息"></a>2、配置工程相关信息</h3><p>我们现在已经有了三个Target，接下来我们为他们命名不同地 <code>Display Name</code> 、<code>Bundle Identifier</code>，并引入不同的 <code>Assets.xcassets</code>资源以生成和管理不同的app。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788673572335.jpg"></p>
<p>为不同的 app 引入不同的 <code>Assets.xcassets</code> 图片资源。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788673685116.jpg"></p>
<p>然后导入图片即可：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788673830388.jpg"></p>
<p>不同图片资源的使用可以自主选择：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788673961061.jpg"></p>
<h3 id="3、宏定义配置"><a href="#3、宏定义配置" class="headerlink" title="3、宏定义配置"></a>3、宏定义配置</h3><p>虽然是swift，我们还是叫它宏定义。接下来我们为不同的 target 设置不同的宏定义以区分它们，然后在代码中引用。</p>
<p>找到设置路径：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788674590270.jpg"></p>
<p>以下是 swift 情况下三种 “宏定义” 的配置方式：</p>
<ul>
<li>分开写，加引号，加 -D</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“-D”</span><br><span class="line">“APPSTORE”</span><br></pre></td></tr></table></figure>

<ul>
<li>分开写，不加引号，加 -D</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-D</span><br><span class="line">APPSTORE</span><br></pre></td></tr></table></figure>

<ul>
<li>写成一排，不加引号，加 -D</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-DAPPSTORE</span><br></pre></td></tr></table></figure>

<p>三种方式任选其一即可：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788674715539.jpg"></p>
<p>分别为 target 设置 “宏定义” 之后，我们就可以在代码中使用了：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03%EF%BD%9C%E9%85%8D%E7%BD%AE%E5%87%86%E5%A4%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81%EF%BC%8C%E4%B8%BAApp%E5%BC%80%E5%8F%91%E4%BD%9C%E5%87%86%E5%A4%87/16788674824238.jpg"></p>
<h3 id="4、Podfile-设置"><a href="#4、Podfile-设置" class="headerlink" title="4、Podfile 设置"></a>4、Podfile 设置</h3><p>如果不同的 target 需要引入不同三方库，可以在<code>podfile</code> 文件中进行设置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Uncomment</span> the next line to define a <span class="variable language_">global</span> platform <span class="keyword">for</span> your project</span><br><span class="line">platform :ios, <span class="string">&#x27;13.0&#x27;</span></span><br><span class="line"></span><br><span class="line"># 正式环境</span><br><span class="line">target <span class="string">&#x27;TargetsDemo&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  pod <span class="string">&#x27;SnapKit&#x27;</span></span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"># 开发环境，使用 <span class="title class_">SwiftLint</span> 进行代码规范检测，<span class="title class_">SwiftGen</span> 自动生成资源管理文件</span><br><span class="line">target <span class="string">&#x27;TargetsDemo-Debug&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  pod <span class="string">&#x27;SwiftLint&#x27;</span>, <span class="string">&#x27;= 0.42.0&#x27;</span>, <span class="attr">configurations</span>: [<span class="string">&#x27;Debug&#x27;</span>]</span><br><span class="line">  pod <span class="string">&#x27;SwiftGen&#x27;</span>, <span class="string">&#x27;= 6.4.0&#x27;</span>, <span class="attr">configurations</span>: [<span class="string">&#x27;Debug&#x27;</span>]</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"># 测试环境，引用单元测试三方库</span><br><span class="line">target <span class="string">&#x27;TargetsDemo-Internal&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  pod <span class="string">&#x27;Quick&#x27;</span>, <span class="string">&#x27;= 3.0.0&#x27;</span></span><br><span class="line">  pod <span class="string">&#x27;Nimble&#x27;</span>, <span class="string">&#x27;= 9.0.0&#x27;</span></span><br><span class="line">  pod <span class="string">&#x27;RxTest&#x27;</span>, <span class="string">&#x27;= 5.1.1&#x27;</span></span><br><span class="line">  pod <span class="string">&#x27;RxBlocking&#x27;</span>, <span class="string">&#x27;= 5.1.1&#x27;</span></span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS进阶】10 | 支撑组件：如何实现隐藏菜单，快速测试与验证？</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10%EF%BD%9C%E6%94%AF%E6%92%91%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="如何实现隐藏菜单，快速测试与验证？"><a href="#如何实现隐藏菜单，快速测试与验证？" class="headerlink" title="如何实现隐藏菜单，快速测试与验证？"></a>如何实现隐藏菜单，快速测试与验证？</h1><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10%EF%BD%9C%E6%94%AF%E6%92%91%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81%EF%BC%9F/17403876634367.jpg"></p>
<span id="more"></span>

<p>不知道在工作当中，你有没有为了测试和验证开发中的功能，特意为测试和产品经理打包一个特殊版本的 App？或者当多个团队并行开发的时候，为了测试，每个团队都单独打包出不同版本的 App？还有当你想添加某些供内部使用的功能（如清理 Cache），但又不想让 App Store 的用户使用，你是不是又专门打包了一个特殊版本的 App？</p>
<p>每次遇到这些情况，你是不是觉得特麻烦？</p>
<p>其实，这些都可以通过一个内部隐藏功能菜单来解决。在这一讲我就结合我们的 Moments App 来和你介绍下，如何开发了一个隐藏功能菜单，快速实现功能测试和验证。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10%EF%BD%9C%E6%94%AF%E6%92%91%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81%EF%BC%9F/17409650905492.jpg"></p>
<p>下面是隐藏菜单模块使用到的所有源代码文件。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10%EF%BD%9C%E6%94%AF%E6%92%91%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81%EF%BC%9F/17409653948167.jpg"></p>
<p>我把这些模块中使用到的类型分成两大类：</p>
<ul>
<li><p>用于呈现的 <strong>View</strong>，主要分为 ViewController + Tableview 以及 TableViewCell 两层；</p>
</li>
<li><p>用于存储配置数据的 <strong>ViewModel</strong>，它分为用于 TableView 的 ViewModel，用于 TableView Section 的 ViewModel 以及用于 TableView Cell 的 ViewModel。</p>
</li>
</ul>
<p>下面是所有类型的分类总揽图，你可以简单看一下，我会在后面进行一一介绍。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10%EF%BD%9C%E6%94%AF%E6%92%91%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81%EF%BC%9F/17409657080517.jpg"></p>
<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>下面是 View 部分的所有类型的关系图。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10%EF%BD%9C%E6%94%AF%E6%92%91%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81%EF%BC%9F/17409657702632.jpg"></p>
<p>隐藏菜单的 UI 使用了 <code>UIKit</code> 的 <code>UITableView</code> 来实现，其包含了四大部分：<strong>通用信息、DesignKit 范例、功能开关和工具箱</strong>，每一部分都是一个 <code>TableView Section</code>。</p>
<p>为了提高可重用性，以便于快速开发新的隐藏功能，我们把 <code>UITableView</code> 嵌入到 <code>UIViewController</code> 的子类 <code>InternalMenuViewController</code> 里面。然后通过 <code>RxDataSources</code> 把 <code>tableView</code> 和 <code>viewModel</code> 绑定到一起。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dataSource <span class="operator">=</span> <span class="type">RxTableViewSectionedReloadDataSource</span>&lt;<span class="type">InternalMenuSection</span>&gt;(</span><br><span class="line">    configureCell: &#123; <span class="keyword">_</span>, tableView, indexPath, item <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: item.type.rawValue, for: indexPath)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> cell <span class="operator">=</span> cell <span class="keyword">as?</span> <span class="type">InternalMenuCellType</span> &#123;</span><br><span class="line">            cell.update(with: item)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;, titleForHeaderInSection: &#123; dataSource, section <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> dataSource.sectionModels[section].title</span><br><span class="line">    &#125;, titleForFooterInSection: &#123; dataSource, section <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> dataSource.sectionModels[section].footer</span><br><span class="line">    &#125;)</span><br><span class="line">viewModel.sections</span><br><span class="line">    .bind(to: tableView.rx.items(dataSource: dataSource))</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<p>你可以看到，<code>RxDataSources</code> 帮我们把 <code>UIKit</code> 里面恼人的 <code>DataSource</code> 和 <code>Delegate</code> 通过封包封装起来。当生成 <code>Cell</code> 的时候，统一调用 <code>InternalMenuCellType</code> 协议的 <code>update(with item: InternalMenuItemViewModel)</code> 方法来更新 <code>Cell</code> 的 UI。因此所有的 <code>Cell</code> 都必须遵循 <code>InternalMenuCellType</code> 协议。</p>
<p>根据 <code>Cell</code> 的不同作用，我们把它分成三类：</p>
<ul>
<li><p>用于显示描述信息的 <code>InternalMenuDescriptionCell</code></p>
</li>
<li><p>用于响应点击事件的 <code>InternalMenuActionTriggerCell</code></p>
</li>
<li><p>用于功能开关的 <code>InternalMenuFeatureToggleCell</code></p>
</li>
</ul>
<p>它们都必须实现 <code>InternalMenuCellType</code> 协议里面的 <code>update(with item: InternalMenuItemViewModel)</code> 方法。下面以 <code>InternalMenuDescriptionCell</code> 为例子来看看具体代码是怎样实现的。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InternalMenuDescriptionCell</span>: <span class="title class_">UITableViewCell</span>, <span class="title class_">InternalMenuCellType</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">update</span>(<span class="params">with</span> <span class="params">item</span>: <span class="type">InternalMenuItemViewModel</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> item <span class="operator">=</span> item <span class="keyword">as?</span> <span class="type">InternalMenuDescriptionItemViewModel</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        selectionStyle <span class="operator">=</span> .none</span><br><span class="line">        textLabel<span class="operator">?</span>.text <span class="operator">=</span> item.title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>update</code> 的方法里，我们通过 <code>guard</code> 语句检查并把 <code>item</code> 的类型从 <code>InternalMenuItemViewModel</code> 向下转型（downcast）为 <code>InternalMenuDescriptionItemViewModel</code>。因为只有在类型转换成功的时候，才能更新当前 <code>Cell</code> 的 UI。 <code>InternalMenuActionTriggerCell</code> 和 <code>InternalMenuFeatureToggleCell</code> 的实现方法也和 <code>InternalMenuDescriptionCell</code> 一样。<br>到此为止， <code>View</code> 部分的实现以及完成了。你可能会问 <code>InternalMenuItemViewModel</code> 和 <code>InternalMenuDescriptionItemViewModel</code> 那些类型是哪里来的？我们一起来看看 <code>ViewModel</code> 部分吧。</p>
<h2 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h2><p><code>ViewModel</code> 的作用是为 <code>View</code> 准备需要呈现的数据，因此 <code>ViewModel</code> 的类型层级关系也与 <code>View</code> 类型层级关系一一对应起来，分成三大类。</p>
<ul>
<li><p>用于准备 TableView 数据的 <code>InternalMenuViewModel</code></p>
</li>
<li><p>用于准备 TableView Section 数据的 <code>InternalMenuSection</code></p>
</li>
<li><p>用于准备 TableView Cell 数据的 <code>InternalMenuItemViewModel</code></p>
</li>
</ul>
<p>由于位于上层的类型会引用到下层的类型，为了更好地理解它们的依赖关系，我准备从下往上为你介绍各层类型的实现。</p>
<h3 id="用于-TableView-Cell-的-ViewModel"><a href="#用于-TableView-Cell-的-ViewModel" class="headerlink" title="用于 TableView Cell 的 ViewModel"></a>用于 TableView Cell 的 ViewModel</h3><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10%EF%BD%9C%E6%94%AF%E6%92%91%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81%EF%BC%9F/17409662428722.jpg"></p>
<p>前面提到过，我把 <code>Cell</code> 分成了三类，与之对应的 <code>ViewModel</code> 也分成三类。我定义了一个名叫 <code>InternalMenuItemType</code> 的枚举类型（enum）来存放这些分类信息，假如以后要在隐藏菜单里开发新功能的 <code>Cell</code>，我们可以在该类型里面增加一个 <code>case</code>。下面是当前 <code>InternalMenuItemType</code> 的代码。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">InternalMenuItemType</span>: <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> description</span><br><span class="line">    <span class="keyword">case</span> featureToggle</span><br><span class="line">    <span class="keyword">case</span> actionTrigger</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们在为 <code>InternalMenuViewController</code> 的 <code>tableView</code> 注册 <code>Cell</code> 的时候使用了这个枚举作为 <code>ReuseIdentifier</code>，因此把这个枚举的原始值（Raw value）定义为 <code>String</code> 类型。下面是注册 <code>Cell</code> 时的代码。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tableView</span>.register(<span class="type">InternalMenuDescriptionCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="type">InternalMenuItemType</span>.description.rawValue)</span><br></pre></td></tr></table></figure>

<p>为了提高代码的可扩展性，我们在架构和开发 Moments App 时都遵守面向协议编程（Protocol Oriented Programming）的原则。落实到这个地方，我们为三个 ViewModel 抽象出一个共同的协议 <code>InternalMenuItemViewModel</code>，其代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">InternalMenuItemViewModel</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> type: <span class="type">InternalMenuItemType</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">select</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>InternalMenuItemViewModel</code> 定义了两个属性分别用于表示 <code>Cell</code> 类型以及显示的标题，同时也定义了一个名叫 <code>select()</code> 方法来处理 <code>Cell</code> 的点击事件。我们在 <code>InternalMenuViewController</code> 里通过 <code>RxDataSources</code> 把 <code>tableView和InternalMenuItemViewModel</code> 绑定起来，使得 <code>InternalMenuItemViewModel</code> 可以处理 <code>Cell</code> 的点击事件。代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">tableView.rx</span><br><span class="line">    .modelSelected(<span class="type">InternalMenuItemViewModel</span>.<span class="keyword">self</span>)</span><br><span class="line">    .subscribe(onNext: &#123; item <span class="keyword">in</span></span><br><span class="line">        item.select()</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<p>当用户点击 <code>TableView</code> 上某个 <code>Cell</code> 的时候，就会调用对应的 <code>ViewModel</code> 的 <code>select()</code> 方法。 但并不是所有的 <code>Cell</code> 都需要响应点击的事件，例如用于描述 App 版本号的 <code>Cell</code>，就不需要处理点击事件。</p>
<p>为了简化开发的工作量，我们为 <code>InternalMenuItemViewModel</code> 定义了一个名叫 <code>select()</code> 的协议扩展方法，并且为该协议提供了一个默认的实现，即当遵循 <code>InternalMenuItemViewModel</code> 协议的类型未实现 <code>select()</code> 方法时，程序就会执行协议扩展所定义的 <code>select()</code> 方法 。代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">InternalMenuItemViewModel</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">select</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面一起看看不同类型 <code>Cell</code> 所对应的 <code>ViewModel</code> 实现方法。</p>
<h3 id="InternalMenuDescriptionItemViewModel"><a href="#InternalMenuDescriptionItemViewModel" class="headerlink" title="InternalMenuDescriptionItemViewModel"></a>InternalMenuDescriptionItemViewModel</h3><p><code>InternalMenuDescriptionItemViewModel</code> 用于显示描述类型的 <code>Cell</code>，其功能非常简单，就是显示一句描述信息，例如 App 的版本号。其代码实现也十分容易，首先它需要实现来自 <code>InternalMenuItemViewModel</code> 的 <code>type</code> 属性并返回 <code>.description</code>，然后实现 <code>title</code> 属性来存储描述信息的字符串。 其具体代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">InternalMenuDescriptionItemViewModel</span>: <span class="title class_">InternalMenuItemViewModel</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> type: <span class="type">InternalMenuItemType</span> <span class="operator">=</span> .description</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="InternalMenuFeatureToggleItemViewModel"><a href="#InternalMenuFeatureToggleItemViewModel" class="headerlink" title="InternalMenuFeatureToggleItemViewModel"></a>InternalMenuFeatureToggleItemViewModel</h3><p><code>InternalMenuFeatureToggleItemViewModel</code> 用于存放本地功能开关的配置数据，因此它引用了上一讲提到过的 <code>InternalTogglesDataStore</code> 来存储和读取本地开关的信息。</p>
<p>除了实现 <code>type</code> 和 <code>title</code> 属性以外，它提供了两个关键的接口供外部使用：</p>
<ol>
<li><p>命名为 <code>isOn</code> 的计算属性（Computed property），供外部读取开关的状态；</p>
</li>
<li><p><code>toggle(isOn: Bool)</code> 方法，给外部更新开关的状态。</p>
</li>
</ol>
<p>具体代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">InternalMenuFeatureToggleItemViewModel</span>: <span class="title class_">InternalMenuItemViewModel</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> toggle: <span class="type">ToggleType</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> togglesDataStore: <span class="type">TogglesDataStoreType</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">title</span>: <span class="type">String</span>, <span class="params">toggle</span>: <span class="type">ToggleType</span>, <span class="params">togglesDataStore</span>: <span class="type">TogglesDataStoreType</span> <span class="operator">=</span> <span class="type">InternalTogglesDataStore</span>.shared) &#123;</span><br><span class="line">        <span class="keyword">self</span>.title <span class="operator">=</span> title</span><br><span class="line">        <span class="keyword">self</span>.toggle <span class="operator">=</span> toggle</span><br><span class="line">        <span class="keyword">self</span>.togglesDataStore <span class="operator">=</span> togglesDataStore</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> type: <span class="type">InternalMenuItemType</span> <span class="operator">=</span> .featureToggle</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> isOn: <span class="type">Bool</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> togglesDataStore.isToggleOn(toggle)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">toggle</span>(<span class="params">isOn</span>: <span class="type">Bool</span>) &#123;</span><br><span class="line">        togglesDataStore.update(toggle: toggle, value: isOn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="InternalMenuActionTriggerItemViewModel"><a href="#InternalMenuActionTriggerItemViewModel" class="headerlink" title="InternalMenuActionTriggerItemViewModel"></a>InternalMenuActionTriggerItemViewModel</h3><p>我们为响应点击事件的 <code>Cell</code> 都封装在 <code>InternalMenuActionTriggerItemViewModel</code> 里面，该 <code>ViewModel</code> 是一个类。代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InternalMenuActionTriggerItemViewModel</span>: <span class="title class_">InternalMenuItemViewModel</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> type: <span class="type">InternalMenuItemType</span> &#123; .actionTrigger &#125;</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span> &#123; <span class="built_in">fatalError</span>(<span class="type">L10n</span>.<span class="type">Development</span>.fatalErrorSubclassToImplement) &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">select</span>() &#123; <span class="built_in">fatalError</span>(<span class="type">L10n</span>.<span class="type">Development</span>.fatalErrorSubclassToImplement) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>InternalMenuActionTriggerItemViewModel</code> 遵循了 <code>InternalMenuItemViewModel</code> 协议，因此也需要实现 <code>type</code> 属性，并返回 <code>.actionTrigger</code>，同时我还实现了 <code>title</code> 属性和 <code>select()</code> 方法，它们都直接抛出 <code>fatalError</code> 错误。这是为什么呢？</p>
<p>因为我们想把 <code>InternalMenuActionTriggerItemViewModel</code> 定义为一个抽象类，然后把 <code>title</code> 属性和 <code>select()</code> 方法都定义为抽象属性和抽象方法。可是 Swift 并不支持抽象类，为了模拟概念上的抽象类，我们定义了一个普通的类，然后在 <code>title</code> 属性和 <code>select()</code> 方法里面抛出 <code>fatalError</code> 错误。</p>
<p>这样做有两个作用，第一是能防止调用者直接构造出 <code>InternalMenuActionTriggerItemViewModel</code> 的实例。第二是强迫其子类重写 <code>title</code> 属性和 <code>select()</code> 方法。下面是它的两个子类的实现代码。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">InternalMenuCrashAppItemViewModel</span>: <span class="title class_">InternalMenuActionTriggerItemViewModel</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> title: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">L10n</span>.<span class="type">InternalMenu</span>.crashApp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">select</span>() &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">InternalMenuDesignKitDemoItemViewModel</span>: <span class="title class_">InternalMenuActionTriggerItemViewModel</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> router: <span class="type">AppRouting</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> routingSourceProvider: <span class="type">RoutingSourceProvider</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">router</span>: <span class="type">AppRouting</span>, <span class="params">routingSourceProvider</span>: <span class="keyword">@escaping</span> <span class="type">RoutingSourceProvider</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.router <span class="operator">=</span> router</span><br><span class="line">        <span class="keyword">self</span>.routingSourceProvider <span class="operator">=</span> routingSourceProvider</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> title: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">L10n</span>.<span class="type">InternalMenu</span>.designKitDemo</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">select</span>() &#123;</span><br><span class="line">        router.route(to: <span class="type">URL</span>(string: <span class="string">&quot;<span class="subst">\(UniversalLinks.baseURL)</span>DesignKit&quot;</span>), from: routingSourceProvider(), using: .show)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们为 <code>InternalMenuActionTriggerItemViewModel</code> 定义子类的时候，为了让子类不能被其他子类所继承，而且提高编译速度，我们把子类 <code>InternalMenuCrashAppItemViewModel</code> 和 <code>InternalMenuDesignKitDemoItemViewModel</code> 都定义成 <code>final class</code>。</p>
<p>这两个子类都重写了 <code>title</code> 属性和 <code>select()</code> 方法。下面分别看看它们的具体实现。</p>
<p><code>InternalMenuCrashAppItemViewModel</code> 的作用是把 App 给闪退了，因此在其 <code>select()</code> 方法里面调用了 <code>fatalError()</code>。当用户点击闪退 App Cell 的时候，App 会立刻崩溃并退出。</p>
<p>而 <code>InternalMenuDesignKitDemoItemViewModel</code> 是用于打开 DesignKit 的范例页面。我们在其 <code>select()</code> 方法里面调用了 <code>router.route(to:from:using)</code> 进行导航。当用户点击 DesignKit 范例 Cell 的时候，App 会导航到 DesignKit 的范例页面，方便设计师和产品经理查看公共设计组件。</p>
<p>以上是如何开发用于显示 <code>UITableViewCell</code> 的 <code>ViewModel</code> 。下面一起看看 <code>TableView Section</code> 所对应的 <code>ViewModel</code>。</p>
<h3 id="用于-TableView-Section-的-ViewModel"><a href="#用于-TableView-Section-的-ViewModel" class="headerlink" title="用于 TableView Section 的 ViewModel"></a>用于 TableView Section 的 ViewModel</h3><p>为了准备 <code>TableView Section</code> 的数据，我建立一个名叫 <code>InternalMenuSection</code> 的结构体（Struct）。这个结构体遵循了自于 <code>RxDataSources</code> 的 <code>SectionModelType</code> 协议。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10%EF%BD%9C%E6%94%AF%E6%92%91%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81%EF%BC%9F/17409671094843.jpg"></p>
<p>因为 <code>SectionModelType</code> 使用了 <code>associatedtype</code> 来定义 <code>Item</code> 的类型，所有遵循该协议的类型都必须为 <code>Item</code> 明确指明其类型信息，代码如下。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">protocol</span> <span class="title class_">SectionModelType</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Item</span></span><br><span class="line">    <span class="keyword">var</span> items: [<span class="type">Item</span>] &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">init</span>(<span class="params">original</span>: <span class="keyword">Self</span>, <span class="params">items</span>: [<span class="type">Item</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为 <code>InternalMenuSection</code> 遵循了 <code>SectionModelType</code> 协议，所以需要明确指明 <code>Item</code> 的类型为 <code>InternalMenuItemViewModel</code>。 <code>InternalMenuSection</code> 还实现了两个 <code>init</code> 方法来进行初始化。具体代码如下。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">InternalMenuSection</span>: <span class="title class_">SectionModelType</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> items: [<span class="type">InternalMenuItemViewModel</span>]</span><br><span class="line">    <span class="keyword">let</span> footer: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">init</span>(<span class="params">title</span>: <span class="type">String</span>, <span class="params">items</span>: [<span class="type">InternalMenuItemViewModel</span>], <span class="params">footer</span>: <span class="type">String</span>? <span class="operator">=</span> <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.title <span class="operator">=</span> title</span><br><span class="line">        <span class="keyword">self</span>.items <span class="operator">=</span> items</span><br><span class="line">        <span class="keyword">self</span>.footer <span class="operator">=</span> footer</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>(<span class="params">original</span>: <span class="type">InternalMenuSection</span>, <span class="params">items</span>: [<span class="type">InternalMenuItemViewModel</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(title: original.title, items: items, footer: original.footer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了用于 <code>UITableViewCell</code> 和 <code>TableView Section</code> 的 <code>ViewModel</code> 以后，现在就剩下最后一个了，一起看看如何实现一个用于<code>UITableView的 ViewModel</code> 吧。</p>
<h3 id="用于-TableView-的-ViewModel"><a href="#用于-TableView-的-ViewModel" class="headerlink" title="用于 TableView 的 ViewModel"></a>用于 TableView 的 ViewModel</h3><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10%EF%BD%9C%E6%94%AF%E6%92%91%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81%EF%BC%9F/17409672703693.jpg"></p>
<p>用于 <code>UITableView</code> 的 <code>ViewModel</code> 也是遵循面向协议编程的原则。首先，我们定义了一个名叫 <code>InternalMenuViewModelType</code> 的协议。该协议只有两个属性 <code>title</code> 和 <code>sections</code>。其中，<code>title</code> 用于显示 <code>ViewController</code> 的标题，<code>sections</code> 用于显示 <code>TableView</code> 的数据，代码如下。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">InternalMenuViewModelType</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> sections: <span class="type">Observable</span>&lt;[<span class="type">InternalMenuSection</span>]&gt; &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>InternalMenuViewModel</code> 作为一个遵循 <code>InternalMenuViewModelType</code> 协议的结构体，它要实现 <code>title</code> 和 <code>sections</code> 属性。其中，<code>title</code> 只是返回包含标题的字符串即可。而 <code>sections</code> 则需要使用 <code>RxSwift</code> 的 <code>Observable</code> 来返回一个数组，这个数组包含了多个 <code>Session ViewModel</code>。</p>
<p>我们会在响应式编程一讲中详细讲述 <code>Observable</code>。在此你可以把它理解为一个能返回数组的数据流。下面是具体的代码实现。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">InternalMenuViewModel</span>: <span class="title class_">InternalMenuViewModelType</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> title <span class="operator">=</span> <span class="type">L10n</span>.<span class="type">InternalMenu</span>.area51</span><br><span class="line">    <span class="keyword">let</span> sections: <span class="type">Observable</span>&lt;[<span class="type">InternalMenuSection</span>]&gt;</span><br><span class="line">    <span class="keyword">init</span>(<span class="params">router</span>: <span class="type">AppRouting</span>, <span class="params">routingSourceProvider</span>: <span class="keyword">@escaping</span> <span class="type">RoutingSourceProvider</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> appVersion <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(L10n.InternalMenu.version)</span> <span class="subst">\((Bundle.main.object(forInfoDictionaryKey: L10n.InternalMenu.cfBundleVersion) <span class="keyword">as?</span> String) <span class="operator">??</span> <span class="string">&quot;1.0&quot;</span>)</span>&quot;</span></span><br><span class="line">        <span class="keyword">let</span> infoSection <span class="operator">=</span> <span class="type">InternalMenuSection</span>(</span><br><span class="line">            title: <span class="type">L10n</span>.<span class="type">InternalMenu</span>.generalInfo,</span><br><span class="line">            items: [<span class="type">InternalMenuDescriptionItemViewModel</span>(title: appVersion)]</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">let</span> designKitSection <span class="operator">=</span> <span class="type">InternalMenuSection</span>(</span><br><span class="line">            title: <span class="type">L10n</span>.<span class="type">InternalMenu</span>.designKitDemo,</span><br><span class="line">            items: [<span class="type">InternalMenuDesignKitDemoItemViewModel</span>(router: router, routingSourceProvider: routingSourceProvider)])</span><br><span class="line">        <span class="keyword">let</span> featureTogglesSection <span class="operator">=</span> <span class="type">InternalMenuSection</span>(</span><br><span class="line">            title: <span class="type">L10n</span>.<span class="type">InternalMenu</span>.featureToggles,</span><br><span class="line">            items: [</span><br><span class="line">                <span class="type">InternalMenuFeatureToggleItemViewModel</span>(title: <span class="type">L10n</span>.<span class="type">InternalMenu</span>.likeButtonForMomentEnabled, toggle: <span class="type">InternalToggle</span>.isLikeButtonForMomentEnabled),</span><br><span class="line">                <span class="type">InternalMenuFeatureToggleItemViewModel</span>(title: <span class="type">L10n</span>.<span class="type">InternalMenu</span>.swiftUIEnabled, toggle: <span class="type">InternalToggle</span>.isSwiftUIEnabled)</span><br><span class="line">            ])</span><br><span class="line">        <span class="keyword">let</span> toolsSection <span class="operator">=</span> <span class="type">InternalMenuSection</span>(</span><br><span class="line">            title: <span class="type">L10n</span>.<span class="type">InternalMenu</span>.tools,</span><br><span class="line">            items: [<span class="type">InternalMenuCrashAppItemViewModel</span>()]</span><br><span class="line">        )</span><br><span class="line">        sections <span class="operator">=</span> .just([</span><br><span class="line">            infoSection,</span><br><span class="line">            designKitSection,</span><br><span class="line">            featureTogglesSection,</span><br><span class="line">            toolsSection</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码可以看到，<code>InternalMenuViewModel</code> 的主要任务是把各个 <code>Cell</code> 的 <code>ViewModel</code> 进行初始化，然后放进各组 <code>Section</code> 的 <code>ViewModel</code> 里面，最后把各组 <code>Section</code> 的 <code>ViewModel</code> 放到 <code>items</code> 属性里面。</p>
<p>因为所有用于 <code>UITableViewCell</code> 的 <code>ViewModel</code> 都遵循了 <code>InternalMenuItemViewModel</code> 协议，所以它们能够保持统一的接口，方便我们快速扩展新功能。比如，我们要为实时聊天功能添加一个新的本地功能开关时，只需要下面一行代码就行了。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">InternalMenuFeatureToggleItemViewModel</span>(title: <span class="type">L10n</span>.<span class="type">InternalMenu</span>.instantMessagingEnabled, toggle: <span class="type">InternalToggle</span>.isInstantMessagingEnabled)</span><br></pre></td></tr></table></figure>

<p>运行效果如下:</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10%EF%BD%9C%E6%94%AF%E6%92%91%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81%EF%BC%9F/17409675412551.jpg"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这一讲中，我向你介绍了如何实现一个隐藏菜单功能，有了这个功能，我们的测试人员和产品经理可以使用这些功能来加速功能的测试与验证。在实现过程，我们把 UI 和配置数据部分进行分离，而且使用了面向协议的编程方式，让这个功能变得灵活且易于可扩展。在实际工作当中，你也可以使用这个模式来快速开发出各种配置页面。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10%EF%BD%9C%E6%94%AF%E6%92%91%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F%E8%8F%9C%E5%8D%95%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81%EF%BC%9F/17403876634367.jpg"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS进阶】11 | 功能组件：如何使用路由，支持多页面导航？</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="如何使用路由，支持多页面导航？"><a href="#如何使用路由，支持多页面导航？" class="headerlink" title="如何使用路由，支持多页面导航？"></a>如何使用路由，支持多页面导航？</h1><p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17428840890690.jpg"></p>
<span id="more"></span>

<p>随着 App 功能的不断丰富，以内容和体验为导向的导航模式变得越来越流行。这种导航模式的特点是一个页面可以导航到任意一个其他的页面。</p>
<p>比如在 iOS 里使用 UIKit 来实现导航功能时，源 ViewController 需要知道目标 ViewController 的类型信息，换句话说就是源 ViewController 必须直接依赖目标 ViewController。这会导致什么问题呢？如果 App的多个模块之间需要相互导航，那么它们之间就会产生循环依赖，如下图所示。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17428841755721.jpg"></p>
<p>假如随着 Moments App 不断发展，除了朋友圈功能以外，我们还可能新增商城功能和实时通讯功能。当用户点击朋友圈信息的时候可以打开商品信息页面，当点击朋友头像时可以进入实时通讯页面。而在商品信息页面里面，用户还可以打开朋友圈页面进行分享。</p>
<p>这种模块之间的循环依赖会引起一系列的问题，比如因为代码强耦合，导致代码变得难以维护。如果不同功能由不同产品研发团队负责开发与维护，循环依赖还会增加很多的沟通成本，每次一点小改动都需要通知其他团队进行更新。</p>
<p>那么，有没有什么好的办法解决这种问题呢？</p>
<h2 id="路由方案的架构与实现"><a href="#路由方案的架构与实现" class="headerlink" title="路由方案的架构与实现"></a>路由方案的架构与实现</h2><p>我们可以使用一套基于 URL 的路由方案来解决多个模块之间的导航问题。下面是这套路由方案的架构图。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17428842560106.jpg"></p>
<p>这个架构分成三层，因为上层组件依赖于下层组件，我们从下往上来看。</p>
<ul>
<li><p><strong>最底层是基础组件层</strong>，路由模块也属于基础组件，路由模块不依赖于任何其他组件。</p>
</li>
<li><p><strong>中间层是功能业务层</strong>，各个功能都单独封装为一个模块，他们都依赖于基础组件层，但功能层内的各个模块彼此不相互依赖，这能有效保证多个功能研发团队并行开发。</p>
</li>
<li><p><strong>最上层是 App 容器模块</strong>，它负责把所有功能模块整合起来，形成一个完整的产品。</p>
</li>
</ul>
<p>这套路由方案主要由两大部分组成，独立的路由模块和嵌入功能模块里面的导航组件。 接下来，我们以 Moments App 为例子一起看看这套方案是怎样实现的吧。</p>
<p><strong>这套路由方案主要由两大部分组成，独立的路由模块和嵌入功能模块里面的导航组件</strong>。 接下来，我们以 Moments App 为例子一起看看这套方案是怎样实现的吧。</p>
<h2 id="路由模块"><a href="#路由模块" class="headerlink" title="路由模块"></a>路由模块</h2><p>路由模块非常简单，主要有两个协议（Protocol）和一个类组成，如下图所示。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17428844095818.jpg"></p>
<h3 id="AppRouting-和-AppRouter"><a href="#AppRouting-和-AppRouter" class="headerlink" title="AppRouting 和 AppRouter"></a>AppRouting 和 AppRouter</h3><p>我们先来看路由模块里的 <code>AppRouting</code> 和 <code>AppRouter</code>。其中，<code>AppRouting</code> 协议定义了路由模块的接口而 <code>AppRouter</code> 是 <code>AppRouting</code> 协议的实现类。</p>
<p><code>AppRouting</code> 协议的代码如下:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">AppRouting</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">register</span>(<span class="params">path</span>: <span class="type">String</span>, <span class="params">navigator</span>: <span class="type">Navigating</span>)</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">route</span>(<span class="params">to</span> <span class="params">url</span>: <span class="type">URL</span>?, <span class="params">from</span> <span class="params">routingSource</span>: <span class="type">RoutingSource</span>?, <span class="params">using</span> <span class="params">transitionType</span>: <span class="type">TransitionType</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个协议只有两个方法：</p>
<ol>
<li><p>用于注册 <code>Navigator</code>（导航器）的 <code>register(path: String, navigator: Navigating)</code> 方法；</p>
</li>
<li><p>触发路由的 <code>route(to url: URL?, from routingSource: RoutingSource?, using transitionType: TransitionType)</code> 方法。</p>
</li>
</ol>
<p>其中 <code>route(to:from:using)</code> 方法接收三个参数：</p>
<ol>
<li><p>第一个是 URL，我们整套路由系统都是基于 URL 的，因此需要把 URL 传递进来进行导航。</p>
</li>
<li><p>第二个是类型为 <code>RoutingSource</code> 的参数，该 <code>RoutingSource</code> 是一个协议，代码如下：</p>
</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">RoutingSource</span>: <span class="title class_">class</span> &#123; &#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">UIViewController</span>: <span class="title class_">RoutingSource</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>首先，我们定义一个名为 <code>RoutingSource</code> 的空协议，然后让 <code>UIViewController</code> 遵循该协议。这样就能让 <code>route(to:from:using)</code> 方法与 <code>UIViewController</code> 进行解耦。</p>
<ol start="3">
<li>第三个参数是 <code>TransitionType</code> 类型。代码如下：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TransitionType</span>: <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> show, present</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>TransitionType</code> 是一个枚举（enum）类型，用于表示导航过程中的转场动作。<code>show</code> 用于把新的目标 <code>ViewController</code> 推进（push）到当前的 <code>UINavigationController</code> 里面。而 <code>present</code> 会把新的目标 <code>ViewController</code> 通过模态窗口（modal）的方式来呈现。</p>
<p>至于 <code>AppRouter</code> 是 <code>AppRouting</code> 协议的实现类，其他的具体代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">AppRouter</span>: <span class="title class_">AppRouting</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared: <span class="type">AppRouter</span> <span class="operator">=</span> .<span class="keyword">init</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> navigators: [<span class="type">String</span>: <span class="type">Navigating</span>] <span class="operator">=</span> [:]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">register</span>(<span class="params">path</span>: <span class="type">String</span>, <span class="params">navigator</span>: <span class="type">Navigating</span>) &#123;</span><br><span class="line">        navigators[path.lowercased()] <span class="operator">=</span> navigator</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">route</span>(<span class="params">to</span> <span class="params">url</span>: <span class="type">URL</span>?, <span class="params">from</span> <span class="params">routingSource</span>: <span class="type">RoutingSource</span>?, <span class="params">using</span> <span class="params">transitionType</span>: <span class="type">TransitionType</span> <span class="operator">=</span> .present) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> url, <span class="keyword">let</span> sourceViewController <span class="operator">=</span> routingSource <span class="keyword">as?</span> <span class="type">UIViewController</span> <span class="operator">??</span> <span class="type">UIApplication</span>.shared.rootViewController <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> path <span class="operator">=</span> url.lastPathComponent.lowercased()</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> urlComponents <span class="operator">=</span> <span class="type">URLComponents</span>(url: url, resolvingAgainstBaseURL: <span class="literal">false</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> parameters: [<span class="type">String</span>: <span class="type">String</span>] <span class="operator">=</span> (urlComponents.queryItems <span class="operator">??</span> []).reduce(into: [:]) &#123; params, queryItem <span class="keyword">in</span></span><br><span class="line">            params[queryItem.name.lowercased()] <span class="operator">=</span> queryItem.value</span><br><span class="line">        &#125;</span><br><span class="line">        navigators[path]<span class="operator">?</span>.navigate(from: sourceViewController, using: transitionType, parameters: parameters)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AppRouter</code> 首先定义了一个用于存储各个 <code>Navigator</code> 的私有属性<code>navigators</code>。<code>navigators</code> 是一个字典类型，它的 <code>Key</code> 是字符串类型，用于保存 <code>URL</code> 的路径值。而所存储的值是具体的 <code>Navigator</code> 的实例。</p>
<p>然后，<code>AppRouter</code> 实现了 <code>register</code> 和 <code>route</code> 两个方法。<code>register</code> 方法的实现非常简单，就是把 <code>path</code> 和 <code>navigator</code> 存到私有属性 <code>navigators</code> 里面。接着我详细介绍一下 <code>route</code> 方法的实现。</p>
<p>因为整套路由方案都是基于 <code>URL</code> 进行导航，因此在该方法里面，首先需要检测 <code>url</code> 是否为空，如果为空就直接返回了，然后把 <code>routingSource</code> 向下转型 (downcast) 为 <code>UIViewController</code>，如果为空就使用<code>rootViewController</code> 作为 <code>sourceViewController</code> 来表示导航过程中的源 <code>ViewController</code>。</p>
<p>这些检验都通过以后，我们从 <code>url</code> 来取出 <code>path</code> 作为导航的 <code>Key</code>，同时从 <code>Query String</code> 里面取出 <code>parameters</code> 并作为参数传递给目标 <code>ViewController</code>。</p>
<p>最后一步是根据 <code>path</code> 从 <code>navigators</code> 属性中取出对应的 <code>Navigator</code>，然后调用其 <code>navigate(from viewController: UIViewController, using transitionType: TransitionType, parameters: [String: String])</code> 方法进行导航。</p>
<h3 id="Navigating-协议"><a href="#Navigating-协议" class="headerlink" title="Navigating 协议"></a>Navigating 协议</h3><p>除了 <code>AppRouting</code> 和 <code>AppRouter</code> 以外，路由模块的核心还包含了一个叫作 <code>Navigating</code> 的协议。它负责具体的导航工作，下面我们一起看看这个协议的定义与实现吧。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Navigating</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">navigate</span>(<span class="params">from</span> <span class="params">viewController</span>: <span class="type">UIViewController</span>, <span class="params">using</span> <span class="params">transitionType</span>: <span class="type">TransitionType</span>, <span class="params">parameters</span>: [<span class="params">String</span>: <span class="type">String</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Navigating</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">navigate</span>(<span class="params">to</span> <span class="params">destinationViewController</span>: <span class="type">UIViewController</span>, <span class="params">from</span> <span class="params">sourceViewController</span>: <span class="type">UIViewController</span>, <span class="params">using</span> <span class="params">transitionType</span>: <span class="type">TransitionType</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> transitionType &#123;</span><br><span class="line">        <span class="keyword">case</span> .show:</span><br><span class="line">            sourceViewController.show(destinationViewController, sender: <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">case</span> .present:</span><br><span class="line">            sourceViewController.present(destinationViewController, animated: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Navigating</code> 协议负责桥接路由模块和其他功能模块，它只定义了一个名叫 <code>navigate(from viewController: UIViewController, using transitionType: TransitionType, parameters: [String: String])</code> 的方法供 <code>AppRouter</code> 来调用。</p>
<p>同时我们也给 <code>Navigating</code> 定义了一个叫作 <code>navigate(to destinationViewController: UIViewController, from sourceViewController: UIViewController, using transitionType: TransitionType)</code> 的扩展方法 (Extension method) 来统一封装导航的处理逻辑。</p>
<p>当 <code>transitionType</code> 为 <code>.show</code> 的时候，该方法会调用 <code>UIViewController</code> 的 <code>show(_ vc: UIViewController, sender: Any?)</code> 方法进行导航。在调用 <code>show</code> 方法的时候，iOS 系统会判断 <code>sourceViewController</code> 是存放在 <code>NavigationController</code> 还是 <code>SplitViewController</code> 里面，并触发相应的换场（Transition）动作。例如当 <code>sourceViewController</code> 存放在 <code>NavigationController</code> 里面的时候就会把 <code>destinationViewController</code> 推进 <code>NavigationController</code> 的栈（Stack）里面。</p>
<p>当 <code>transitionType</code> 为 <code>.present</code> 的时候，我们就调用 <code>UIViewController</code> 的 <code>present(_ viewControllerToPresent: UIViewController, animated flag: Bool, completion: (() -&gt; Void)? = nil)</code> 方法进行导航。在调用 <code>present</code> 方法的时候，iOS 系统会把 <code>destinationViewController</code> 通过模态窗口的方式呈现。</p>
<p>有了 <code>Navigating</code> 协议以后，我们看看功能模块是怎样关联到路由模块的。</p>
<h2 id="导航组件"><a href="#导航组件" class="headerlink" title="导航组件"></a>导航组件</h2><p>所有功能模块都通过 <code>Navigator</code> 类型为路由模块提供导航功能。一个目标 <code>ViewController</code> 对应一个 <code>Navigator</code>。假如商城模块有商城主页和商品信息页面两个 <code>ViewController</code>，那么商城模块就需要提供两个 <code>Navigtor</code> 来分别导航到这两个 <code>ViewController</code>。</p>
<p>下面我们以 Moments App 中内部隐藏功能菜单模块为例子，看看 Navigator 是怎样实现的。</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17428854893504.jpg"></p>
<p>内部隐藏功能菜单模块有两个 <code>ViewController</code>，因此需要定义两个不同的 <code>Navigator</code>。它们都遵循了 <code>Navigating</code> 协议。</p>
<h3 id="InternalMenuNavigator"><a href="#InternalMenuNavigator" class="headerlink" title="InternalMenuNavigator"></a>InternalMenuNavigator</h3><p><code>InternalMenuNavigator</code> 负责导航到<code>InternalMenuViewController</code>。下面是它的具体代码实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">InternalMenuNavigator</span>: <span class="title class_">Navigating</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">navigate</span>(<span class="params">from</span> <span class="params">viewController</span>: <span class="type">UIViewController</span>, <span class="params">using</span> <span class="params">transitionType</span>: <span class="type">TransitionType</span>, <span class="params">parameters</span>: [<span class="params">String</span> : <span class="type">String</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> navigationController <span class="operator">=</span> <span class="type">UINavigationController</span>(rootViewController: <span class="type">InternalMenuViewController</span>())</span><br><span class="line">        navigate(to: navigationController, from: viewController, using: transitionType)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码可以看到，<code>InternalMenuNavigator</code> 的实现非常简单。首先，初始化 <code>InternalMenuViewController</code>的实例，然后把该实例放置到一个 <code>UINavigationController</code> 里面。接下来我们调用 <code>Navigating</code> 的扩展方法 <code>navigate(to destinationViewController: UIViewController, from sourceViewController: UIViewController, using transitionType: TransitionType)</code> 来进行导航。</p>
<h3 id="DesignKitDemoNavigator"><a href="#DesignKitDemoNavigator" class="headerlink" title="DesignKitDemoNavigator"></a>DesignKitDemoNavigator</h3><p><code>DesignKitDemoNavigator</code> 负责导航到<code>DesignKitDemoViewController</code>。下面是实现的代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DesignKitDemoNavigator</span>: <span class="title class_">Navigating</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">navigate</span>(<span class="params">from</span> <span class="params">viewController</span>: <span class="type">UIViewController</span>, <span class="params">using</span> <span class="params">transitionType</span>: <span class="type">TransitionType</span>, <span class="params">parameters</span>: [<span class="params">String</span>: <span class="type">String</span>]) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> productName <span class="operator">=</span> parameters[<span class="string">&quot;productname&quot;</span>], <span class="keyword">let</span> versionNumber <span class="operator">=</span> parameters[<span class="string">&quot;version&quot;</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> destinationViewController <span class="operator">=</span> <span class="type">DesignKitDemoViewController</span>(productName: productName, versionNumber: versionNumber)</span><br><span class="line">        navigate(to: destinationViewController, from: viewController, using: transitionType)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与 <code>InternalMenuNavigator</code> 不一样的地方是，<code>DesignKitDemoNavigator</code> 从 <code>parameters</code> 中取出了 <code>productName和versionNumber</code> 两个参数的值，然后传递给 <code>DesignKitDemoViewController</code> 进行初始化。最后也是调用 <code>Navigating</code> 的扩展方法 <code>navigate(to:from:using:)</code> 进行导航。</p>
<h2 id="路由方案的使用"><a href="#路由方案的使用" class="headerlink" title="路由方案的使用"></a>路由方案的使用</h2><p>以上是有关路由方案的架构和实现，有了这个路由方案以后，那我们该如何使用它呢？接下来我将从它的注册与调用、Universal Links 的路由和验证来介绍下。</p>
<h3 id="路由的注册与调用"><a href="#路由的注册与调用" class="headerlink" title="路由的注册与调用"></a>路由的注册与调用</h3><p>因为 App 容器模块依赖所有的功能模块和路由模块，我们可以把路由注册的逻辑放在该模块的 <code>AppDelegate</code> 里面，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> router: <span class="type">AppRouting</span> <span class="operator">=</span> <span class="type">AppRouter</span>.shared</span><br><span class="line">router.register(path: <span class="string">&quot;InternalMenu&quot;</span>, navigator: <span class="type">InternalMenuNavigator</span>())</span><br><span class="line">router.register(path: <span class="string">&quot;DesignKit&quot;</span>, navigator: <span class="type">DesignKitDemoNavigator</span>())</span><br></pre></td></tr></table></figure>

<p>从上面可以看到，我们通过传递 <code>path</code> 和 <code>navigator</code> 的实例来注册路由信息。注册完毕以后，各个功能模块就可以调用 <code>route(to url: URL?, from routingSource: RoutingSource?, using transitionType: TransitionType)</code> 方法进行路由。下面是如何路由到内部功能菜单页面的代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">router.route(to: <span class="type">URL</span>(string: <span class="string">&quot;<span class="subst">\(UniversalLinks.baseURL)</span>InternalMenu&quot;</span>), from: rootViewController, using: .present)</span><br></pre></td></tr></table></figure>

<p>路由的过程中需要传入一个 URL，源 ViewController 以及换场的类型三个参数。</p>
<p>下面是路由到 DesignKit 范例页面的具体代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">router.route(to: <span class="type">URL</span>(string: <span class="string">&quot;<span class="subst">\(UniversalLinks.baseURL)</span>DesignKit?productName=DesignKit&amp;version=1.0.1&quot;</span>), from: routingSourceProvider(), using: .show)</span><br></pre></td></tr></table></figure>

<p>这个例子中，我们通过 <code>Query String</code> 的方式把 <code>productName</code> 和<code>version</code> 参数传递给目标 <code>ViewController</code>。</p>
<h3 id="Universal-Links-的路由"><a href="#Universal-Links-的路由" class="headerlink" title="Universal Links 的路由"></a>Universal Links 的路由</h3><p>我们之所以选择基于 URL 的路由方案，其中的一个原因是对 Universal Links 的支持。当我们的 App 支持 Universal Links 以后，一旦用户在 iOS 设备上打开 Universal Links 所支持的 URL 时，就会自动打开我们的 App。</p>
<p>根据 App 是否支持 Scenes 来区分，目前在 UIKit 里面支持 Universal Links 有两种方式。如果 App 还不支持 Scenes 的话，我们需要在 <code>AppDelegate</code> 里面添加 Universal Links 的支持的代码，如下所示：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>,</span><br><span class="line">                 <span class="params">continue</span> <span class="params">userActivity</span>: <span class="type">NSUserActivity</span>,</span><br><span class="line">                 <span class="params">restorationHandler</span>: <span class="keyword">@escaping</span> ([<span class="type">UIUserActivityRestoring</span>]<span class="operator">?</span>) -&gt; <span class="type">Void</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> userActivity.activityType <span class="operator">==</span> <span class="type">NSUserActivityTypeBrowsingWeb</span>,</span><br><span class="line">        <span class="keyword">let</span> incomingURL <span class="operator">=</span> userActivity.webpageURL <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> router: <span class="type">AppRouting</span> <span class="operator">=</span> <span class="type">AppRouter</span>.shared</span><br><span class="line">    router.route(to: incomingURL, from: <span class="literal">nil</span>, using: .present)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们首先检查 <code>userActivity.activityType</code> 是否为 <code>NSUserActivityTypeBrowsingWeb</code> ，并把 URL 取出来。如果验证都通过，就可以调用 <code>AppRouting的route(to url: URL?, from routingSource: RoutingSource?, using transitionType: TransitionType)</code> 方法进行路由。</p>
<p>在调用 <code>route</code> 方法的时候，我们把 <code>nil</code> 传递给 <code>routingSource</code> 并指定换场方式为 <code>.present</code>。这样路由模块就会通过模态窗口把目标 ViewController 呈现出来。</p>
<p>如果 App 已经使用 Scene，例如我们的 Moments App，那么我们需要修改 <code>SceneDelegate的scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> 方法来支持 Universal Links，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> userActivity <span class="operator">=</span> connectionOptions.userActivities.first,</span><br><span class="line">    userActivity.activityType <span class="operator">==</span> <span class="type">NSUserActivityTypeBrowsingWeb</span>,</span><br><span class="line">    <span class="keyword">let</span> incomingURL <span class="operator">=</span> userActivity.webpageURL &#123;</span><br><span class="line">    <span class="keyword">let</span> router: <span class="type">AppRouting</span> <span class="operator">=</span> <span class="type">AppRouter</span>.shared</span><br><span class="line">    router.route(to: incomingURL, from: <span class="literal">nil</span>, using: .present)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码可见，当我们从 <code>connectionOptions</code> 取出 <code>userActivity</code> 以后，后面的处理逻辑和上面 <code>AppDelegate</code> 的实现方式一模一样，在这里我就不赘述了。</p>
<h3 id="路由的验证"><a href="#路由的验证" class="headerlink" title="路由的验证"></a>路由的验证</h3><p>当我们的 App 支持 Universal Links 以后，我们需要在 Navigator 里面增加一些验证的代码，否则可能会引起外部系统的攻击，例如 Moments App 的内部隐藏功能菜单不想给 App Store 用户使用，我们可以在 <code>InternalMenuNavigator</code> 里面添加以下的验证代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> togglesDataStore: <span class="type">TogglesDataStoreType</span> <span class="operator">=</span> <span class="type">BuildTargetTogglesDataStore</span>.shared</span><br><span class="line"><span class="keyword">guard</span> togglesDataStore.isToggleOn(<span class="type">BuildTargetToggle</span>.debug) <span class="operator">||</span> togglesDataStore.isToggleOn(<span class="type">BuildTargetToggle</span>.internal) <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码会检查当前的 App 是否为开发环境或者测试环境的版本，如果“不是”，说明当前的 App 是 App Store 版本，我们就直接退出，不允许打开内部功能菜单。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这一讲中我介绍了一个基于 URL 的通用路由方案的实现方式，有了这个路由方案，不但可以帮助所有功能模块的解耦，而且能很方便地支持 Universal Links。</p>
<p>当我们的 App 支持 Universal Links 以后，需要特别注意对路由的 URL 进行验证，否则会很容易被外部系统进行攻击。这些验证的手段包括不应该允许 Universal Links 更新或者删除数据，不允许 Universal Links 访问任何敏感数据。</p>
<h1 id="学习笔记与扩展"><a href="#学习笔记与扩展" class="headerlink" title="学习笔记与扩展"></a>学习笔记与扩展</h1><h2 id="什么是-Universal-Link-通用链接"><a href="#什么是-Universal-Link-通用链接" class="headerlink" title="什么是 Universal Link (通用链接)"></a>什么是 <code>Universal Link</code> (通用链接)</h2><p><code>Universal Link</code> (通用链接)是 Apple 在 iOS9 推出的一种能够方便的通过传统 HTTPS 链接来启动 APP 的功能，可以使用相同的网址打开网址和 APP 。当你的应用支持 <code>Universal Link</code> (通用链接)，当用户点击一个链接是可以跳转到你的网站并获得无缝重定向到对应的 APP，且不需要通过 Safari 浏览器。如果你的应用不支持的话，则会在 Safari 中打开该链接。在苹果开发者中可以看到对它的介绍是：</p>
<blockquote>
<p>Seamlessly link to content inside your app, or on your website in iOS 9 or later. With universal links, you can always give users the most integrated mobile experience, even when your app isn’t installed on their device.</p>
</blockquote>
<h2 id="如何理解-Universal-Link-通用链接"><a href="#如何理解-Universal-Link-通用链接" class="headerlink" title="如何理解 Universal Link (通用链接)"></a>如何理解 <code>Universal Link</code> (通用链接)</h2><p><code>Universal Link</code> (通用链接)：看起来就是一条普通的 https 链接，当然是我们在该链接域名根目录配置过的一个链接，也可以在该链接中放置对应的 H5 页面。当用户的点击该链接，只要手机中安装了支持该链接的 APP 就会直接进入到 APP 中。如果没有安装APP则会跳转到 Safari 浏览器中，展示 H5 页面。对用户来说则是一个无缝跳转的过程。</p>
<h2 id="Universal-Link-通用链接-的应用场景"><a href="#Universal-Link-通用链接-的应用场景" class="headerlink" title="Universal Link (通用链接) 的应用场景"></a><code>Universal Link</code> (通用链接) 的应用场景</h2><p>使用 <code>Universal Link</code> (通用链接)可以让用户在 Safari 浏览器或者其他 APP 的 webview 中拉起相应的 APP，也可以在 APP 中使用相应的功能，从而来把用户引流到 APP 中。比如淘宝当在 Safari 浏览器中进入淘宝网页点击打开 APP 则会使用 Universal Link (通用链接)来拉起淘宝 APP 。</p>
<h2 id="使用-Universal-Link-通用链接-跳转的好处"><a href="#使用-Universal-Link-通用链接-跳转的好处" class="headerlink" title="使用 Universal Link (通用链接) 跳转的好处"></a>使用 <code>Universal Link</code> (通用链接) 跳转的好处</h2><ul>
<li><p><strong>唯一性</strong>: 不像自定义的 <code>URL Scheme</code>，因为它使用标准的 HTTPS 协议链接到你的 web 站点，所以一般不会被其它的 APP 所声明。另外， URL scheme 因为是自定义的协议，所以在没有安装 app 的情况下是无法直接打开的(在 Safari 中还会出现一个不可打开的弹窗)，而 Universal Link (通用链接)本身是一个 HTTPS 链接，所以有更好的兼容性；</p>
</li>
<li><p><strong>安全</strong>: 当用户的手机上安装了你的 APP，那么系统会去你配置的网站上去下载你上传上去的说明文件(这个说明文件声明了当前该 HTTPS 链接可以打开那些 APP )。因为只有你自己才能上传文件到你网站的根目录，所以你的网站和你的 APP 之间的关联是安全的；</p>
</li>
<li><p><strong>可变</strong>: 当用户手机上没有安装你的 APP 的时候，Universal Link (通用链接)也能够工作。如果你愿意，在没有安装你的 app 的时候，用户点击链接，会在 safari 中展示你网站的内容；</p>
</li>
<li><p><strong>简单</strong>: 一个 HTTPS 的链接，可以同时作用于网站和 APP；</p>
</li>
<li><p><strong>私有</strong>: 其它 APP 可以在不需要知道你的 APP 是否安装了的情况下和你的 APP 相互通信。</p>
</li>
</ul>
<h2 id="支持-Universal-Link-通用链接"><a href="#支持-Universal-Link-通用链接" class="headerlink" title="支持 Universal Link (通用链接)"></a>支持 <code>Universal Link</code> (通用链接)</h2><ol>
<li><p>先决条件: 必须有一个支持HTTPS的域名，并且拥有该域名下的上传到根目录的权限（为了上传Apple指定文件）。</p>
</li>
<li><p>开发者中心配置：找到对应的 App ID，在 Application Services 列表里有 Associated Domains 一条，把它变为 Enabled 就可以了。</p>
</li>
</ol>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17429010367164.jpg"></p>
<ol start="3">
<li>工程配置：targets -&gt; Signing&amp;Capabilites -&gt; Capability -&gt; Associated Domains，在其中的 Domains 中填入你想支持的域名，也必须必须以 applinks: 为前缀。具体步骤如下图:</li>
</ol>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17429011467875.jpg"></p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17429011785829.jpg"></p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17429012218515.jpg"></p>
<ol start="4">
<li>配置指定文件：创建一个内容为 json 格式的文件，苹果将会在合适的时候，从我们在项目中填入的域名请求这个文件。这个文件名必须为 apple-app-site-association，切记没有后缀名，文件内容大概是这样子：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;applinks&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;apps&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;details&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;appID&quot;</span>: <span class="string">&quot;9JA89QQLNQ.com.apple.wwdc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;paths&quot;</span>: [ <span class="string">&quot;/wwdc/news/&quot;</span>, <span class="string">&quot;/videos/wwdc/2015/*&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;appID&quot;</span>: <span class="string">&quot;ABCD1234.com.apple.wwdc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;paths&quot;</span>: [ <span class="string">&quot;*&quot;</span> ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>appID：组成方式是 teamId.yourapp’s bundle identifier。如上面的 9JA89QQLNQ 就是 teamId。登陆开发者中心，在 Account -&gt; Membership 里面可以找到 Team ID。</p>
<p>paths：设定你的app支持的路径列表，只有这些指定的路径的链接，才能被 app 所处理。星号的写法代表了可识 别域名下所有链接。</p>
<ol start="5">
<li>上传指定文件: 上传该文件到你的域名所对应的根目录或者 <code>.well-known</code> 目录下，这是为了苹果能获取到你上传的文件。上传完后,自己先访问一下,看看是否能够获取到，当你在浏览器中输入这个文件链接后，应该是直接下载 <code>apple-app-site-association</code> 文件。</li>
</ol>
<h2 id="Universal-Link-通用链接-相关验证"><a href="#Universal-Link-通用链接-相关验证" class="headerlink" title="Universal Link (通用链接) 相关验证"></a><code>Universal Link</code> (通用链接) 相关验证</h2><p>在 iOS 设备中的备忘录中输入 APP 能识别的链接，然后直接点击此链接，就会直接跳转到你的 app 了。或是长按，在出现的弹出菜单中第二项是在 ’XXX’ 中打开，这也代表着成功：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17429014557173.jpg"></p>
<p>或是你将要测试的网址在 <code>Safari</code> 中打开，在出现的网页上方下滑，可以看到有在 ”XX” 应用中打开：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17429014963985.jpg"></p>
<p>当点击某个链接，直接可以进我们的 app 了，但是我们的目的是要能够获取到用户进来的链接，根据链接来展示给用户相应的内容。</p>
<p>我们需要在工程里的实现 <code>AppDelegate</code> 里对应的方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (<span class="type">BOOL</span>)application:(<span class="type">UIApplication</span> <span class="operator">*</span>)application continueUserActivity:(<span class="type">NSUserActivity</span> <span class="operator">*</span>)userActivity restorationHandler:(void (<span class="operator">^</span>)(<span class="type">NSArray</span> <span class="operator">*</span> _Nullable))restorationHandler &#123;</span><br><span class="line">    <span class="keyword">if</span> ([userActivity.activityType isEqualToString:<span class="type">NSUserActivityTypeBrowsingWeb</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">NSURL</span> <span class="operator">*</span>url <span class="operator">=</span> userActivity.webpageURL;</span><br><span class="line">        <span class="keyword">if</span> (url是我们希望处理的)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//进行我们的处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            [[<span class="type">UIApplication</span> sharedApplication] openURL:url];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="type">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>苹果为了方便开发者，提供了一个网页来验证我们编写的这个 <code>apple-app-site-association</code> 是否合法有效，进入验证网址进行验证：</p>
<p><img data-src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11%EF%BD%9C%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%EF%BC%9F/17429015814736.jpg"></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>前端开发经常面临跨域问题，必须要求跨域，如果不跨域，就不行。</p>
<p>只有当前 webview 的 URL 域名，与跳转目标 URL 域名不一致时，<code>Universal Link</code> (通用链接) 才生效。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【Flutter】导出iOS包时，如何自动与手动更改版本号？</title>
    <url>/Flutter/%E3%80%90Flutter%E3%80%91%E5%AF%BC%E5%87%BAiOS%E5%8C%85%E6%97%B6%EF%BC%8C%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E4%B8%8E%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%94%B9%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="【Flutter】导出iOS包时，如何自动与手动更改版本号？"><a href="#【Flutter】导出iOS包时，如何自动与手动更改版本号？" class="headerlink" title="【Flutter】导出iOS包时，如何自动与手动更改版本号？"></a>【Flutter】导出iOS包时，如何自动与手动更改版本号？</h1><h2 id="1、通过flutter工程更改版本号"><a href="#1、通过flutter工程更改版本号" class="headerlink" title="1、通过flutter工程更改版本号"></a>1、通过flutter工程更改版本号</h2><p>1）首先，打开项目下的iOS工程，找到<code>info.plist</code>文件，右键以<code>Source Code</code>方式打开，找到版本号配置参数 <code>CFBundleShortVersionString</code>和<code>CFBundleVersion</code>。</p>
<p>一般未做改动之前的效果如下，<code>$(FLUTTER_BUILD_NAME)</code>表示跟随flutter工程创建。</p>
<span id="more"></span>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>key<span class="operator">&gt;</span><span class="type">CFBundleShortVersionString</span>&lt;/key&gt;</span><br><span class="line"><span class="operator">&lt;</span>string<span class="operator">&gt;</span>$(<span class="type">FLUTTER_BUILD_NAME</span>)<span class="operator">&lt;/</span>string<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>key<span class="operator">&gt;</span><span class="type">CFBundleVersion</span>&lt;/key&gt;</span><br><span class="line"><span class="operator">&lt;</span>string<span class="operator">&gt;</span>$(<span class="type">FLUTTER_BUILD_NAME</span>)<span class="operator">&lt;/</span>string<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）其次，了解了<code>$(FLUTTER_BUILD_NAME)</code>的含义之后，我们再来打开<code>flutter</code>工程目录下的<code>pubspec.yaml</code>文件。</p>
<p>如下图所示，我们可以看到关于版本信息的代码<code>version: 0.6.0+1</code>。</p>
<p>这里的<code>0.6.0</code>就是构建iOS包的版本号，而<code>1</code>就是build号。分别对应前面的<code>CFBundleVersion</code>和<code>CFBundleShortVersionString</code>。</p>
<p><img data-src="/Flutter/%E3%80%90Flutter%E3%80%91%E5%AF%BC%E5%87%BAiOS%E5%8C%85%E6%97%B6%EF%BC%8C%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E4%B8%8E%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%94%B9%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%9F/16781763866764.jpg" alt="16781763866764"></p>
<p>3）最后，了解了上面的信息之后，我们想要修改构建出来的iOS包的版本号就好办了。</p>
<p>一般有两种办法：</p>
<p>方法一：更改上图中的版本信息代码</p>
<p>将<code>version: 0.6.0+1</code>更改成你想要的版本，比如：<code>version: 1.0.0+2</code></p>
<p>然后<code>cd</code>到<code>flutter</code>项目目录下运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter clean</span><br><span class="line">flutter build ios --release</span><br></pre></td></tr></table></figure>

<p>然后再使用Xcode打开iOS工程，此时我们就可以很清晰的看到自动生成的版本信息文件<code>(Generated)</code>发生变化了。内容如下：</p>
<p><img data-src="/Flutter/%E3%80%90Flutter%E3%80%91%E5%AF%BC%E5%87%BAiOS%E5%8C%85%E6%97%B6%EF%BC%8C%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E4%B8%8E%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%94%B9%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%9F/16781777724396.jpg" alt="16781777724396"></p>
<p>确认完以上信息，我们就可以手动打包了。</p>
<p>方法二：清理工程，直接用<code>flutter</code>脚本语言打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter clean</span><br><span class="line">flutter build ios --build-name=0.6.0 --build-number=1</span><br></pre></td></tr></table></figure>

<p>这里的<code>--build-name=0.6.0</code>就对应上图的<code>FLUTTER BUILD NAME=0.6.0</code>，<code>build-number=1</code>对应<code>FLUTTER BUILD NUMBER=1</code>。</p>
<h2 id="2、通过iOS工程更改版本号"><a href="#2、通过iOS工程更改版本号" class="headerlink" title="2、通过iOS工程更改版本号"></a>2、通过iOS工程更改版本号</h2><p>1）首先，还是回到iOS工程下，找到<code>info.plist</code>文件，右键以<code>Source Code</code>方式打开，找到版本号配置参数<code>CFBundleShortVersionString</code>和<code>CFBundleVersion</code>。</p>
<p>对这两个参数的<code>value</code>值进行修改，让它们不再跟随<code>flutter</code>工程创建，修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;CFBundleShortVersionString&lt;/key&gt;</span><br><span class="line">&lt;string&gt;$(MARKETING_VERSION)&lt;/string&gt;</span><br><span class="line">&lt;key&gt;CFBundleVersion&lt;/key&gt;</span><br><span class="line">&lt;string&gt;$(CURRENT_PROJECT_VERSION)&lt;/string&gt;</span><br></pre></td></tr></table></figure>

<p>这里，<code>$(CURRENT_PROJECT_VERSION)</code>: 表示当前项目版本号；<br><code>$(MARKETING_VERSION)</code>：表示当前项目build号。</p>
<p>更改以上配置之后，我们就可以在iOS工程配置中手动修改iOS包的版本信息了。效果如下图：</p>
<p><img data-src="/Flutter/%E3%80%90Flutter%E3%80%91%E5%AF%BC%E5%87%BAiOS%E5%8C%85%E6%97%B6%EF%BC%8C%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E4%B8%8E%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%94%B9%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%9F/16781786409936.jpg" alt="16781786409936"></p>
<p>修改完进行打包。</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>【GitHub】GitHub Actions 入门</title>
    <url>/GitHub/%E3%80%90GitHub%E3%80%91GitHub-Actions-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="一、GitHub-Actions-是什么？"><a href="#一、GitHub-Actions-是什么？" class="headerlink" title="一、GitHub Actions 是什么？"></a>一、GitHub Actions 是什么？</h1><p><img data-src="/GitHub/%E3%80%90GitHub%E3%80%91GitHub-Actions-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/GitHub%20Actions.jpg"></p>
<span id="more"></span>

<p><strong>GitHub Actions</strong> 是一个持续集成和持续交付 <code>(CI/CD)</code> 平台，允许您自动化构建、测试和部署流水线。您可以创建工作流来构建和测试存储库中的每个请求，或者将合并的请求部署到生产环境中。</p>
<p>大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 <code>actions</code>。</p>
<p>很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p>
<p>如果你需要某个 <code>action</code>，不必自己写复杂的脚本，直接引用他人写好的 <code>action</code> 即可，整个持续集成过程，就变成了一个 <code>actions</code> 的组合。这就是 <code>GitHub Actions</code> 最特别的地方。</p>
<p>GitHub 做了一个 <a href="https://github.com/marketplace?type=actions">官方市场</a>，可以搜索到他人提交的 <code>actions</code>。另外，还有一个 <a href="https://github.com/sdras/awesome-actions">awesome actions</a> 的仓库，也可以找到不少 <code>action</code>。</p>
<p><img data-src="/GitHub/%E3%80%90GitHub%E3%80%91GitHub-Actions-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/17391740726196.jpg"></p>
<h1 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h1><p>GitHub Actions 有一些自己的术语。</p>
<ol>
<li><strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 <code>workflow</code>。</li>
</ol>
<p>工作流是一个可配置的自动化流程，它将运行一个或多个作业。工作流是由签入存储库的 <code>YAML</code> 文件定义的，并且在由 <code>repository</code> 中的事件触发时运行，或者可以手动触发，或者按照定义的时间表运行。</p>
<p>工作流在 <code>.github/workflows</code> 目录中定义，并且存储库可以有多个工作流，每个工作流可以执行不同的任务集。例如，您可以使用一个工作流来构建和测试拉请求，使用另一个工作流在每次创建发行版时部署您的应用程序，还可以使用另一个工作流在每次有人打开新问题时添加标签。</p>
<ol start="2">
<li><strong>job</strong> （作业）：一个 <code>workflow</code> 由一个或多个 <code>jobs</code> 构成，含义是一次持续集成的运行，可以完成多个任务。</li>
</ol>
<p>作业是工作流中在同一运行程序上执行的一组步骤。每个步骤要么是将要执行的 <code>shell</code> 脚本，要么是将要运行的操作。</p>
<ol start="3">
<li><strong>step</strong>（步骤）：每个 <code>job</code> 由多个 <code>step</code> 构成，一步步完成。</li>
</ol>
<p>步骤按顺序执行，并相互依赖。由于每个步骤都在同一个运行程序上执行，因此可以将数据从一个步骤共享到另一个步骤。例如，您可以有一个生成应用程序的步骤，然后有一个测试生成的应用程序的步骤。</p>
<ol start="4">
<li><strong>action</strong> （动作）：每个 <code>step</code> 可以依次执行一个或多个命令（action）。</li>
</ol>
<p>动作是 GitHub Actions 平台的自定义应用程序，它执行复杂但经常重复的任务。使用一个操作来帮助减少在工作流文件中编写的重复代码的数量。操作可以从 GitHub 获取 git 存储库获取。</p>
<ol start="5">
<li><strong>Runners</strong> （运行器）：运行器是在工作流被触发时运行它们的服务器。每个运行器可以一次运行一个作业。</li>
</ol>
<h1 id="三、workflow-文件"><a href="#三、workflow-文件" class="headerlink" title="三、workflow 文件"></a>三、workflow 文件</h1><p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的 <code>.github/workflows</code> 目录。</p>
<p>目录结构如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.github</span><br><span class="line"><span class="operator">└──</span> workflows</span><br><span class="line">    <span class="operator">├──</span> foo.yml</span><br><span class="line">    <span class="operator">└──</span> sync<span class="operator">-</span><span class="number">2</span><span class="operator">-</span>gitlab.yml</span><br></pre></td></tr></table></figure>

<p>workflow 文件采用 <code>YAML</code> 格式，文件名可以任意取，但是后缀名统一为 <code>.yml</code>，比如 <code>foo.yml</code>。一个库可以有多个 workflow 文件。GitHub 只要发现 <code>.github/workflows</code> 目录里面有 <code>.yml</code> 文件，就会自动运行该文件。</p>
<p>workflow 文件的配置字段非常多，详见官方文档。下面是一些基本字段。</p>
<ol>
<li><strong>name</strong></li>
</ol>
<p><code>name</code> 字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">name: <span class="type">GitHub</span> <span class="type">Actions</span> <span class="type">Demo</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>on</strong></li>
</ol>
<p><code>on</code> 字段指定触发 workflow 的条件，通常是某些事件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">on: push</span><br></pre></td></tr></table></figure>

<p>上面代码指定，<code>push</code> 事件触发 workflow。</p>
<p><code>on</code> 字段也可以是事件的数组。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">on: [push, pull_request]</span><br></pre></td></tr></table></figure>

<p>上面代码指定，<code>push</code> 事件或 <code>pull_request</code> 事件都可以触发 workflow。</p>
<p>完整的事件列表，请查看 <a href="https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows">官方文档</a>。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。</p>
<ol start="3">
<li><strong>on.&lt;push|pull_request&gt;.&lt;tags|branches&gt;</strong></li>
</ol>
<p>指定触发事件时，可以限定分支或标签。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:    </span><br><span class="line">      <span class="operator">-</span> master</span><br></pre></td></tr></table></figure>

<p>上面代码指定，只有 <code>master</code> 分支发生 <code>push</code> 事件时，才会触发 workflow。</p>
<ol start="4">
<li><strong>jobs.<job_id>.name</job_id></strong></li>
</ol>
<p>workflow 文件的主体是 <code>jobs</code> 字段，表示要执行的一项或多项任务。</p>
<p><code>jobs</code>字段里面，需要写出每一项任务的 <code>job_id</code> ，具体名称自定义。<code>job_id</code> 里面的 <code>name</code> 字段是任务的说明。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  my_first_job:</span><br><span class="line">    name: <span class="type">My</span> first job</span><br><span class="line">  my_second_job:</span><br><span class="line">    name: <span class="type">My</span> second job</span><br></pre></td></tr></table></figure>

<p>上面代码的 <code>jobs</code> 字段包含两项任务，<code>job_id</code> 分别是 <code>my_first_job</code> 和 <code>my_second_job</code>。</p>
<ol start="5">
<li><strong>jobs.<job_id>.needs</job_id></strong></li>
</ol>
<p><code>needs</code> 字段指定当前任务的依赖关系，即运行顺序。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  job1:</span><br><span class="line">  job2:</span><br><span class="line">    needs: job1</span><br><span class="line">  job3:</span><br><span class="line">    needs: [job1, job2]</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>job1</code> 必须先于 <code>job2</code> 完成，而 <code>job3</code> 等待 <code>job1</code> 和 <code>job2</code> 的完成才能运行。因此，这个 workflow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p>
<ol start="6">
<li><strong>jobs.<job_id>.runs-on</job_id></strong></li>
</ol>
<p><code>runs-on</code> 字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu-latest，ubuntu-18.04或ubuntu-16.04</span><br><span class="line">windows-latest，windows-2019或windows-2016</span><br><span class="line">macOS-latest或macOS-10.14</span><br></pre></td></tr></table></figure>

<p>下面代码指定虚拟机环境为 <code>ubuntu-18.04</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">runs<span class="operator">-</span>on: ubuntu<span class="operator">-</span><span class="number">18.04</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>jobs.<job_id>.steps</job_id></strong></li>
</ol>
<p><code>steps</code> 字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jobs.&lt;job_id&gt;.steps.name：步骤名称。</span><br><span class="line">jobs.&lt;job_id&gt;.steps.run：该步骤运行的命令或者 action。</span><br><span class="line">jobs.&lt;job_id&gt;.steps.env：该步骤所需的环境变量。</span><br></pre></td></tr></table></figure>

<p>下面是一个完整的 workflow 文件的范例。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">name: <span class="type">Greeting</span> from <span class="type">Mona</span></span><br><span class="line">on: push</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  my<span class="operator">-</span>job:</span><br><span class="line">    name: <span class="type">My</span> <span class="type">Job</span></span><br><span class="line">    runs<span class="operator">-</span>on: ubuntu<span class="operator">-</span>latest</span><br><span class="line">    steps:</span><br><span class="line">    <span class="operator">-</span> name: <span class="type">Print</span> a greeting</span><br><span class="line">      env:</span><br><span class="line">        <span class="type">MY_VAR</span>: <span class="type">Hi</span> there<span class="operator">!</span> <span class="type">My</span> name <span class="keyword">is</span></span><br><span class="line">        <span class="type">FIRST_NAME</span>: <span class="type">Mona</span></span><br><span class="line">        <span class="type">MIDDLE_NAME</span>: <span class="type">The</span></span><br><span class="line">        <span class="type">LAST_NAME</span>: <span class="type">Octocat</span></span><br><span class="line">      run: <span class="operator">|</span></span><br><span class="line">        echo <span class="variable">$MY_VAR</span> <span class="variable">$FIRST_NAME</span> <span class="variable">$MIDDLE_NAME</span> <span class="variable">$LAST_NAME</span>.</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>steps</code> 字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</p>
<h1 id="四、实例：个人项目通过-GitHub-Actions-同步到-GitLab"><a href="#四、实例：个人项目通过-GitHub-Actions-同步到-GitLab" class="headerlink" title="四、实例：个人项目通过 GitHub Actions 同步到 GitLab"></a>四、实例：个人项目通过 GitHub Actions 同步到 GitLab</h1><ol>
<li>在 Github 项目<br><code>Settings-&gt;Secrets-&gt;Actions</code>，名称为：<code>GITLAB</code>，值为：<code>~/.ssh/</code>目录下<code>id_rsa</code> 文件内容，⚠️注意不是 <code>id_rsa.pub</code>：</li>
</ol>
<p><img data-src="/GitHub/%E3%80%90GitHub%E3%80%91GitHub-Actions-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/17374486339840.jpg"></p>
<ol start="2">
<li>GitHub 创建 Github workflow</li>
</ol>
<p>在个人项目根目录下找到 <code>.github/workflows</code> 文件夹，如果没有就创建一个，新建一个 <code>sync-2-gitlab.yml</code> 文件，填入下面的内容：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">name: <span class="type">Sync</span></span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [main, hexo]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  sync<span class="operator">-</span><span class="number">2</span><span class="operator">-</span>gitlab:</span><br><span class="line">    runs<span class="operator">-</span>on: ubuntu<span class="operator">-</span>latest</span><br><span class="line">    steps:</span><br><span class="line">      <span class="operator">-</span> name: <span class="type">Sync</span> to <span class="type">Gitlab</span></span><br><span class="line">        uses: wearerequired<span class="operator">/</span>git<span class="operator">-</span>mirror<span class="operator">-</span>action<span class="meta">@master</span></span><br><span class="line">        env:</span><br><span class="line">          # 注意在 <span class="type">Github</span> <span class="type">Settings</span>-&gt;<span class="type">Secrets</span> 配置的 <span class="type">GITLAB</span></span><br><span class="line">          <span class="type">SSH_PRIVATE_KEY</span>: $&#123;&#123; secrets.<span class="type">GITLAB</span> &#125;&#125;</span><br><span class="line">        with:</span><br><span class="line">          # 注意替换为你的 <span class="type">GitHub</span> 源仓库地址</span><br><span class="line">          source<span class="operator">-</span>repo: git<span class="meta">@github</span>.com:fengyanxin<span class="operator">/</span>fengyanxin.github.io.git</span><br><span class="line">          # 注意替换为你的 <span class="type">Gitlab</span> 目标仓库地址</span><br><span class="line">          destination<span class="operator">-</span>repo: git<span class="meta">@gitlab</span>.com:fengyanxin<span class="operator">/</span>fengyanxin.git</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>推送个人项目到 GitHub</li>
</ol>
<p>把文件推送到 github 中，这时应该可以在 github action 看见刚刚的 workflow 在运行了。</p>
<p><img data-src="/GitHub/%E3%80%90GitHub%E3%80%91GitHub-Actions-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/17391789629942.jpg"></p>
<p>以后，项目每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。</p>
<h1 id="五、常见用例"><a href="#五、常见用例" class="headerlink" title="五、常见用例"></a>五、常见用例</h1><p>这里分享几个 GitHub Actions 的常见用例：</p>
<ol>
<li>自动化构建和测试</li>
</ol>
<p><strong>用例描述</strong>：每当代码被推送到仓库或发起 Pull Request 时，自动构建和运行测试。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"> </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"> </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Node.js</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;14&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>发布到 npm</li>
</ol>
<p><strong>用例描述</strong>：当代码合并到主分支时，自动将新版本发布到 npm。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Publish</span> <span class="string">to</span> <span class="string">npm</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br><span class="line"> </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish-npm:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;14&#x27;</span></span><br><span class="line">          <span class="attr">registry-url:</span> <span class="string">&#x27;https://registry.npmjs.org&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">publish</span> <span class="string">--access</span> <span class="string">public</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">NODE_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.NPM_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>部署到 Heroku</li>
</ol>
<p><strong>用例描述</strong>：将应用部署到 Heroku。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Heroku</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"> </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">akhileshns/heroku-deploy@v3.12.12</span> <span class="comment"># 使用特定版本的 action</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">heroku_api_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEROKU_API_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">heroku_app_name:</span> <span class="string">&quot;your-app-name&quot;</span> <span class="comment"># 需要替换为你的 Heroku 应用名</span></span><br><span class="line">        <span class="attr">heroku_email:</span> <span class="string">&quot;your-email@example.com&quot;</span> <span class="comment"># 需要替换为你的 Heroku 邮箱地址</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>自动化 Docker 镜像构建和推送</li>
</ol>
<p><strong>用例描述</strong>：每当代码被推送到仓库时，自动构建 Docker 镜像并推送到 Docker Hub。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Docker</span> <span class="string">Image</span> <span class="string">CI</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"> </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">the</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">.</span> <span class="string">--file</span> <span class="string">Dockerfile</span> <span class="string">--tag</span> <span class="string">my-image-name:$(date</span> <span class="string">+%s)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Log</span> <span class="string">into</span> <span class="string">registry</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; secrets.DOCKER_PASSWORD &#125;&#125;</span>&quot;</span> <span class="string">|</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; secrets.DOCKER_USERNAME &#125;&#125;</span>&quot;</span> <span class="string">--password-stdin</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">the</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">my-image-name:$(date</span> <span class="string">+%s)</span></span><br></pre></td></tr></table></figure>

<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><ol>
<li><a href="https://docs.github.com/cn/actions">GitHub Pages 官方文档</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰的博客</a></li>
</ol>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】Gitlab pages 的使用</title>
    <url>/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>因为自己的博客，有时候访问还是比较慢的，原因是我的代码是在 GitHub 上托管的，众所周知，GitHub 是国外的服务器，在国内访问就是特别慢，然后，我就想是否可以找到国内的既能实现代码托管，又能生成静态网页的平台，来实现 Hexo 双线部署。</p>
<p>于是，我找到了 Coding pages，但是它被腾讯从 Coding 下线了，放到了腾讯云上，开始收费了；然后，我又找到了 Gitee pages，但是它被阿里从 Gitee 下线了，放到了阿里云上，也开始收费了；那该怎么办呢？只能说功夫不负有心人，最后我找到了 Gitlab pages！</p>
</blockquote>
<span id="more"></span>

<h2 id="如何使用-Gitlab-pages"><a href="#如何使用-Gitlab-pages" class="headerlink" title="如何使用 Gitlab pages?"></a>如何使用 Gitlab pages?</h2><h3 id="Gitlab-创建项目"><a href="#Gitlab-创建项目" class="headerlink" title="Gitlab 创建项目"></a>Gitlab 创建项目</h3><p>首先打开 Gitlab 登录：<a href="https://gitlab.com/users/sign_in">GitLab</a> ，这里我没有注册直接使用的是 Github 账号登录。</p>
<p>然后就是先创建一个 Gitlab 的项目了，这里与 github、gitee 都是大同小异，就不多说了。</p>
<h3 id="生成-git-公钥（如果之前有配置，直接跳过）"><a href="#生成-git-公钥（如果之前有配置，直接跳过）" class="headerlink" title="生成 git 公钥（如果之前有配置，直接跳过）"></a>生成 git 公钥（如果之前有配置，直接跳过）</h3><h4 id="1、配置本地用户名及邮箱"><a href="#1、配置本地用户名及邮箱" class="headerlink" title="1、配置本地用户名及邮箱"></a>1、配置本地用户名及邮箱</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># 配置用户名</span><br><span class="line">git config <span class="operator">--</span>global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line"># 配置邮箱</span><br><span class="line">git config <span class="operator">--</span>global user.email <span class="string">&quot;邮箱地址&quot;</span></span><br></pre></td></tr></table></figure>

<p>以上命令执行结束后，可用 <code>git config --global --list</code> 命令查看配置是否成功</p>
<h4 id="2、git生成公钥"><a href="#2、git生成公钥" class="headerlink" title="2、git生成公钥"></a>2、git生成公钥</h4><p>在 终端 窗口输入下面指令即可生成带注释的公钥：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">ssh<span class="operator">-</span>keygen <span class="operator">-</span>t rsa <span class="operator">-</span><span class="type">C</span> &#x27;邮箱地址&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>设置存放公钥的位置，默认的话直接回车键确认</p>
</li>
<li><p>输入密码和确认密码，不设置密码直接按回车键</p>
</li>
</ul>
<h3 id="查看本地-git-公钥"><a href="#查看本地-git-公钥" class="headerlink" title="查看本地 git 公钥"></a>查看本地 git 公钥</h3><p>通过 终端 命令窗口：<br>查看公钥：<code>cat id_rsa.pub</code> 或者 <code>vim id_rsa.pub</code></p>
<p>因为在之前我的电脑上是配置过的，所以直接输入 <code>cat ~/.ssh/id_rsa.pub</code> 即可查看，然后进行配置：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374471576779.jpg"></p>
<h3 id="开启-GitLab-Pages"><a href="#开启-GitLab-Pages" class="headerlink" title="开启 GitLab Pages"></a>开启 GitLab Pages</h3><p>想要开启 GitLab Pages，首先需要将 Github 上的博客文件同步到 Gitlab 项目，然后通过 <code>gitLab ci</code> 触发自动部署，来开启 GitLab Pages。</p>
<h4 id="1、使用-Github-actions-把-github-仓库代码同步到-gitlab-仓库"><a href="#1、使用-Github-actions-把-github-仓库代码同步到-gitlab-仓库" class="headerlink" title="1、使用 Github actions 把 github 仓库代码同步到 gitlab 仓库"></a>1、使用 Github actions 把 github 仓库代码同步到 gitlab 仓库</h4><ul>
<li>gitlab 添加个人令牌（token）</li>
</ul>
<p>在设置中找到 访问令牌、然后添加</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374482702595.jpg"></p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374484172632.jpg"></p>
<ul>
<li>在 Gitlab<br><code>设置-&gt;安全设置-&gt;SSH公钥</code>，标题可以随便起名，值为：<code>id_rsa.pub</code>文件内容：</li>
</ul>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374488054875.jpg"></p>
<ul>
<li>在 Github 项目<br><code>Settings-&gt;Secrets-&gt;Actions</code>，名称为：<code>GITLAB</code>，值为：<code>~/.ssh/</code>目录下<code>id_rsa</code> 文件内容，⚠️注意不是 <code>id_rsa.pub</code>：</li>
</ul>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374486339840.jpg"></p>
<ul>
<li>GitHub 创建 Github workflow</li>
</ul>
<p>在项目根目录下找到 <code>.github/workflows</code> 文件夹，如果没有就创建一个，新建一个 <code>sync-2-gitlab.yml</code>文件，填入下面的内容：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">name: <span class="type">Sync</span></span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [main, hexo]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  sync<span class="operator">-</span><span class="number">2</span><span class="operator">-</span>gitlab:</span><br><span class="line">    runs<span class="operator">-</span>on: ubuntu<span class="operator">-</span>latest</span><br><span class="line">    steps:</span><br><span class="line">      <span class="operator">-</span> name: <span class="type">Sync</span> to <span class="type">Gitlab</span></span><br><span class="line">        uses: wearerequired<span class="operator">/</span>git<span class="operator">-</span>mirror<span class="operator">-</span>action<span class="meta">@master</span></span><br><span class="line">        env:</span><br><span class="line">          # 注意在 <span class="type">Github</span> <span class="type">Settings</span>-&gt;<span class="type">Secrets</span> 配置的 <span class="type">GITLAB</span></span><br><span class="line">          <span class="type">SSH_PRIVATE_KEY</span>: $&#123;&#123; secrets.<span class="type">GITLAB</span> &#125;&#125;</span><br><span class="line">        with:</span><br><span class="line">          # 注意替换为你的 <span class="type">GitHub</span> 源仓库地址</span><br><span class="line">          source<span class="operator">-</span>repo: git<span class="meta">@github</span>.com:fengyanxin<span class="operator">/</span>fengyanxin.github.io.git</span><br><span class="line">          # 注意替换为你的 <span class="type">Gitlab</span> 目标仓库地址</span><br><span class="line">          destination<span class="operator">-</span>repo: git<span class="meta">@gitlab</span>.com:fengyanxin<span class="operator">/</span>fengyanxin.git</span><br></pre></td></tr></table></figure>

<p>保存，并把文件推送到 github 中，这时应该可以在 github action 看见刚刚的 workflow 在运行了。</p>
<p>注意：如果同步到 Gitlab 的 action 运行报错时可以在项目中的 <code>Settings-&gt;Repository-&gt;Protected branches</code>右边的 <code>Expand</code>,把<code>Allowed to force push</code>按钮打开，或者点<code>Unprotect</code> :</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374499679706.jpg"></p>
<h4 id="2、配置-Gitlab-的-ci-文件-gitlab-ci-yml-文件"><a href="#2、配置-Gitlab-的-ci-文件-gitlab-ci-yml-文件" class="headerlink" title="2、配置 Gitlab 的 ci 文件 .gitlab-ci.yml 文件"></a>2、配置 Gitlab 的 ci 文件 .gitlab-ci.yml 文件</h4><p>由于我的这个仓库源码是从 github 项目打包后产出 public 的纯 html 静态资源后，在通过 ci 脚本文件提交到 gitlab 仓库的，所以我这里的脚本内容就可以直接使用纯 html 的脚本</p>
<p>根目录添加 <code>.gitlab-ci.yml</code> 文件（根据自己的实际需求配置对应脚本内容）：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">pages:</span><br><span class="line">  stage: deploy</span><br><span class="line">  script:</span><br><span class="line">    <span class="operator">-</span> mkdir .public</span><br><span class="line">    <span class="operator">-</span> cp <span class="operator">-</span>r <span class="operator">./*</span> .public</span><br><span class="line">    <span class="operator">-</span> rm <span class="operator">-</span>rf <span class="keyword">public</span></span><br><span class="line">    <span class="operator">-</span> mv .public <span class="keyword">public</span></span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      <span class="operator">-</span> <span class="keyword">public</span></span><br><span class="line">  rules:</span><br><span class="line">    <span class="operator">-</span> <span class="keyword">if</span>: <span class="variable">$CI_COMMIT_BRANCH</span> <span class="operator">==</span> <span class="variable">$CI_DEFAULT_BRANCH</span></span><br></pre></td></tr></table></figure>

<p>或者在 Gitlab 项目下添加 CI，文件内容如上，添加完成后会在项目目录下生成一个 <code>.gitlab-ci.yml</code>：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374503143964.jpg"></p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374503426979.jpg"></p>
<h4 id="3、配置-Gitlab-的-pages"><a href="#3、配置-Gitlab-的-pages" class="headerlink" title="3、配置 Gitlab 的 pages"></a>3、配置 Gitlab 的 pages</h4><ul>
<li>上面的 Github 代码同步 和 Gitlab CI 执行完成之后，会在项目中生成一个 Gitlab pages， 如下图：</li>
</ul>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374507141434.jpg"></p>
<ul>
<li>点开 <code>部署 - Pages</code>可以查看：</li>
</ul>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374507888015.jpg"></p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374509003727.jpg"></p>
<ul>
<li>此时，输入 Pages 的域名就可以查看自己的博客了：</li>
</ul>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374511461885.jpg"></p>
<p>至此，Gitlab pages 的部署就完成了！</p>
<p>但是，当我还沉浸在成功的喜悦中的时候，就又 Get 到了一个非常坏的消息。</p>
<h2 id="Gitlab-将不再为中国用户服务"><a href="#Gitlab-将不再为中国用户服务" class="headerlink" title="Gitlab 将不再为中国用户服务"></a>Gitlab 将不再为中国用户服务</h2><p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374514542403.jpg"></p>
<p>近日，GitLab 发布了一则重要通知 <strong>《Important Change to Your GitLab.com Account》</strong>，宣布将不再为位于 <strong>中国大陆、澳门和香港</strong> 的用户提供 <code>GitLab.com</code> 账户服务。该平台建议受影响的用户将账户迁移至 <code>极狐 GitLab（JiHu）</code>，这是由 GitLab 授权的独立公司，专门为这些地区提供本地化服务。</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17403610587765.jpg"></p>
<p>用户必须在 <strong>2025 年 5 月 8 日</strong> 之前完成迁移，之后 GitLab 将从系统中删除帐户。</p>
<p>所以，以后 <code>GitLab.com</code> 就不能用了，只能使用 <code>极狐 GitLab（JiHu）</code>，遗憾的是 <code>极狐 GitLab（JiHu）</code> 也不再提供 Pages功能了！</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Gitlab-pages-%E7%9A%84%E4%BD%BF%E7%94%A8/17374520857005.jpg"></p>
<p>这一顿操作真的是…!!!</p>
<p>博主只能掩面叹息！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】Mac 上使用Hexo + Github搭建个人博客</title>
    <url>/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="【Hexo】Mac-上使用Hexo-Github搭建个人博客"><a href="#【Hexo】Mac-上使用Hexo-Github搭建个人博客" class="headerlink" title="【Hexo】Mac 上使用Hexo + Github搭建个人博客"></a>【Hexo】Mac 上使用Hexo + Github搭建个人博客</h1><h2 id="为什么要用Hexo-Github？"><a href="#为什么要用Hexo-Github？" class="headerlink" title="为什么要用Hexo + Github？"></a>为什么要用Hexo + Github？</h2><h3 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h3><p>Hexo是一款基于Nodejs的，快速、简洁且高效的博客框架。它具有丰富的插件和主题，具有超快的速度，支持Makedown语法，可以方便快捷的编写博客文档。同时还支持node命令，可以一键部署到GitHub Pages, Heroku 或其他平台。更详细的信息可以看一下 <a href="https://hexo.io/zh-cn">Hexo官网</a> 。</p>
<p>值得一提的是，它在github上的<em>star</em>现在已经达到了<a href="https://github.com/hexojs/hexo">36.3k</a>，优不优秀可见一斑。</p>
<span id="more"></span>

<p>Hexo主要有以下特点：</p>
<ol>
<li><p>超快速度：<em>Node.js</em>所带来的超快生成速度，可以让上百个页面在几秒内完成渲染。</p>
</li>
<li><p>支持 <em>Markdown</em>：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p>
</li>
<li><p>一键部署：只需一条指令即可部署到 <em>GitHub Pages, Heroku</em> 或其他平台。</p>
</li>
<li><p>插件或可扩展性：强大的 API 带来无限的可能，与数种模板引擎（<em>EJS，Pug，Nunjucks</em>）和工具（<em>Babel，PostCSS，Less/Sass</em>）轻易集成。</p>
</li>
</ol>
<h3 id="Guthub"><a href="#Guthub" class="headerlink" title="Guthub"></a>Guthub</h3><p>GitHub 那就更不用说了，做程序员的都知道，它是多nice的一个东西。</p>
<p>今天我们要说的主要是它提供的一个功能：<em>GitHub Pages</em> ，GitHub Pages 允许每个账户创建一个名为 {username}.<a href="http://github.io/">http://github.io</a> 的仓库，另外它还会自动为这个仓库分配一个 <a href="http://github.io/">http://github.io</a> 的二级域名，这就为我们搭建个人博客提供了很大的方便，既为我们解决了域名、服务器的问题，又为我们提供了一个稳定且免费的静态站点。</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><ol>
<li>官网下载<br>下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li>
</ol>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778370777438.jpg" alt="16778370777438"></p>
<ol start="2">
<li>使用homebrew安装</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">## 搜索现有node版本</span><br><span class="line">brew search node</span><br><span class="line">## 安装指定版本</span><br><span class="line">brew install node@x</span><br></pre></td></tr></table></figure>
<p>安装完成之后，可以用 <em>npm -v</em> 查询验证，如果不指定版本安装为最新版本</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778374510393.jpg" alt="16778374510393"></p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol>
<li>使用外网下载（相对比较慢）</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用命令去安装Hexo</span></span><br><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更换国内镜像后下载</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用命令安装淘宝镜像：</span></span><br><span class="line">npm install -g cnpm --registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用淘宝源安装Hexo</span></span><br><span class="line">cnpm install -g hexo-cli </span><br></pre></td></tr></table></figure>
<p>安装成功后，可以使用 <em>hexo -v</em> 命令查看一下hexo版本：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778379318597.jpg" alt="16778379318597"></p>
<h2 id="初始化Hexo-Blog"><a href="#初始化Hexo-Blog" class="headerlink" title="初始化Hexo Blog"></a>初始化Hexo Blog</h2><h3 id="新建一个文件夹"><a href="#新建一个文件夹" class="headerlink" title="新建一个文件夹"></a>新建一个文件夹</h3><p>我这里创建一个名为Blogs的文件夹，并进入该文件夹内：</p>
<h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化hexo</span></span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>初始化成功如下：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778382111564.jpg" alt="16778382111564"></p>
<p>这时候Blogs下的目录结构如下：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778382603905.jpg" alt="16778382603905"></p>
<h3 id="本地启动Hexo"><a href="#本地启动Hexo" class="headerlink" title="本地启动Hexo"></a>本地启动Hexo</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 启动Hexo</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778384529301.jpg" alt="16778384529301"></p>
<h3 id="浏览器打开博客网站"><a href="#浏览器打开博客网站" class="headerlink" title="浏览器打开博客网站"></a>浏览器打开博客网站</h3><p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778384888543.jpg" alt="16778384888543"></p>
<h2 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h2><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一篇博客</span></span><br><span class="line">hexo n <span class="string">&quot;first blog&quot;</span></span><br></pre></td></tr></table></figure>

<p>文章在Blogs目录下的结构如下：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778386968316.jpg" alt="16778386968316"></p>
<h3 id="清理项目缓存"><a href="#清理项目缓存" class="headerlink" title="清理项目缓存"></a>清理项目缓存</h3><p>新增博客文章或者修改博客文章内容，需要执行此命令:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清理之前生成的网站</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="重新生成博客"><a href="#重新生成博客" class="headerlink" title="重新生成博客"></a>重新生成博客</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重新生成博客</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h3 id="再次启动项目"><a href="#再次启动项目" class="headerlink" title="再次启动项目"></a>再次启动项目</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 再次启动博客网站</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>浏览器页面展示如下：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778388704782.jpg" alt="16778388704782"></p>
<h2 id="修改网站主题"><a href="#修改网站主题" class="headerlink" title="修改网站主题"></a>修改网站主题</h2><p>Hexo框架默认的是landscape主题，Hexo上有三百多种主题，大家可以上Hexo官网选择自己喜欢的<a href="https://hexo.io/themes/">主题</a>，我这里以next为例：</p>
<h3 id="下载next主题"><a href="#下载next主题" class="headerlink" title="下载next主题"></a>下载next主题</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载next</span></span><br><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778391682864.jpg" alt="16778391682864"></p>
<p>我们下载的主题都存放在Blogs/themes文件夹下：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778392610610.jpg" alt="16778392610610"></p>
<h3 id="修改项目配置文件"><a href="#修改项目配置文件" class="headerlink" title="修改项目配置文件"></a>修改项目配置文件</h3><p>主题下载下来之后，我们需要在项目配置文件_config.yml里面修改我们的主题：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778393394648.jpg" alt="16778393394648"></p>
<p>把默认的landscape修改为我们下载好的主题 next</p>
<h3 id="重新生成项目"><a href="#重新生成项目" class="headerlink" title="重新生成项目"></a>重新生成项目</h3><p>这时候再执行我们Hexo三连：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清理项目缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新生成项目</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地启动项目</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>Tips：重新生成项目和本地启动项目可以合并： <em>hexo g &amp; hexo s</em><br>再次打开项目，效果图如下：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778394696679.jpg" alt="16778394696679"></p>
<p>到这里，我们的主题修改就完成了，后期我们可以根据自己的需要去修改next的配置文件，让我们的博客网站更加个性化。</p>
<p>下一篇文章我将说说如何修改主题让我们的博客网站更具个性化。</p>
<p>关于Hexo搭建博客到这里就讲得差不多了，下面我们就想怎么把博客部署到Github上。</p>
<h2 id="部署博客到Github"><a href="#部署博客到Github" class="headerlink" title="部署博客到Github"></a>部署博客到Github</h2><p>首先，你得要有一个自己的Github账号吧，我相信99.99%的开发者都是有Github账号的，如果你是那0.01%，请前往<a href="https://github.com/">Github</a>自行注册。</p>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>在Github里创建一个存放博客项目的仓库，操作如下：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778397130902.jpg" alt="16778397130902"></p>
<p>这里有几个注意点：</p>
<ol>
<li>仓库的名称必须与你Github账号名相同</li>
<li>仓库必须以gitHub.io结尾（这里我已经创建过了，所以报错）</li>
<li>使用GitHub Pages最好选 <em>Public</em> repo（Private需要付费）</li>
</ol>
<p>比如你Github账号名叫：zhangsan，那你新建的这个仓库名就叫：zhangsan.github.io</p>
<p>创建之后，我们就有了一个存放博客项目仓库：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778399347942.jpg" alt="16778399347942"></p>
<h3 id="安装Hexo部署插件"><a href="#安装Hexo部署插件" class="headerlink" title="安装Hexo部署插件"></a>安装Hexo部署插件</h3><p>进入到Blogs目录下，安装部署插件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">#使用淘宝镜像安装</span><br><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h3 id="修改项目配置文件-1"><a href="#修改项目配置文件-1" class="headerlink" title="修改项目配置文件"></a>修改项目配置文件</h3><p>好了，万事俱备，只欠修改 <em>_config.yml</em> 文件了，打开_config.yml文件，拖拽到最后，修改文件：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778401117276.jpg" alt="16778401117276"></p>
<p>修改为：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778401892146.jpg" alt="16778401892146"></p>
<p>注意：<em>repo</em> 为你刚创建的Github项目的地址，如果你是使用的 <em>vim</em> 打开的 <em>_config.yml</em>，记得修改了要 <em>:wq</em> 保存退出</p>
<h3 id="重新生成项目-1"><a href="#重新生成项目-1" class="headerlink" title="重新生成项目"></a>重新生成项目</h3><p>清理项目缓存：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>重新生成博客：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>部署到云端（Github）:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>注意：这里每次使用 <em>hexo d</em> 部署到Github为了安全都要求输入账号密码，如果你不希望每次都输入账号密码，可以跟博主一样设置Github的 <em>SSH Keys</em>，以后每次发布到Github就不需要输入账号密码了。</p>
<p>访问云端博客主页</p>
<p>访问地址：https://博客仓库名.github.io<br>比如我的博客地址：<a href="https://fengyanxin.github.io/">https://fengyanxin.github.io</a></p>
<p>可以在以下路径查看：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Mac-%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16778403847380.jpg" alt="16778403847380"></p>
<p>最后</p>
<p>基本上到这里，属于我们自己的博客就搭建完成啦，整个搭建流程如果不出错半个小时之内其实是可以搞定的，但是这路哪里那么好走呢，每个人去搭建的过程中或多或少都会遇到一些问题，我自己在搭建的过程中也碰到了一些问题，我会抽空把遇到的问题详细整理出来，希望能够帮助大家如果要搭建博客的时候少踩点坑。</p>
<p>大兄弟，都看到这里了，就不要吝啬你的小星星了，为博主点个赞再走吧～</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】Next 主题的使用与美化</title>
    <url>/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Next 主题是 <a href="https://hexo.io/zh-cn">Hexo</a> 上使用最广，同时在 GitHub 上也是 Star 最多的主题，bug 修复和功能更新也比较快。当前博客就是使用 Hexo 配合 Next 主题搭建的</p>
<h2 id="二、版本"><a href="#二、版本" class="headerlink" title="二、版本"></a>二、版本</h2><p>在 GitHub 上的 <code>Next</code> 的官方文档：<a href="https://github.com/next-theme/hexo-theme-next/issues/4">【必读】更新说明及常见问题</a> 中有相关说明，Next 一共有三个不同的仓库：</p>
<table>
<thead>
<tr>
<th align="center">版本</th>
<th align="center">年份</th>
<th align="center">仓库</th>
</tr>
</thead>
<tbody><tr>
<td align="center">v5.1.4 或更低</td>
<td align="center">2014 ~ 2017</td>
<td align="center"><a href="https://github.com/iissnan/hexo-theme-next">iissnan/hexo-theme-next</a></td>
</tr>
<tr>
<td align="center">v6.0.0 ~ v7.8.0</td>
<td align="center">2018 ~ 2019</td>
<td align="center"><a href="https://github.com/theme-next/hexo-theme-next">theme-next/hexo-theme-next</a></td>
</tr>
<tr>
<td align="center">v8.0.0 或更高</td>
<td align="center">2020</td>
<td align="center"><a href="https://github.com/next-theme/hexo-theme-next">next-theme/hexo-theme-next</a></td>
</tr>
</tbody></table>
<span id="more"></span>

<p>旧的仓库基本上已经不再更新，因此推荐选择最新的 <a href="https://github.com/next-theme/hexo-theme-next">next-theme/hexo-theme-next</a> 仓库的 Next 主题</p>
<p>我所使用的版本如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">hexo: <span class="number">5.4</span>.<span class="number">2</span></span><br><span class="line">next: <span class="number">7.8</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h2><p>推荐使用 GitHub 进行安装，可以随时更新</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">$ cd hexo文件目录</span><br><span class="line">$ git clone https:<span class="comment">//github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>

<p>然后设置站点配置文件 <code>_config.yml</code>:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">$ theme: next</span><br></pre></td></tr></table></figure>

<p>即可将我们的 Hexo 博客主题替换为 Next 主题。</p>
<h2 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h2><h3 id="1、基础配置"><a href="#1、基础配置" class="headerlink" title="1、基础配置"></a>1、基础配置</h3><p>对 Next 主题的配置可以直接在 Hexo 仓库下的配置文件 <code>_config.next.yml</code> 中进行修改即可，该文件的修改会在生成页面时覆盖主题目录下的配置文件 <code>.\themes\next\_config.yml</code></p>
<p>衍生拓展：<a href="https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">【Hexo】配置文件优先级</a></p>
<h4 id="风格-主题"><a href="#风格-主题" class="headerlink" title="风格/主题"></a>风格/主题</h4><p>Next 主题包含了 4 个风格，分别是Muse、Mist、Pisces、Gemini，我个人更喜欢 <strong>Gemini</strong>，这种风格类似卡片，边界感会比较明显，如果加上圆角的话会更为突出</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Schemes</span></span><br><span class="line">#scheme: <span class="type">Muse</span></span><br><span class="line">#scheme: <span class="type">Mist</span></span><br><span class="line">#scheme: <span class="type">Pisces</span></span><br><span class="line">scheme: <span class="type">Gemini</span></span><br></pre></td></tr></table></figure>

<p>修改 <code>_config.next.yml</code> 之后，用 <code>hexo clean; hexo g; hexo s</code> 重新生成一下，就可以在 本地 预览了 <strong>（后续流程如果没有特殊说明则基本一致）</strong></p>
<p>初始 4 种风格效果如下：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/Next%E4%B8%BB%E9%A2%98.jpg"></p>
<p>美化后的 <strong>Gemini</strong> 风格效果如下：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/%E7%BE%8E%E5%8C%96%E7%9A%84Gemini.jpg"></p>
<h4 id="网页图标"><a href="#网页图标" class="headerlink" title="网页图标"></a>网页图标</h4><p>在各类网站上下载合适图标，按照配置文件中的文件名命名，并放在 <code>themes/next/source/images</code> 下即可</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: <span class="operator">/</span>images<span class="operator">/</span>favicon<span class="operator">-</span>16x16<span class="operator">-</span>next.png</span><br><span class="line">  medium: <span class="operator">/</span>images<span class="operator">/</span>favicon<span class="operator">-</span>32x32<span class="operator">-</span>next.png</span><br><span class="line">  apple_touch_icon: <span class="operator">/</span>images<span class="operator">/</span>apple<span class="operator">-</span>touch<span class="operator">-</span>icon<span class="operator">-</span>next.png</span><br><span class="line">  safari_pinned_tab: <span class="operator">/</span>images<span class="operator">/</span>logo.svg</span><br><span class="line">  #android_manifest: <span class="operator">/</span>images<span class="operator">/</span>manifest.json</span><br><span class="line">  #ms_browserconfig: <span class="operator">/</span>images<span class="operator">/</span>browserconfig.xml</span><br></pre></td></tr></table></figure>

<h4 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h4><p>菜单栏配置默认没有开启，我个人开启了 <code>首页、标签、分类、归档、搜索</code> 五个子项目，开启图标，但是没有显示数量</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Usage</span>: `<span class="type">Key</span>: <span class="operator">/</span>link<span class="operator">/</span> <span class="operator">||</span> icon`</span><br><span class="line"># <span class="type">Key</span> <span class="keyword">is</span> the name of menu item. <span class="type">If</span> the translation <span class="keyword">for</span> this item <span class="keyword">is</span> available, the translated text will be loaded, otherwise the <span class="type">Key</span> name will be used. <span class="type">Key</span> <span class="keyword">is</span> <span class="keyword">case</span><span class="operator">-</span>senstive.</span><br><span class="line"># <span class="type">Value</span> before `<span class="operator">||</span>` delimiter <span class="keyword">is</span> the target link, value after `<span class="operator">||</span>` delimiter <span class="keyword">is</span> the name of <span class="type">Font</span> <span class="type">Awesome</span> icon.</span><br><span class="line"># <span class="type">When</span> running the site <span class="keyword">in</span> a subdirectory (e.g. yoursite.com<span class="operator">/</span>blog), remove the leading slash from link value (<span class="operator">/</span>archives -&gt; archives).</span><br><span class="line"># <span class="type">External</span> url should start with http:<span class="comment">// or https://</span></span><br><span class="line">menu:</span><br><span class="line">  home: <span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>home</span><br><span class="line">#  about: <span class="operator">/</span>about<span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>user</span><br><span class="line">  tags: <span class="operator">/</span>tags<span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>tags</span><br><span class="line">  categories: <span class="operator">/</span>categories<span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>th</span><br><span class="line">  archives: <span class="operator">/</span>archives<span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>archive</span><br><span class="line">  #schedule: <span class="operator">/</span>schedule<span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>calendar</span><br><span class="line">  #sitemap: <span class="operator">/</span>sitemap.xml <span class="operator">||</span> fa fa<span class="operator">-</span>sitemap</span><br><span class="line">  #commonweal: <span class="operator">/</span><span class="number">404</span><span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>heartbeat</span><br><span class="line"></span><br><span class="line"># <span class="type">Enable</span> <span class="operator">/</span> <span class="type">Disable</span> menu icons <span class="operator">/</span> item badges.</span><br><span class="line">menu_settings:</span><br><span class="line">  icons: <span class="literal">true</span></span><br><span class="line">  badges: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>系统自动帮我们创建了<code>home</code>和<code>archives</code>页面，所以我们只需要使用终端创建<code>tags</code>和<code>categories</code>页面即可：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">$ cd hexo文件目录</span><br><span class="line">$ hexo new page <span class="string">&quot;tages&quot;</span></span><br><span class="line">$ hexo new page <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>

<p>创建好的页面在站点 sources 中，我们需要对相关页面进行 type 修改，如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">---</span></span><br><span class="line">title: 手把手教你使用<span class="type">Hexo搭建github个人博客</span></span><br><span class="line">date: <span class="number">2019</span><span class="operator">-</span><span class="number">09</span><span class="operator">-</span><span class="number">11</span> <span class="number">19</span>:<span class="number">06</span>:<span class="number">18</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">tags:</span><br><span class="line"><span class="operator">-</span> 工具</span><br><span class="line"><span class="operator">-</span> hexo</span><br><span class="line">categories: </span><br><span class="line"><span class="operator">-</span> 工具</span><br><span class="line"><span class="operator">-</span> hexo</span><br><span class="line"><span class="operator">---</span></span><br></pre></td></tr></table></figure>

<h4 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h4><ol>
<li>安装 <a href="https://github.com/theme-next/hexo-generator-search">hexo-generator-searchdb</a> 插件</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">$ cd 文件目录</span><br><span class="line">$ npm install hexo<span class="operator">-</span>generator<span class="operator">-</span>searchdb <span class="operator">--</span>save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打开站点配置文件 <code>_config.yml</code>，找到<code>Extensions</code>在下面添加:</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打开主题配置文件 <code>themes/next/_config.yml</code>或者<code>_config.next.yml</code>，找到<code>Local search</code>，将<code>enable</code>设置为 <code>true</code></li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Local</span> <span class="type">Search</span></span><br><span class="line"># <span class="type">Dependencies</span>: https:<span class="comment">//github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # <span class="type">If</span> auto, trigger search by changing input.</span><br><span class="line">  # <span class="type">If</span> manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # <span class="type">Show</span> top n results per article, show all results by setting to <span class="operator">-</span><span class="number">1</span></span><br><span class="line">  top_n_per_article: <span class="number">1</span></span><br><span class="line">  # <span class="type">Unescape</span> html strings to the readable one.</span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  # <span class="type">Preload</span> the search data when the page loads.</span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>效果如下：</li>
</ol>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/17370245926708.jpg"></p>
<h4 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h4><p>默认头像会开启旋转功能，花里胡哨的而且旋转有点快，我个人选择了关闭旋转，并且自定义了头像，图片放在 <code>themes/next/source/images</code> 下即可</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Sidebar</span> <span class="type">Avatar</span></span><br><span class="line">avatar:</span><br><span class="line">  # <span class="type">Replace</span> the <span class="keyword">default</span> image and <span class="keyword">set</span> the url here.</span><br><span class="line">#  url: <span class="operator">/</span>images<span class="operator">/</span>avatar.gif</span><br><span class="line">#  url: <span class="operator">/</span>images<span class="operator">/</span>apple<span class="operator">-</span>touch<span class="operator">-</span>icon<span class="operator">-</span>next.png</span><br><span class="line">  url: <span class="operator">/</span>images<span class="operator">/</span>flyingPig.jpeg</span><br><span class="line">  # <span class="type">If</span> <span class="literal">true</span>, the avatar will be dispalyed <span class="keyword">in</span> circle.</span><br><span class="line">  rounded: <span class="literal">true</span></span><br><span class="line">  # <span class="type">If</span> <span class="literal">true</span>, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>在单独的文章页面时侧边栏会默认显示为目录</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Posts</span> <span class="operator">/</span> <span class="type">Categories</span> <span class="operator">/</span> <span class="type">Tags</span> <span class="keyword">in</span> sidebar.</span><br><span class="line">site_state: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="社交网站"><a href="#社交网站" class="headerlink" title="社交网站"></a>社交网站</h4><p>社交网站的主页，官方支持的网站配置起来比较简单，简单替换一下链接，并且取消注释即可；但是若是官方不支持的网站，想要自定义的话，却要费一番功夫</p>
<p>我个人是增加了几个不在官方之列的社交平台，比如<strong>小红书</strong>、<strong>LibLib</strong>等，如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Social</span> <span class="type">Links</span></span><br><span class="line"># <span class="type">Usage</span>: `<span class="type">Key</span>: permalink <span class="operator">||</span> icon`</span><br><span class="line"># <span class="type">Key</span> <span class="keyword">is</span> the link label showing to end users.</span><br><span class="line"># <span class="type">Value</span> before `<span class="operator">||</span>` delimiter <span class="keyword">is</span> the target permalink, value after `<span class="operator">||</span>` delimiter <span class="keyword">is</span> the name of <span class="type">Font</span> <span class="type">Awesome</span> icon.</span><br><span class="line">social:</span><br><span class="line">  <span class="type">GitHub</span>: https:<span class="comment">//github.com/fengyanxin || fab fa-github</span></span><br><span class="line">  <span class="type">E</span><span class="operator">-</span><span class="type">Mail</span>: mailto:ph18317192001@<span class="number">163</span>.com <span class="operator">||</span> fab fa<span class="operator">-</span>mail</span><br><span class="line">  今日头条: https:<span class="comment">//profile.zjurl.cn/rogue/ugc/profile/?user_id=51893718065 || fab fa-jinritoutiao</span></span><br><span class="line">  百家号: https:<span class="comment">//author.baidu.com/home?from=bjh_article&amp;app_id=1665765419554477 || fab fa-baidu</span></span><br><span class="line">  小红书: https:<span class="comment">//www.xiaohongshu.com/user/profile/642cb9650000000011023394 || fab fa-xiaohongshu</span></span><br><span class="line">  <span class="type">LibLib</span>: https:<span class="comment">//www.liblib.art/userpage/c7816525373d4fbca7e45c1940ead98e || fab fa-liblib</span></span><br><span class="line">  #<span class="type">Weibo</span>: https:<span class="comment">//weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  #<span class="type">Google</span>: https:<span class="comment">//plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  #<span class="type">Twitter</span>: https:<span class="comment">//twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  #<span class="type">FB</span> <span class="type">Page</span>: https:<span class="comment">//www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  #<span class="type">StackOverflow</span>: https:<span class="comment">//stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  #<span class="type">YouTube</span>: https:<span class="comment">//youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  #<span class="type">Instagram</span>: https:<span class="comment">//instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  #<span class="type">Skype</span>: skype:yourname<span class="operator">?</span>call<span class="operator">|</span>chat <span class="operator">||</span> fab fa<span class="operator">-</span>skype</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  icons_only: <span class="literal">false</span></span><br><span class="line">  transition: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol>
<li>想要自定义社交平台，可以先去 <a href="https://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a">iconfont</a>，下载一下需要的平台 <strong>SVG</strong> 图标，比如小红书，将图片放在 <code>themes/next/source/images</code>目录下：</li>
</ol>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/17370128583449.jpg"></p>
<ol start="2">
<li>然后找到 <code>themes/next/source/css/main.styl</code> 目录文件，编辑如下：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.fa<span class="operator">-</span>xiaohongshu &#123;</span><br><span class="line">  background<span class="operator">-</span>image: url(&#x27;<span class="operator">/</span>images<span class="operator">/</span>xiaohongshu.svg&#x27;);</span><br><span class="line">  background<span class="operator">-</span>size: 1em <span class="number">1</span>.5em;</span><br><span class="line">  opacity: <span class="number">0.8</span>;</span><br><span class="line">  background<span class="operator">-</span>position: <span class="number">0</span>.1rem <span class="number">0</span>.05rem;</span><br><span class="line">  background<span class="operator">-</span><span class="keyword">repeat</span>: no<span class="operator">-</span><span class="keyword">repeat</span>;</span><br><span class="line">  height: 1rem;</span><br><span class="line">  width: 1rem; </span><br><span class="line">  border<span class="operator">-</span>radius: 0rem;</span><br><span class="line">  <span class="comment">/*鼠标停留在图标上时，图标呈现发光效果*/</span></span><br><span class="line">  <span class="operator">&amp;</span>:hover &#123;</span><br><span class="line">      opacity: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>然后将自定义图片名 <strong>fa-xiaohongshu</strong>，与社交平台关联起来即可：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  小红书: https:<span class="comment">//www.xiaohongshu.com/user/profile/642cb9650000000011023394 || fab fa-xiaohongshu</span></span><br></pre></td></tr></table></figure>

<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>代码块的高亮有很多种配色可以选，并且可以开启一键复制功能</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # <span class="type">Code</span> <span class="type">Highlight</span> theme</span><br><span class="line">  # <span class="type">All</span> available themes: https:<span class="comment">//theme-next.js.org/highlight/</span></span><br><span class="line">  theme:</span><br><span class="line">    light: vs</span><br><span class="line">    dark: vs2015</span><br><span class="line">  prism:</span><br><span class="line">    light: prism</span><br><span class="line">    dark: prism<span class="operator">-</span>dark</span><br><span class="line">  # <span class="type">Add</span> copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: <span class="literal">true</span></span><br><span class="line">    # <span class="type">Available</span> values: <span class="keyword">default</span> <span class="operator">|</span> flat <span class="operator">|</span> mac</span><br><span class="line">    style: <span class="keyword">default</span></span><br></pre></td></tr></table></figure>

<h4 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h4><p>Next 默认开启了动画效果，但是感觉比较慢，感觉有些影响阅读，推荐开启 <code>async</code>，并且适当的修改动画效果</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">motion:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  <span class="keyword">async</span>: <span class="literal">true</span></span><br><span class="line">  transition:</span><br><span class="line">    # <span class="type">Transition</span> variants:</span><br><span class="line">    # fadeIn <span class="operator">|</span> flipXIn <span class="operator">|</span> flipYIn <span class="operator">|</span> flipBounceXIn <span class="operator">|</span> flipBounceYIn</span><br><span class="line">    # swoopIn <span class="operator">|</span> whirlIn <span class="operator">|</span> shrinkIn <span class="operator">|</span> expandIn</span><br><span class="line">    # bounceIn <span class="operator">|</span> bounceUpIn <span class="operator">|</span> bounceDownIn <span class="operator">|</span> bounceLeftIn <span class="operator">|</span> bounceRightIn</span><br><span class="line">    # slideUpIn <span class="operator">|</span> slideDownIn <span class="operator">|</span> slideLeftIn <span class="operator">|</span> slideRightIn</span><br><span class="line">    # slideUpBigIn <span class="operator">|</span> slideDownBigIn <span class="operator">|</span> slideLeftBigIn <span class="operator">|</span> slideRightBigIn</span><br><span class="line">    # perspectiveUpIn <span class="operator">|</span> perspectiveDownIn <span class="operator">|</span> perspectiveLeftIn <span class="operator">|</span> perspectiveRightIn</span><br><span class="line">    post_block: fadeIn</span><br><span class="line">    post_header: slideDownIn</span><br><span class="line">    post_body: slideDownIn</span><br><span class="line">    coll_header: slideLeftIn</span><br><span class="line">    # <span class="type">Only</span> <span class="keyword">for</span> <span class="type">Pisces</span> <span class="operator">|</span> <span class="type">Gemini</span>.</span><br><span class="line">    sidebar: slideUpIn</span><br></pre></td></tr></table></figure>

<h4 id="阅读进度"><a href="#阅读进度" class="headerlink" title="阅读进度"></a>阅读进度</h4><p>阅读进度有两种展示方式，一个在回到首页的按钮上直接显示百分比，另一个可以配置在首位部增加进度条，我个人只开启了一个</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # <span class="type">Back</span> to top <span class="keyword">in</span> sidebar.</span><br><span class="line">  sidebar: <span class="literal">false</span></span><br><span class="line">  # <span class="type">Scroll</span> percent label <span class="keyword">in</span> b2t button.</span><br><span class="line">  scrollpercent: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># <span class="type">Reading</span> progress bar</span><br><span class="line">reading_progress:</span><br><span class="line">  enable: <span class="literal">false</span></span><br><span class="line">  # <span class="type">Available</span> values: top <span class="operator">|</span> bottom</span><br><span class="line">  position: top</span><br><span class="line">  color: <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  height: 3px</span><br></pre></td></tr></table></figure>

<h4 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h4><p>Next 的书签功能可以保存当前的阅读进度，下次打开是会在续接该进度</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Bookmark</span> <span class="type">Support</span></span><br><span class="line">bookmark:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # <span class="type">Customize</span> the color of the bookmark.</span><br><span class="line">  color: <span class="string">&quot;#222&quot;</span></span><br><span class="line">  # <span class="type">If</span> auto, save the reading progress when closing the page or clicking the bookmark<span class="operator">-</span>icon.</span><br><span class="line">  # <span class="type">If</span> manual, only save it by clicking the bookmark<span class="operator">-</span>icon.</span><br><span class="line">  save: auto</span><br></pre></td></tr></table></figure>
<h4 id="右上角github绷带"><a href="#右上角github绷带" class="headerlink" title="右上角github绷带"></a>右上角github绷带</h4><ol>
<li>打开主题配置<code>themes/next/_config.yml</code>或者<code>_config.next.yml</code>，进行相关参数设置：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># `<span class="type">Follow</span> me on <span class="type">GitHub</span>` banner <span class="keyword">in</span> the top<span class="operator">-</span>right corner.</span><br><span class="line">github_banner:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  permalink: https:<span class="comment">//github.com/fengyanxin</span></span><br><span class="line">  title: <span class="type">Follow</span> me on <span class="type">GitHub</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>效果如下：</li>
</ol>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/17370209299074.jpg"></p>
<h4 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h4><p>Mermaid 可以快速的用代码生成简单的流程图、时序图、甘特图等</p>
<p>Next 中开启 Mermaid 支持很方便，同时还有不同的风格可以选</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Mermaid</span> tag</span><br><span class="line">mermaid:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # <span class="type">Available</span> themes: <span class="keyword">default</span> <span class="operator">|</span> dark <span class="operator">|</span> forest <span class="operator">|</span> neutral</span><br><span class="line">  theme:</span><br><span class="line">    light: neutral</span><br><span class="line">    dark: dark</span><br></pre></td></tr></table></figure>

<h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4><p>lazyload 是网站常用的技术，通过按需加载，避免一次性加载过多内容导致的打开缓慢</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Vanilla</span> <span class="type">JavaScript</span> plugin <span class="keyword">for</span> lazyloading images.</span><br><span class="line"># <span class="type">For</span> more information: https:<span class="comment">//apoorv.pro/lozad.js/demo/</span></span><br><span class="line">lazyload: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="fancybox"><a href="#fancybox" class="headerlink" title="fancybox"></a>fancybox</h4><p>fancybox 可以在点击图片时放大该图片，并且可以快速浏览当前文章的所有图片</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">FancyBox</span> <span class="keyword">is</span> a tool that offers a nice and elegant way to add zooming functionality <span class="keyword">for</span> images.</span><br><span class="line"># <span class="type">For</span> more information: https:<span class="comment">//fancyapps.com/fancybox/</span></span><br><span class="line">fancybox: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="pangu"><a href="#pangu" class="headerlink" title="pangu"></a>pangu</h4><p>对于强迫症来说，中英文混排时加上空格能很大程度改善阅读体验，但是有时候会不小心打漏部分空格，而 pangu 这个项目就可以帮你在展示时自动加上空格</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Pangu</span> <span class="type">Support</span></span><br><span class="line"># <span class="type">For</span> more information: https:<span class="comment">//github.com/vinta/pangu.js</span></span><br><span class="line"># <span class="type">Server</span><span class="operator">-</span>side plugin: https:<span class="comment">//github.com/next-theme/hexo-pangu</span></span><br><span class="line">pangu: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h4><p>Next 内置了文章末尾增加版权声明，只需手动开启即可</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Creative</span> <span class="type">Commons</span> <span class="number">4.0</span> <span class="type">International</span> <span class="type">License</span>.</span><br><span class="line"># <span class="type">See</span>: https:<span class="comment">//creativecommons.org/about/cclicenses/</span></span><br><span class="line">creative_commons:</span><br><span class="line">  # <span class="type">Available</span> values: by <span class="operator">|</span> by<span class="operator">-</span>nc <span class="operator">|</span> by<span class="operator">-</span>nc<span class="operator">-</span>nd <span class="operator">|</span> by<span class="operator">-</span>nc<span class="operator">-</span>sa <span class="operator">|</span> by<span class="operator">-</span>nd <span class="operator">|</span> by<span class="operator">-</span>sa <span class="operator">|</span> cc<span class="operator">-</span>zero</span><br><span class="line">  license: by<span class="operator">-</span>nc<span class="operator">-</span>sa</span><br><span class="line">  # <span class="type">Available</span> values: big <span class="operator">|</span> small</span><br><span class="line">  size: small</span><br><span class="line">  sidebar: <span class="literal">false</span></span><br><span class="line">  post: <span class="literal">true</span></span><br><span class="line">  # <span class="type">You</span> can <span class="keyword">set</span> a language value <span class="keyword">if</span> you prefer a translated version of <span class="type">CC</span> license, e.g. deed.zh</span><br><span class="line">  # <span class="type">CC</span> licenses are available <span class="keyword">in</span> <span class="number">39</span> languages, you can find the specific and correct abbreviation you need on https:<span class="comment">//creativecommons.org</span></span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>

<h4 id="不蒜子"><a href="#不蒜子" class="headerlink" title="不蒜子"></a>不蒜子</h4><p><a href="https://busuanzi.ibruce.info/">不蒜子</a> 是一个极简的网页计数器，Next 已经内置，只需打开即可</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># 不蒜子的访客人数和文章阅读统计功能</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: <span class="literal">false</span> # 计数不准，所以关闭</span><br><span class="line">  total_visitors: <span class="literal">false</span>  # 总访问人数</span><br><span class="line">  total_visitors_icon: fa fa<span class="operator">-</span>user</span><br><span class="line">  total_views: <span class="literal">false</span> # 总访问次数</span><br><span class="line">  total_views_icon: fa fa<span class="operator">-</span>eye</span><br><span class="line">  post_views: <span class="literal">true</span> # 文章访问次数 注意：不在首页显示每篇文章的阅读次数，点击全文阅读即显示阅读次数</span><br><span class="line">  post_views_icon: fa fa<span class="operator">-</span>eye</span><br></pre></td></tr></table></figure>

<h4 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h4><p>这个时间将在站点的底部显示，例如 © 2013 - 2015。 编辑 主题配置文件，新增字段 since。</p>
<p>打开主题配置文件<code>themes/next/_config.yml</code>或者<code>_config.next.yml</code>，找到如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # <span class="type">Specify</span> the date when the site was setup. <span class="type">If</span> not defined, current year will be used.</span><br><span class="line">  since: <span class="number">2020</span></span><br></pre></td></tr></table></figure>

<h3 id="2、进阶配置"><a href="#2、进阶配置" class="headerlink" title="2、进阶配置"></a>2、进阶配置</h3><h4 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h4><p>打开主题配置文件<code>themes/next/_config.yml</code>或者<code>_config.next.yml</code>，找到如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Automatically</span> <span class="type">Excerpt</span>. <span class="type">Not</span> recommend.</span><br><span class="line"># <span class="type">Please</span> use <span class="operator">&lt;!--</span> more <span class="operator">--&gt;</span> <span class="keyword">in</span> the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: <span class="literal">false</span></span><br><span class="line">  length: <span class="number">150</span></span><br></pre></td></tr></table></figure>

<p>把这里的 false 改为 true 就可以了在首页启动显示文章预览了， length 是显示预览的长度。</p>
<p>这里我们可以通过在文章使用 <code>&lt;!-- more --&gt;</code> 标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;!--</span>more<span class="operator">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>其后面的部分就不会显示了，只能点击 <strong>阅读全文</strong> 才能看。效果如下：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/17370224998555.jpg"></p>
<p>其他文章相关配置：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="operator">---------------------------------------------------------------</span></span><br><span class="line"># <span class="type">Post</span> <span class="type">Settings</span></span><br><span class="line"># <span class="operator">---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"># <span class="type">Automatically</span> scroll page to section which <span class="keyword">is</span> under <span class="operator">&lt;!--</span> more <span class="operator">--&gt;</span> mark.</span><br><span class="line"># 自动将页面滚动到<span class="operator">&lt;!--</span> more <span class="operator">--&gt;</span>标记下的地方<span class="operator">。</span></span><br><span class="line">scroll_to_more: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># <span class="type">Automatically</span> saving scroll position on each post<span class="operator">/</span>page <span class="keyword">in</span> cookies.</span><br><span class="line"># 自动保存每篇文章或页面上一次滚动的地方<span class="operator">。</span></span><br><span class="line">save_scroll: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># <span class="type">Automatically</span> excerpt description <span class="keyword">in</span> homepage <span class="keyword">as</span> preamble text.</span><br><span class="line"># 自动在首页对文章进行摘要描述作为前言文本<span class="operator">。</span></span><br><span class="line">excerpt_description: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># <span class="type">Automatically</span> <span class="type">Excerpt</span>. <span class="type">Not</span> recommend.</span><br><span class="line"># <span class="type">Please</span> use <span class="operator">&lt;!--</span> more <span class="operator">--&gt;</span> <span class="keyword">in</span> the post to control excerpt accurately.</span><br><span class="line"># 不推荐使用自动摘要<span class="operator">。</span></span><br><span class="line"># 请在文章中使用<span class="operator">&lt;!--</span> more <span class="operator">--&gt;</span>标志来精确控制摘要长度<span class="operator">。</span></span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  length: <span class="number">200</span></span><br><span class="line"></span><br><span class="line"># <span class="type">Post</span> meta display settings</span><br><span class="line"># 文章元数据展示设置</span><br><span class="line">post_meta:</span><br><span class="line">  # 文本显示</span><br><span class="line">  item_text: <span class="literal">true</span></span><br><span class="line">  # 创建时间</span><br><span class="line">  created_at: <span class="literal">true</span></span><br><span class="line">  # 更新时间</span><br><span class="line">  # 这个更新时间有点问题，因为每次重新生成文章<span class="operator">/</span>部署时都会刷新更新时间，不建议使用</span><br><span class="line">  updated_at: <span class="literal">false</span></span><br><span class="line">  # 目录分类</span><br><span class="line">  categories: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># <span class="type">Post</span> wordcount display settings</span><br><span class="line"># <span class="type">Dependencies</span>: https:<span class="comment">//github.com/willin/hexo-wordcount</span></span><br><span class="line"># 文章字数展示设置</span><br><span class="line">post_wordcount:</span><br><span class="line">  # 文本显示</span><br><span class="line">  item_text: <span class="literal">true</span></span><br><span class="line">  # 文章字数统计</span><br><span class="line">  wordcount: <span class="literal">true</span></span><br><span class="line">  # 阅读时长</span><br><span class="line">  min2read: <span class="literal">true</span></span><br><span class="line">  # 站点总字数统计</span><br><span class="line">  totalcount: <span class="literal">true</span></span><br><span class="line">  # 该post_wordcount的所有设置另起一行显示</span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="添加RSS订阅"><a href="#添加RSS订阅" class="headerlink" title="添加RSS订阅"></a>添加RSS订阅</h4><ol>
<li>安装RSS插件</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">$ cd 文件目录</span><br><span class="line">$ npm install <span class="operator">--</span>save hexo<span class="operator">-</span>generator<span class="operator">-</span>feed</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打开站点配置文件 <code>_config.yml</code>，进行相关参数修改：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Extensions</span></span><br><span class="line">## <span class="type">Plugins</span>: http:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line"># feed (<span class="type">RSS订阅</span>)</span><br><span class="line"># <span class="type">Dependencies</span>: https:<span class="comment">//github.com/hexojs/hexo-generator-feed</span></span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: <span class="number">20</span></span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打开主题配置文件 <code>themes/next/_config.yml</code>或者<code>_config.next.yml</code>，进行相关参数修改：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">$ rss: <span class="operator">/</span>atom.xml <span class="comment">//注意：有一个空格</span></span><br></pre></td></tr></table></figure>

<h4 id="增加页面宠物"><a href="#增加页面宠物" class="headerlink" title="增加页面宠物"></a>增加页面宠物</h4><ol>
<li>在站点目录下执行：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">$ npm install <span class="operator">-</span>save hexo<span class="operator">-</span>helper<span class="operator">-</span>live2d</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打开主题配置文件<code>themes/next/_config.yml</code>或者<code>_config.next.yml</code>，添加下列相关参数：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw<span class="operator">/</span></span><br><span class="line">  pluginJsPath: lib<span class="operator">/</span></span><br><span class="line">  pluginModelPath: assets<span class="operator">/</span></span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  log: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d<span class="operator">-</span>widget<span class="operator">-</span>model<span class="operator">-</span>tororo</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: <span class="number">150</span></span><br><span class="line">    height: <span class="number">300</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  react:</span><br><span class="line">    opacity: <span class="number">0.7</span></span><br></pre></td></tr></table></figure>

<h4 id="增加文章结束标志"><a href="#增加文章结束标志" class="headerlink" title="增加文章结束标志"></a>增加文章结束标志</h4><ol>
<li>在路径 <code>/themes/next/layout/_macro</code>文件夹中新建<code>passage-end-tag.swig</code>文件：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切换到路径_macro</span></span><br><span class="line">$ cd [_macro路径]</span><br><span class="line"><span class="comment">//创建passage-end-tag.swig文件</span></span><br><span class="line">$ touch passage<span class="operator">-</span>end<span class="operator">-</span>tag.swig</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打开 <code>passage-end-tag.swig</code>文件，添加以下内容：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>div<span class="operator">&gt;</span></span><br><span class="line">    &#123;<span class="operator">%</span> <span class="keyword">if</span> not is_index <span class="operator">%</span>&#125;</span><br><span class="line">        <span class="operator">&lt;</span>div style<span class="operator">=</span><span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span><span class="operator">&gt;-------------&lt;</span>i <span class="keyword">class</span>=&quot;<span class="title class_">fa</span> <span class="title class_">fa</span>-<span class="title class_">paw</span>&quot;&gt;&lt;/<span class="title class_">i</span>&gt; <span class="title class_">That</span>&#x27;<span class="title class_">s</span> <span class="title class_">all</span>！<span class="title class_">Best</span> <span class="title class_">wishes</span> <span class="title class_">for</span> <span class="title class_">you</span> !!! &lt;<span class="title class_">i</span> <span class="title class_">class</span>=&quot;<span class="title class_">fa</span> <span class="title class_">fa</span>-<span class="title class_">paw</span>&quot;&gt;&lt;/<span class="title class_">i</span>&gt;-------------&lt;/<span class="title class_">div</span>&gt;</span><br><span class="line">    &#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;</span><br><span class="line"><span class="operator">&lt;/</span>div<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打开<code>/themes/next/layout/_macro/post.swig</code>，在<code>post-body</code>之后，<code>post-footer</code>之前，添加以下代码：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>div<span class="operator">&gt;</span></span><br><span class="line">  &#123;<span class="operator">%</span> <span class="keyword">if</span> not is_index <span class="operator">%</span>&#125;</span><br><span class="line">    &#123;<span class="operator">%</span> include &#x27;passage<span class="operator">-</span>end<span class="operator">-</span>tag.swig&#x27; <span class="operator">%</span>&#125;</span><br><span class="line">  &#123;<span class="operator">%</span> endif <span class="operator">%</span>&#125;</span><br><span class="line"><span class="operator">&lt;/</span>div<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>然后打开主题配置文件<code>themes/next/_config.yml</code>或者<code>_config.next.yml</code>,在末尾添加：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>效果如下：</li>
</ol>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/17370182981965.jpg"></p>
<h4 id="自定义头部背景区域"><a href="#自定义头部背景区域" class="headerlink" title="自定义头部背景区域"></a>自定义头部背景区域</h4><p>将图片文件放在 <code>/themes/next/source/images</code> 中，<br>打开 <code>/themes/next/source/css/_schemes/Pisces/_header.styl</code> 目录文件，<br>添加如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">background<span class="operator">-</span>image: url(<span class="operator">/</span>images<span class="operator">/</span>blogHead.jpg);</span><br><span class="line"> <span class="meta">@media</span>(min<span class="operator">-</span>width: 992px)&#123;</span><br><span class="line">    background<span class="operator">-</span>image: url(<span class="operator">/</span>images<span class="operator">/</span>blogHead.jpg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加背景丝带"><a href="#添加背景丝带" class="headerlink" title="添加背景丝带"></a>添加背景丝带</h4><ol>
<li>下载相应的资源包：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">$ git clone https:<span class="comment">//github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在主题配置文件<code>themes/next/_config.yml</code>或者<code>_config.next.yml</code>中，做相关参数修改：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Canvas</span><span class="operator">-</span>nest</span><br><span class="line"># <span class="type">Dependencies</span>: https:<span class="comment">//github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line">canvas_nest: # 网络背景</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  onmobile: <span class="literal">true</span> # display on mobile or not</span><br><span class="line">  color: &#x27;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#x27; # <span class="type">RGB</span> values, use &#x27;,&#x27; to separate</span><br><span class="line">  opacity: <span class="number">0.5</span> # the opacity of line: <span class="number">0</span><span class="operator">~</span><span class="number">1</span></span><br><span class="line">  zIndex: <span class="operator">-</span><span class="number">1</span> # z<span class="operator">-</span>index property of the background</span><br><span class="line">  count: <span class="number">150</span> # the number of lines</span><br><span class="line"></span><br><span class="line"># <span class="type">JavaScript</span> 3D library.</span><br><span class="line"># <span class="type">Dependencies</span>: https:<span class="comment">//github.com/theme-next/theme-next-three</span></span><br><span class="line"># three_waves</span><br><span class="line">three_waves: <span class="literal">false</span></span><br><span class="line"># canvas_lines</span><br><span class="line">canvas_lines: <span class="literal">false</span></span><br><span class="line"># canvas_sphere</span><br><span class="line">canvas_sphere: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># <span class="type">Canvas</span><span class="operator">-</span>ribbon</span><br><span class="line"># <span class="type">Dependencies</span>: https:<span class="comment">//github.com/theme-next/theme-next-canvas-ribbon</span></span><br><span class="line"># size: <span class="type">The</span> width of the ribbon.</span><br><span class="line"># alpha: <span class="type">The</span> transparency of the ribbon.</span><br><span class="line"># zIndex: <span class="type">The</span> display level of the ribbon.</span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: <span class="literal">false</span></span><br><span class="line">  size: <span class="number">300</span></span><br><span class="line">  alpha: <span class="number">0.6</span></span><br><span class="line">  zIndex: <span class="operator">-</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>效果如下：</li>
</ol>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/%E8%83%8C%E6%99%AF%E4%B8%9D%E5%B8%A6.gif"></p>
<h4 id="Valine在线评论"><a href="#Valine在线评论" class="headerlink" title="Valine在线评论"></a>Valine在线评论</h4><ol>
<li>首先要先去 <a href="https://www.leancloud.cn/">LeanCloud</a> 注册一个帐号，然后再创建一个应用，如下：</li>
</ol>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/17370822732228.jpg"></p>
<ol start="2">
<li>拿到应用的 <code>appid</code> 和 <code>appkey</code> 之后，打开 <code>themes/next/_config.yml</code>主题配置文件，查找 <code>valine</code>，填入<code>appid</code>和 <code>appkey</code> ，如下:</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Valine</span></span><br><span class="line"># <span class="type">For</span> more information: https:<span class="comment">//valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"># 评论功能</span><br><span class="line">valine:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  appid: &#x27;&#x27;</span><br><span class="line">  appkey: &#x27;&#x27;</span><br><span class="line">  notify: <span class="literal">true</span> # <span class="type">Mail</span> notifier</span><br><span class="line">  verify: <span class="literal">false</span> # <span class="type">Verification</span> code</span><br><span class="line">  placeholder: &#x27;说点什么吧！&#x27; # <span class="type">Comment</span> box placeholder</span><br><span class="line">  avatar: mm # <span class="type">Gravatar</span> style</span><br><span class="line">  guest_info: nick,mail,link # <span class="type">Custom</span> comment header</span><br><span class="line">  pageSize: <span class="number">10</span> # <span class="type">Pagination</span> size</span><br><span class="line">  language: # <span class="type">Language</span>, available values: en, zh<span class="operator">-</span>cn</span><br><span class="line">  visitor: <span class="literal">true</span> # <span class="type">Article</span> reading statistic</span><br><span class="line">  comment_count: <span class="literal">true</span> # <span class="type">If</span> <span class="literal">false</span>, comment count will only be displayed <span class="keyword">in</span> post page, not <span class="keyword">in</span> home page</span><br><span class="line">  recordIP: <span class="literal">false</span> # <span class="type">Whether</span> to record the commenter <span class="type">IP</span></span><br><span class="line">  serverURLs: # <span class="type">When</span> the custom domain name <span class="keyword">is</span> enabled, fill it <span class="keyword">in</span> here (it will be detected automatically by <span class="keyword">default</span>, no need to fill <span class="keyword">in</span>)</span><br><span class="line">  #post_meta_order: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>效果如下：</li>
</ol>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/17370825991243.jpg"></p>
<h4 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h4><ol>
<li>在站点目录下安装插件：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">$ npm install gulp <span class="operator">-</span>g</span><br><span class="line">$ npm install gulp<span class="operator">-</span>minify<span class="operator">-</span>css gulp<span class="operator">-</span>uglify gulp<span class="operator">-</span>htmlmin gulp<span class="operator">-</span>htmlclean gulp<span class="operator">-</span>imagemin gulp <span class="operator">--</span>save</span><br><span class="line"># 额外安装</span><br><span class="line">$ npm install imagemin<span class="operator">-</span>gifsicle imagemin<span class="operator">-</span>mozjpeg imagemin<span class="operator">-</span>optipng imagemin<span class="operator">-</span>svgo <span class="operator">--</span>save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如下图所示，在站点目录下，新建 <code>gulpfile.js</code> ，并填入以下内容：</li>
</ol>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/17370990019472.jpg"></p>
<ol start="3">
<li>填入以下代码：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp <span class="operator">=</span> require(&#x27;gulp&#x27;);</span><br><span class="line"><span class="keyword">var</span> minifycss <span class="operator">=</span> require(&#x27;gulp<span class="operator">-</span>minify<span class="operator">-</span>css&#x27;);</span><br><span class="line"><span class="keyword">var</span> uglify <span class="operator">=</span> require(&#x27;gulp<span class="operator">-</span>uglify&#x27;);</span><br><span class="line"><span class="keyword">var</span> htmlmin <span class="operator">=</span> require(&#x27;gulp<span class="operator">-</span>htmlmin&#x27;);</span><br><span class="line"><span class="keyword">var</span> htmlclean <span class="operator">=</span> require(&#x27;gulp<span class="operator">-</span>htmlclean&#x27;);</span><br><span class="line"><span class="comment">// var imagemin = require(&#x27;gulp-imagemin&#x27;);</span></span><br><span class="line"><span class="keyword">var</span> imagemin <span class="operator">=</span> <span class="keyword">import</span>(&#x27;gulp-imagemin&#x27;);</span><br><span class="line"><span class="keyword">var</span> imageminGifsicle <span class="operator">=</span> require(&#x27;imagemin<span class="operator">-</span>gifsicle&#x27;);</span><br><span class="line"><span class="keyword">var</span> imageminMozjpeg <span class="operator">=</span> require(&#x27;imagemin<span class="operator">-</span>mozjpeg&#x27;);</span><br><span class="line"><span class="keyword">var</span> imageminOptipng <span class="operator">=</span> require(&#x27;imagemin<span class="operator">-</span>optipng&#x27;);</span><br><span class="line"><span class="keyword">var</span> imageminSvgo <span class="operator">=</span> require(&#x27;imagemin<span class="operator">-</span>svgo&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.task(&#x27;minify<span class="operator">-</span>css&#x27;, function() &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(&#x27;<span class="operator">./</span><span class="keyword">public</span><span class="comment">/**/</span><span class="operator">*</span>.css&#x27;)</span><br><span class="line">  .pipe(minifycss())</span><br><span class="line">  .pipe(gulp.dest(&#x27;<span class="operator">./</span><span class="keyword">public</span>&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩html文件</span></span><br><span class="line">gulp.task(&#x27;minify<span class="operator">-</span>html&#x27;, function() &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(&#x27;<span class="operator">./</span><span class="keyword">public</span><span class="comment">/**/</span><span class="operator">*</span>.html&#x27;)</span><br><span class="line">  .pipe(htmlclean())</span><br><span class="line">  .pipe(htmlmin(&#123;</span><br><span class="line">    removeComments: <span class="literal">true</span>,</span><br><span class="line">    minifyJS: <span class="literal">true</span>,</span><br><span class="line">    minifyCSS: <span class="literal">true</span>,</span><br><span class="line">    minifyURLs: <span class="literal">true</span>,</span><br><span class="line">  &#125;))</span><br><span class="line">  .pipe(gulp.dest(&#x27;<span class="operator">./</span><span class="keyword">public</span>&#x27;))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line">gulp.task(&#x27;minify<span class="operator">-</span>js&#x27;, function() &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([&#x27;<span class="operator">./</span><span class="keyword">public</span><span class="comment">/**/</span>.js&#x27;,&#x27;<span class="operator">!</span><span class="operator">./</span><span class="keyword">public</span><span class="operator">/</span>js<span class="comment">/**/</span><span class="operator">*</span>min.js&#x27;])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#x27;<span class="operator">./</span><span class="keyword">public</span>&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version&lt;3)</span></span><br><span class="line"><span class="comment">// gulp.task(&#x27;minify-images&#x27;, function() &#123;</span></span><br><span class="line"><span class="comment">//    gulp.src(&#x27;./public/images/**/*.*&#x27;)</span></span><br><span class="line"><span class="comment">//        .pipe(imagemin(&#123;</span></span><br><span class="line"><span class="comment">//           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class="line"><span class="comment">//           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line"><span class="comment">//           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line"><span class="comment">//           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line"><span class="comment">//        &#125;))</span></span><br><span class="line"><span class="comment">//        .pipe(gulp.dest(&#x27;./public/uploads&#x27;));</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version&gt;3)</span></span><br><span class="line"><span class="comment">// gulp.task(&#x27;minify-images&#x27;, function (done) &#123;</span></span><br><span class="line"><span class="comment">//    gulp.src(&#x27;./public/images/**/*.*&#x27;)</span></span><br><span class="line"><span class="comment">//        .pipe(imagemin([</span></span><br><span class="line"><span class="comment">//            imageminGifsicle(&#123;interlaced: true&#125;),</span></span><br><span class="line"><span class="comment">//            // imagemin.jpegtran(&#123;progressive: true&#125;),</span></span><br><span class="line"><span class="comment">//            imageminMozjpeg(&#123;progressive: true&#125;),</span></span><br><span class="line"><span class="comment">//            imageminOptipng(&#123;optimizationLevel: 5&#125;),</span></span><br><span class="line"><span class="comment">//            imageminSvgo(&#123;</span></span><br><span class="line"><span class="comment">//                plugins: [</span></span><br><span class="line"><span class="comment">//                    &#123;removeViewBox: true&#125;,</span></span><br><span class="line"><span class="comment">//                    &#123;cleanupIDs: false&#125;</span></span><br><span class="line"><span class="comment">//                ]</span></span><br><span class="line"><span class="comment">//            &#125;)</span></span><br><span class="line"><span class="comment">//        ]))</span></span><br><span class="line"><span class="comment">//        .pipe(gulp.dest(&#x27;./public/images&#x27;));</span></span><br><span class="line"><span class="comment">//    done();</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.0以前的写法 </span></span><br><span class="line"><span class="comment">//gulp.task(&#x27;default&#x27;, [</span></span><br><span class="line"><span class="comment">//  &#x27;minify-html&#x27;, &#x27;minify-css&#x27;, &#x27;minify-js&#x27;, &#x27;minify-images&#x27;</span></span><br><span class="line"><span class="comment">//]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.0以后的写法</span></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(&#x27;<span class="keyword">default</span>&#x27;, gulp.series(gulp.parallel(&#x27;minify<span class="operator">-</span>html&#x27;, &#x27;minify<span class="operator">-</span>css&#x27;, &#x27;minify<span class="operator">-</span>js&#x27;)), function () &#123;</span><br><span class="line">    console.log(<span class="string">&quot;----------gulp Finished----------&quot;</span>);</span><br><span class="line">    <span class="comment">// Do something after a, b, and c are finished.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>然后需要在每次执行 <code>generate</code> 命令后执行<code>gulp</code>就可以实现对静态资源的压缩，完成压缩后执行<code>deploy</code>命令同步到服务器：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Generate</span> blog</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">sleep <span class="number">5</span></span><br><span class="line"></span><br><span class="line">gulp</span><br><span class="line"></span><br><span class="line"># <span class="type">Deploy</span></span><br><span class="line">hexo deploy</span><br><span class="line">sleep <span class="number">5</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这里有一个坑，imagemin 压缩，由于版本原因始终无法执行成功，这里暂时先把它给注了</p>
</blockquote>
<h3 id="3、特殊配置"><a href="#3、特殊配置" class="headerlink" title="3、特殊配置"></a>3、特殊配置</h3><h4 id="捐赠（打赏）"><a href="#捐赠（打赏）" class="headerlink" title="捐赠（打赏）"></a>捐赠（打赏）</h4><p>文章末尾还可以求打赏，需要配置好相应的二维码图片，并且可以修改提示语句</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># <span class="type">Donate</span> (<span class="type">Sponsor</span>) settings</span><br><span class="line"># <span class="type">Front</span><span class="operator">-</span>matter variable (nonsupport animation).</span><br><span class="line">reward_settings:</span><br><span class="line">  # <span class="type">If</span> <span class="literal">true</span>, a donate button will be displayed <span class="keyword">in</span> every article by <span class="keyword">default</span>.</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  animation: <span class="literal">false</span></span><br><span class="line">  comment: 赏个鸡腿🍗</span><br><span class="line"></span><br><span class="line">reward:</span><br><span class="line">  wechatpay: <span class="operator">/</span>images<span class="operator">/</span>wechatpay.png</span><br><span class="line">  alipay: <span class="operator">/</span>images<span class="operator">/</span>alipay.jpg</span><br><span class="line">  #paypal: <span class="operator">/</span>images<span class="operator">/</span>paypal.png</span><br><span class="line">  #bitcoin: <span class="operator">/</span>images<span class="operator">/</span>bitcoin.png</span><br></pre></td></tr></table></figure>

<h4 id="公益404"><a href="#公益404" class="headerlink" title="公益404"></a>公益404</h4><ol>
<li>在主题配置文件<code>themes/next/_config.yml</code>或者<code>_config.next.yml</code>中，搜索 <code>menu</code> 关键字，取消 <code>commonweal</code> 前的 # 注释。</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: <span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>home</span><br><span class="line">#  about: <span class="operator">/</span>about<span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>user</span><br><span class="line">  tags: <span class="operator">/</span>tags<span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>tags</span><br><span class="line">  categories: <span class="operator">/</span>categories<span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>th</span><br><span class="line">  archives: <span class="operator">/</span>archives<span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>archive</span><br><span class="line">  #schedule: <span class="operator">/</span>schedule<span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>calendar</span><br><span class="line">  #sitemap: <span class="operator">/</span>sitemap.xml <span class="operator">||</span> fa fa<span class="operator">-</span>sitemap</span><br><span class="line">  commonweal: <span class="operator">/</span><span class="number">404</span><span class="operator">/</span> <span class="operator">||</span> fa fa<span class="operator">-</span>heartbeat</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 source 文件夹下新建 <code>404.html</code> 文件，复制粘贴以下代码，记得把<code>homePageUrl</code>改为自己主页的域名：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;!</span><span class="type">DOCTYPE</span> html<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>html lang<span class="operator">=</span><span class="string">&quot;en&quot;</span><span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;</span>head<span class="operator">&gt;</span></span><br><span class="line">		<span class="operator">&lt;</span>meta charset<span class="operator">=</span><span class="string">&quot;UTF-8&quot;</span><span class="operator">&gt;</span></span><br><span class="line">		<span class="operator">&lt;</span>title<span class="operator">&gt;</span><span class="number">404</span><span class="operator">&lt;/</span>title<span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;/</span>head<span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;</span>body<span class="operator">&gt;</span></span><br><span class="line">		<span class="operator">&lt;</span>script type<span class="operator">=</span><span class="string">&quot;text/javascript&quot;</span> 			  src<span class="operator">=</span><span class="string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> charset<span class="operator">=</span><span class="string">&quot;utf-8&quot;</span><span class="operator">&gt;</span></span><br><span class="line">		<span class="operator">&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;/</span>body<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;/</span>html<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在站点根目录下，输入 <code>hexo new page 404</code>，在默认 Hexo 站点下 <code>/source/404/index.md</code> 打开新建的404界面，编辑属于自己的404界面，可以显示腾讯公益404界面，代码如下:</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">---</span></span><br><span class="line">title: <span class="number">404</span>，页面不见了？<span class="type">TA也不见了！</span></span><br><span class="line">date: <span class="number">2025</span><span class="operator">-</span><span class="number">01</span><span class="operator">-</span><span class="number">17</span> <span class="number">09</span>:<span class="number">40</span>:<span class="number">30</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">permalink: <span class="operator">/</span><span class="number">404</span>.html</span><br><span class="line"><span class="operator">---</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;!</span><span class="type">DOCTYPE</span> html<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>html lang<span class="operator">=</span><span class="string">&quot;en&quot;</span><span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;</span>head<span class="operator">&gt;</span></span><br><span class="line">		<span class="operator">&lt;</span>meta charset<span class="operator">=</span><span class="string">&quot;UTF-8&quot;</span><span class="operator">&gt;</span></span><br><span class="line">		<span class="operator">&lt;</span>title<span class="operator">&gt;</span><span class="number">404</span><span class="operator">&lt;/</span>title<span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;/</span>head<span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;</span>body<span class="operator">&gt;</span></span><br><span class="line">		<span class="operator">&lt;</span>script type<span class="operator">=</span><span class="string">&quot;text/javascript&quot;</span> 			  src<span class="operator">=</span><span class="string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> charset<span class="operator">=</span><span class="string">&quot;utf-8&quot;</span><span class="operator">&gt;</span></span><br><span class="line">		<span class="operator">&lt;/</span>script<span class="operator">&gt;</span></span><br><span class="line">	<span class="operator">&lt;/</span>body<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;/</span>html<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>效果如下：<br><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/17370818231816.jpg"></li>
</ol>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/17370817394824.jpg"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】如何将博客源码上传到GitHub</title>
    <url>/Hexo/%E3%80%90Hexo%E3%80%91%E5%A6%82%E4%BD%95%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/</url>
    <content><![CDATA[<h1 id="如何将博客源码上传到-GitHub"><a href="#如何将博客源码上传到-GitHub" class="headerlink" title="如何将博客源码上传到 GitHub"></a>如何将博客源码上传到 GitHub</h1><h2 id="一、为什么要把博客源码上传到-GitHub-？"><a href="#一、为什么要把博客源码上传到-GitHub-？" class="headerlink" title="一、为什么要把博客源码上传到 GitHub ？"></a>一、为什么要把博客源码上传到 GitHub ？</h2><p>首先，该操作不是使用 hexo 所必须的，但是，这么做却可以让以下问题迎刃而解：</p>
<ul>
<li>多台电脑同时操作 hexo 源码</li>
<li>原先 hexo 源码所在电脑重装系统（丢失文件）</li>
<li>要将 hexo 源码移动到其他磁盘（更换电脑）</li>
</ul>
<span id="more"></span>

<p>将 hexo 源码上传到 GitHub，就是做了一个稳定、安全的远程备份，遇到上面的情况将不会再是什么问题。</p>
<p>因为，之前在 GitHub 上的部署（使用 <code>hexo d</code> 上传部署到github）其实是 hexo 编译后的文件，是用来生成网页的，不包含所有 hexo 生成的网站原始文件。只有把源码也上传才能解决问题。</p>
<h2 id="二、如何上传博客源码？"><a href="#二、如何上传博客源码？" class="headerlink" title="二、如何上传博客源码？"></a>二、如何上传博客源码？</h2><h3 id="1、思路分析"><a href="#1、思路分析" class="headerlink" title="1、思路分析"></a>1、思路分析</h3><ul>
<li><p><code>main</code>（<code>master</code>） 分支：存放博客的静态网页。</p>
</li>
<li><p><code>hexo</code>分支：存放 Hexo 博客的源码文件。</p>
</li>
</ul>
<h3 id="2、hexo-分支创建及管理"><a href="#2、hexo-分支创建及管理" class="headerlink" title="2、hexo 分支创建及管理"></a>2、hexo 分支创建及管理</h3><h4 id="（1）github-准备"><a href="#（1）github-准备" class="headerlink" title="（1）github 准备"></a>（1）github 准备</h4><p>先在 GitHub 项目创建一个远程分支 <code>hexo</code></p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E5%A6%82%E4%BD%95%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/16787834628307.jpg"></p>
<p>将其设置为默认分支</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E5%A6%82%E4%BD%95%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/16787836604366.jpg"></p>
<h4 id="2-打包将要推送到GitHub上的原始文件"><a href="#2-打包将要推送到GitHub上的原始文件" class="headerlink" title="(2) 打包将要推送到GitHub上的原始文件"></a>(2) 打包将要推送到GitHub上的原始文件</h4><ol>
<li>clone该仓库到本地（clone的是hexo默认分支）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git clone git@github.<span class="property">com</span>:fengyanxin/fengyanxin.<span class="property">github</span>.<span class="property">io</span>.<span class="property">git</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>下载的文件夹里仅留下 <code>.git</code> 文件夹，其他的文件都删除</p>
</li>
<li><p>找见我们 hexo 原位置，将 hexo 文件夹内除 <code>.deploy_git</code> 以外都复制到clone下来的文件夹中</p>
</li>
<li><p>修改 <code>.gitignore</code> 文件，将静态网页的目录及其他无需提交的源文件及目录排除掉。(没有即新建添加)</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="property">DS_Store</span></span><br><span class="line"><span class="title class_">Thumbs</span>.<span class="property">db</span></span><br><span class="line">db.<span class="property">json</span></span><br><span class="line">*.<span class="property">log</span></span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.<span class="property">deploy</span>*/</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>如果已经 clone 过主题文件，最好把 theme 主题文件夹里的 <code>.git</code> 也删除</li>
</ol>
<h4 id="3-将-clone-并修改的文件夹推送到-GitHub"><a href="#3-将-clone-并修改的文件夹推送到-GitHub" class="headerlink" title="(3) 将 clone 并修改的文件夹推送到 GitHub"></a>(3) 将 clone 并修改的文件夹推送到 GitHub</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;Code update&#x27;</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>

<h3 id="3、main-master-分支管理"><a href="#3、main-master-分支管理" class="headerlink" title="3、main (master) 分支管理"></a>3、main (master) 分支管理</h3><p>进入<strong>站点配置文件</strong>，搜索 <code>deploy</code>关键词，修改如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">  <span class="attr">type</span>: git</span><br><span class="line">  <span class="attr">repo</span>: git@github.<span class="property">com</span>:fengyanxin/fengyanxin.<span class="property">github</span>.<span class="property">io</span>.<span class="property">git</span></span><br><span class="line">  <span class="attr">branch</span>: main</span><br></pre></td></tr></table></figure>

<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E5%A6%82%E4%BD%95%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/16787847648363.jpg"></p>
<p>修改完成，执行以下代码进行管理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清除本地旧代码。</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment">//生成静态网站</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment">//部署静态网站到 GitHub 的 main(master) 分支上</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h3 id="4、统一分支管理和部署"><a href="#4、统一分支管理和部署" class="headerlink" title="4、统一分支管理和部署"></a>4、统一分支管理和部署</h3><p>利用我上一篇文章讲到的 <code>deploy.sh</code>脚本进行一键部署，可以极大提高部署效率和降低维护成本。</p>
<p>在 <code>deploy.sh</code> 文件中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#!<span class="regexp">/bin/</span>bash</span><br><span class="line"><span class="variable constant_">DIR</span>=<span class="string">`dirname $0`</span></span><br><span class="line"></span><br><span class="line"># <span class="title class_">Generate</span> blog</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">sleep <span class="number">5</span></span><br><span class="line"></span><br><span class="line"># <span class="title class_">Deploy</span></span><br><span class="line">hexo deploy</span><br><span class="line">sleep <span class="number">5</span></span><br><span class="line"></span><br><span class="line"># <span class="title class_">Push</span> hexo code</span><br><span class="line">git add .</span><br><span class="line">current_date=<span class="string">`date &quot;+%Y-%m-%d %H:%M:%S&quot;`</span></span><br><span class="line">git commit -m <span class="string">&quot;Blog updated: $current_date&quot;</span></span><br><span class="line"></span><br><span class="line">sleep <span class="number">2</span></span><br><span class="line"></span><br><span class="line">git push origin hexo</span><br><span class="line"></span><br><span class="line">echo <span class="string">&quot;=====&gt;Finish!&lt;=====&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后附加脚本执行权限:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chmod +x deploy.<span class="property">sh</span></span><br></pre></td></tr></table></figure>

<p>然后执行即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">./deploy.<span class="property">sh</span></span><br></pre></td></tr></table></figure>

<p>如此，便可以一键部署博客及备份博客源码到 github 的分支 <code>hexo</code> 分支上。</p>
<h3 id="5、其他电脑源码使用"><a href="#5、其他电脑源码使用" class="headerlink" title="5、其他电脑源码使用"></a>5、其他电脑源码使用</h3><p>换到不同电脑上时，只需clone github 上的 hexo 分支即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git clone git@github.<span class="property">com</span>:fengyanxin/fengyanxin.<span class="property">github</span>.<span class="property">io</span>.<span class="property">git</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】添加 .sh 脚本文件，快速测试和部署</title>
    <url>/Hexo/%E3%80%90Hexo%E3%80%91%E6%B7%BB%E5%8A%A0-sh-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E5%92%8C%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="添加-sh-脚本文件，快速测试和部署"><a href="#添加-sh-脚本文件，快速测试和部署" class="headerlink" title="添加 .sh 脚本文件，快速测试和部署"></a>添加 .sh 脚本文件，快速测试和部署</h1><h2 id="一、创建-sh-脚本文件"><a href="#一、创建-sh-脚本文件" class="headerlink" title="一、创建 .sh 脚本文件"></a>一、创建 .sh 脚本文件</h2><h3 id="1-启动-Sublime-Test"><a href="#1-启动-Sublime-Test" class="headerlink" title="1.启动 Sublime Test"></a>1.启动 Sublime Test</h3><p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E6%B7%BB%E5%8A%A0-sh-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E5%92%8C%E9%83%A8%E7%BD%B2/16787755102992.jpg"></p>
<span id="more"></span>

<h3 id="2-打开的-Sublime-Test"><a href="#2-打开的-Sublime-Test" class="headerlink" title="2.打开的 Sublime Test"></a>2.打开的 Sublime Test</h3><p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E6%B7%BB%E5%8A%A0-sh-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E5%92%8C%E9%83%A8%E7%BD%B2/16787755213456.jpg"></p>
<h3 id="3-写入或者复制进去脚本代码"><a href="#3-写入或者复制进去脚本代码" class="headerlink" title="3.写入或者复制进去脚本代码"></a>3.写入或者复制进去脚本代码</h3><p>此处以 Hexo localhost 测试为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E6%B7%BB%E5%8A%A0-sh-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E5%92%8C%E9%83%A8%E7%BD%B2/16787755345365.jpg"></p>
<h3 id="4-另存为-sh-文件，导入-hexo-文件夹"><a href="#4-另存为-sh-文件，导入-hexo-文件夹" class="headerlink" title="4.另存为 .sh 文件，导入 hexo 文件夹"></a>4.另存为 .sh 文件，导入 hexo 文件夹</h3><p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E6%B7%BB%E5%8A%A0-sh-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E5%92%8C%E9%83%A8%E7%BD%B2/16787755472530.jpg"></p>
<h2 id="二、赋予脚本可执行权限"><a href="#二、赋予脚本可执行权限" class="headerlink" title="二、赋予脚本可执行权限"></a>二、赋予脚本可执行权限</h2><h3 id="1-cd到编写的-sh-文件所在目录"><a href="#1-cd到编写的-sh-文件所在目录" class="headerlink" title="1.cd到编写的 .sh 文件所在目录"></a>1.cd到编写的 .sh 文件所在目录</h3><p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E6%B7%BB%E5%8A%A0-sh-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E5%92%8C%E9%83%A8%E7%BD%B2/16787755599104.jpg"></p>
<h3 id="2-执行-chmod-x-指令"><a href="#2-执行-chmod-x-指令" class="headerlink" title="2.执行 chmod +x 指令"></a>2.执行 chmod +x 指令</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chmod +x localhost.<span class="property">sh</span></span><br></pre></td></tr></table></figure>

<h3 id="3-执行脚本"><a href="#3-执行脚本" class="headerlink" title="3.执行脚本"></a>3.执行脚本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">./localhost.<span class="property">sh</span></span><br></pre></td></tr></table></figure>

<p>至此，localhost 测试脚本就完成了，部署脚本同理，在文件夹下新建一个 <code>deploy.sh</code> 文件，在其中输入以下代码即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>当然，添加其他助力 Hexo 快速执行的脚本亦可。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】踩坑记录</title>
    <url>/Hexo/%E3%80%90Hexo%E3%80%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="一、控制台打印-no-src-attr-skipped…"><a href="#一、控制台打印-no-src-attr-skipped…" class="headerlink" title="一、控制台打印 no src attr, skipped…"></a>一、控制台打印 no src attr, skipped…</h2><p>原因：这是因为 <code>hexo-asset-image</code>插件没有捕捉到图片<code>src</code></p>
<p>解决：打开 <code>hexo/node_modules/hexo-asset-image/index.js</code>，定位到相应代码:</p>
<span id="more"></span>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">$(&#x27;img&#x27;).each(function()&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(this).attr(&#x27;src&#x27;))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src <span class="operator">=</span> $(this).attr(&#x27;src&#x27;).replace(&#x27;\\&#x27;, &#x27;<span class="operator">/</span>&#x27;);</span><br><span class="line">            <span class="keyword">if</span>(<span class="operator">!/</span>http[s]<span class="operator">*</span><span class="operator">.*|</span>\<span class="operator">/</span>\<span class="operator">/</span><span class="operator">.*/.</span>test(src) <span class="operator">&amp;&amp;</span></span><br><span class="line">               <span class="operator">!/^</span>\s<span class="operator">*</span>\<span class="comment">//.test(src)) &#123;</span></span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray <span class="operator">=</span> link.split(&#x27;<span class="operator">/</span>&#x27;).filter(function(elem)&#123;</span><br><span class="line">                <span class="keyword">return</span> elem <span class="operator">!=</span> &#x27;&#x27;;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray <span class="operator">=</span> src.split(&#x27;<span class="operator">/</span>&#x27;).filter(function(elem)&#123;</span><br><span class="line">                <span class="keyword">return</span> elem <span class="operator">!=</span> &#x27;&#x27; <span class="operator">&amp;&amp;</span> elem <span class="operator">!=</span> &#x27;.&#x27;;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length <span class="operator">&gt;</span> <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src <span class="operator">=</span> srcArray.join(&#x27;<span class="operator">/</span>&#x27;);</span><br><span class="line">              $(this).attr(&#x27;src&#x27;, config.root <span class="operator">+</span> link <span class="operator">+</span> src);</span><br><span class="line">              console.info<span class="operator">&amp;&amp;</span>console.info(<span class="string">&quot;update link as:--&gt;&quot;</span><span class="operator">+</span>config.root <span class="operator">+</span> link <span class="operator">+</span> src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            console.info<span class="operator">&amp;&amp;</span>console.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            console.info<span class="operator">&amp;&amp;</span>console.info($(this));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>

<p>可以看到 <code>if ($(this).attr(&#39;src&#39;))&#123;&#125;</code>，</p>
<p>再看控制台输出的 <code>this</code>:</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/17370984380125.jpg"></p>
<p>可以看到这里的路径是 <code>data-src</code>，所以，</p>
<p>所以，把上面代码块的 <code>src</code>全都替换成<code>data-src</code>即可。</p>
<h2 id="二、Coding-中的-Pages-不见了！"><a href="#二、Coding-中的-Pages-不见了！" class="headerlink" title="二、Coding 中的 Pages 不见了！"></a>二、Coding 中的 Pages 不见了！</h2><h3 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h3><blockquote>
<p>因为自己的这个博客，有时候访问还是比较慢的，原因是我的代码是在 GitHub 上托管的，GitHub 是国外的网站，服务器都在国外，所以访问速度就特别慢，我就想找国内的既能实现代码托管，又能生成静态网页的平台，可以实现 Hexo 的双线部署，即本地提交代码可以分别上传到不同的平台，当然肯定要支持 git</p>
</blockquote>
<blockquote>
<p>为了实现这个功能，所以就在网上找相关的文章，然后发现说的比较多的是 Hexo 双线部署到 Coding Pages 和 GitHub Pages 从而实现网站加速，也就是说从国内访问的话，是走 Coding ，从国外访问的话是走 GitHub ，从而可以提高网站的访问速率</p>
</blockquote>
<h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><blockquote>
<p>于是我就开始动手实验，开始注册 Coding 账号，登录，进去之后和 GitHub 的流程一样，创建一个项目，绑定我的 ssh，把项目地址的 ssh 地址复制到我的博客里面，经过实验发现可以通过 git，一次性分别上传到 GitHub 和 Coding 上。等我去 Coding 上准备打开 Coding pages 时，却发现我根本找不到 Coding 的静态网页服务功能了，前前后后找了好几遍，在百度上跟着他们说的找，找了半天也没找到，他们的文章都是19，20年的，Coding经过更新界面都变得不太一样了，这让我不得不怀疑是不是没有这个功能了。</p>
</blockquote>
<h3 id="找到的原因是（官方说法）"><a href="#找到的原因是（官方说法）" class="headerlink" title="找到的原因是（官方说法）"></a>找到的原因是（官方说法）</h3><h4 id="旧版直接关服"><a href="#旧版直接关服" class="headerlink" title="旧版直接关服"></a>旧版直接关服</h4><blockquote>
<p>因 CODING 产品战略调整，您的 Mercury233 的团队 团队正在使用的 CODING 网站托管服务（旧版），将于 2021 年 12 月 30 日停止服务，届时您项目下的网站将无法访问。项目源码依然保留在您的 CODING 代码仓库中，可部署于其他第三方服务，请尽快迁移您的网站以免受到影响。</p>
</blockquote>
<h4 id="新版移到腾讯云-Serverless"><a href="#新版移到腾讯云-Serverless" class="headerlink" title="新版移到腾讯云 Serverless"></a>新版移到腾讯云 Serverless</h4><blockquote>
<p>因 CODING 产品战略调整，CODING 将于即日起，停止提供网站托管服务中的「新建站点」服务； 2021 年 12 月 23 日后将停止已有站点的编辑、部署功能，并于 2021 年 12 月 30 日停止提供「网站托管」服务的使用入口。此后，您的 Mercury233 的团队 团队下的 xxx 项目托管的网站，需在腾讯云 Serverless 控制台进行域名配置、部署等操作及管理，详情请参考——</p>
</blockquote>
<p>也就是说免费的 Coding 静态页面不见了，想用的话得花钱，这真是一个腾讯的巨坑！</p>
<p>此刻，笔者只想说：腾讯，我劝你善良！</p>
<h2 id="三、Github-同步仓库代码到-Gitlab-的-Action-报错"><a href="#三、Github-同步仓库代码到-Gitlab-的-Action-报错" class="headerlink" title="三、Github 同步仓库代码到 Gitlab 的 Action 报错"></a>三、Github 同步仓库代码到 Gitlab 的 Action 报错</h2><p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/17375152368458.jpg"></p>
<p><code>sync-2-gitlab.yml</code> Action 脚本报错：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">WARNING</span>: <span class="type">StrictHostKeyChecking</span> disabled</span><br><span class="line"><span class="type">SOURCE</span><span class="operator">=</span>ssh:<span class="comment">//git@github.com:fengyanxin/fengyanxin.github.io.git</span></span><br><span class="line"><span class="type">DESTINATION</span><span class="operator">=</span>git<span class="meta">@gitlab</span>.com:fengyanxin<span class="operator">/</span>fengyanxin.git</span><br><span class="line"><span class="type">DRY</span> <span class="type">RUN</span><span class="operator">=</span><span class="literal">false</span></span><br><span class="line"><span class="type">Cloning</span> into bare repository &#x27;fengyanxin.github.io.git&#x27;<span class="operator">...</span></span><br><span class="line">ssh: <span class="type">Could</span> not resolve hostname github.com:fengyanxin: <span class="type">Name</span> does not resolve</span><br><span class="line">fatal: <span class="type">Could</span> not read from remote repository.</span><br><span class="line"></span><br><span class="line"><span class="type">Please</span> make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">fatal: not a git repository (or <span class="keyword">any</span> parent up to mount point <span class="operator">/</span>github)</span><br><span class="line"><span class="type">Stopping</span> at filesystem boundary (<span class="type">GIT_DISCOVERY_ACROSS_FILESYSTEM</span> not <span class="keyword">set</span>).</span><br></pre></td></tr></table></figure>

<p>原因：SSH 校验出错，在 Github 项目<br><code>Settings-&gt;Secrets-&gt;Actions</code>，设置的 <code>Repository secrets</code>错了</p>
<p>解决：这里的值是 <code>~/.ssh/</code> 目录下 <code>id_rsa</code> 文件内容，而不是 <code>id_rsa.pub</code>，我之前用的是 <code>id_rsa.pub</code>内容，所以报错了</p>
<p>成功结果如下：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/17375156102164.jpg"></p>
<h2 id="四、GitLab-Pages-页面阅读次数不显示"><a href="#四、GitLab-Pages-页面阅读次数不显示" class="headerlink" title="四、GitLab Pages 页面阅读次数不显示"></a>四、GitLab Pages 页面阅读次数不显示</h2><p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/17392522637673.jpg"></p>
<p>现象：将博客在 GitLab Pages 上发布，阅读次数不显示了，GitHub Pages 正常显示</p>
<p>原因：GitLab Pages 是新发布的，<a href="https://www.leancloud.cn/">Leancloud</a> 上没有添加相应域名</p>
<p>解决：在 Leancloud 的应用设置中，添加 GitLab Pages 域名即可，如下图：</p>
<p><img data-src="/Hexo/%E3%80%90Hexo%E3%80%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/17392527665652.jpg"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【OC】方法拦截器：如何 hook 三方 SDK 中的方法?</title>
    <url>/iOS/%E3%80%90OC%E3%80%91%E6%96%B9%E6%B3%95%E6%8B%A6%E6%88%AA%E5%99%A8%EF%BC%9A%E5%A6%82%E4%BD%95-hook-%E4%B8%89%E6%96%B9-SDK-%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、前因"><a href="#一、前因" class="headerlink" title="一、前因"></a>一、前因</h2><p>缘由：项目中使用 <code>Pod</code> 集成了一个三方的远端SDK，这个SDK中的某个类遵循了一个代理协议，这个代理中有很多方法实现。现在的需求是，我在使用这个SDK的类时，只想实现代理方法中的其中一个方法，而不想把所有方法都实现一遍，而且也没办法全部实现。但是，我如果在引用类中遵循代理，就得把所有方法都实现一遍，这显然不现实；如果只实现固定方法，其他方法就会失效，这也不行。</p>
<span id="more"></span>

<p>所以，我就有了一个想法：<strong>不遵循代理，只是对需要实现的方法进行监听，在其执行时，不执行原有方法流程，转而执行自定义方法。</strong></p>
<p>这个思路显然是可行的，接下来就是如何把这个方法 <code>hook</code> 出来的问题。</p>
<h2 id="二、后果"><a href="#二、后果" class="headerlink" title="二、后果"></a>二、后果</h2><p>有了思路，剩下的就是验证思路和解决问题，经过一段时间的思考和查阅资料，就有了如下结果和方案：</p>
<h3 id="1、初版：对三方源码有入侵"><a href="#1、初版：对三方源码有入侵" class="headerlink" title="1、初版：对三方源码有入侵"></a>1、初版：对三方源码有入侵</h3><p>这个方案，对三方源码有一定的入侵，但是因为入侵较小，所以决定尝试一下。</p>
<p>创建一个 <code>NSObject</code>的 <code>Category</code>，为什么会选择 <code>NSObject</code>，因为他是所有对象类的基类，注册监听方法时更为方便和通用。</p>
<h4 id="NSObject-SRModuleAuthorization-h"><a href="#NSObject-SRModuleAuthorization-h" class="headerlink" title="NSObject+SRModuleAuthorization.h"></a>NSObject+SRModuleAuthorization.h</h4><p>在 <code>NSObject+SRModuleAuthorization.h</code> 实现代码如下:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> <span class="type">NSObject</span> (<span class="type">SRModuleAuthorization</span>)</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> (void)registerNeedMonitorSEL:(<span class="type">SEL</span>)sel;</span><br><span class="line"></span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure>

<p><code>.h</code> 只对外暴露一个注册需要被监听方法的API。</p>
<h4 id="NSObject-SRModuleAuthorization-m"><a href="#NSObject-SRModuleAuthorization-m" class="headerlink" title="NSObject+SRModuleAuthorization.m"></a>NSObject+SRModuleAuthorization.m</h4><p>在<code>NSObject+SRModuleAuthorization.m</code> 实现代码如下:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册需要被拦截的方法</span></span><br><span class="line"><span class="operator">-</span> (void)registerNeedMonitorSEL:(<span class="type">SEL</span>)sel&#123;</span><br><span class="line">    <span class="comment">// 获取方法的名称，根据该方法名称设置自定义的方法名称</span></span><br><span class="line">    <span class="type">NSString</span> <span class="operator">*</span>methodName <span class="operator">=</span> <span class="type">NSStringFromSelector</span>(sel);</span><br><span class="line">    <span class="type">NSString</span> <span class="operator">*</span>newMethodName <span class="operator">=</span> [<span class="type">NSString</span> stringWithFormat:@<span class="string">&quot;sr_auth_%@&quot;</span>, methodName];</span><br><span class="line">    <span class="comment">// 获取自定义方法的实例</span></span><br><span class="line">    <span class="type">SEL</span> newSel <span class="operator">=</span> <span class="type">NSSelectorFromString</span>(newMethodName);</span><br><span class="line">    <span class="type">Method</span> newMethod <span class="operator">=</span> class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], newSel);</span><br><span class="line">    <span class="comment">// 判断是否已经添加了自定义的方法，如果为空就添加自定义方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">!</span>newMethod)&#123;</span><br><span class="line">        <span class="comment">// 获取被拦截方法的结构体对象</span></span><br><span class="line">        <span class="type">Method</span> method <span class="operator">=</span> class_getInstanceMethod(<span class="keyword">self</span>.class, sel);</span><br><span class="line">        <span class="comment">// 获取被拦截方法的方法签名字符串</span></span><br><span class="line">        const char <span class="operator">*</span>functionType  <span class="operator">=</span> method_getTypeEncoding(method);</span><br><span class="line">        <span class="type">NSString</span> <span class="operator">*</span>functionTypeStr <span class="operator">=</span> [<span class="type">NSString</span> stringWithUTF8String:functionType];</span><br><span class="line">        <span class="comment">// 判断方法签名的字符串中，：8是否是最后两个字符</span></span><br><span class="line">        <span class="comment">// 如果是则代表无参方法，否则是有参方法</span></span><br><span class="line">        <span class="comment">// 针对这两种方法添加不同的自定义拦截方法</span></span><br><span class="line">        <span class="type">NSRange</span> range <span class="operator">=</span> [functionTypeStr rangeOfString:@<span class="string">&quot;:8&quot;</span>];</span><br><span class="line">        <span class="type">Method</span> intercetionMethod;</span><br><span class="line">        <span class="keyword">if</span> (range.location <span class="operator">+</span> range.length <span class="operator">&lt;</span> functionTypeStr.length)&#123;</span><br><span class="line">            <span class="comment">// 有参拦截方法</span></span><br><span class="line">            intercetionMethod <span class="operator">=</span> class_getInstanceMethod(<span class="keyword">self</span>.class, <span class="meta">@selector</span>(intercetion::));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 无参拦截方法</span></span><br><span class="line">            intercetionMethod <span class="operator">=</span> class_getInstanceMethod(<span class="keyword">self</span>.class, <span class="meta">@selector</span>(intercetion));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取自定义拦截方法的实例，</span></span><br><span class="line">        <span class="comment">// 并将自定义方法的selector与实例关联，动态的添加进当前类型</span></span><br><span class="line">        <span class="type">IMP</span> imp <span class="operator">=</span> method_getImplementation(intercetionMethod);</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], newSel, imp, functionType);</span><br><span class="line">        <span class="comment">// 最后重新获取自定义方法的方法结构体</span></span><br><span class="line">        <span class="comment">// 并与被监听方法进行实例交换，交换后，</span></span><br><span class="line">        <span class="comment">// 被监听的方法被调用时，就会执行我们自定义的方法实例，即intercetion</span></span><br><span class="line">        <span class="type">Method</span> method2 <span class="operator">=</span> class_getInstanceMethod(<span class="keyword">self</span>.class, newSel);</span><br><span class="line">        method_exchangeImplementations(method, method2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是无参拦截方法的实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参拦截方法</span></span><br><span class="line"><span class="operator">-</span> (void)intercetion&#123;</span><br><span class="line">    <span class="type">NSString</span> <span class="operator">*</span>methodName <span class="operator">=</span> <span class="type">NSStringFromSelector</span>(_cmd);</span><br><span class="line"><span class="comment">//    NSString *newMethodName = [NSString stringWithFormat:@&quot;dl_auth_%@&quot;, methodName];</span></span><br><span class="line">    <span class="type">NSString</span> <span class="operator">*</span>newMethodName <span class="operator">=</span> [<span class="type">NSString</span> stringWithFormat:@<span class="string">&quot;%@&quot;</span>, methodName];</span><br><span class="line">    <span class="type">SEL</span> newSel <span class="operator">=</span> <span class="type">NSSelectorFromString</span>(newMethodName);</span><br><span class="line">    <span class="type">NSMethodSignature</span> <span class="operator">*</span>signature <span class="operator">=</span> [[<span class="keyword">self</span> <span class="keyword">class</span>] <span class="title class_">instanceMethodSignatureForSelector</span>:<span class="title class_">newSel</span>];</span><br><span class="line">    <span class="title class_">if</span> (<span class="title class_">signature</span>)&#123;</span><br><span class="line">        <span class="type">NSInvocation</span> <span class="operator">*</span>invocation <span class="operator">=</span> [<span class="type">NSInvocation</span> invocationWithMethodSignature:signature];</span><br><span class="line">        invocation.target   <span class="operator">=</span> <span class="keyword">self</span>;</span><br><span class="line">        invocation.selector <span class="operator">=</span> newSel;</span><br><span class="line">        <span class="comment">// 是否执行原方法</span></span><br><span class="line"><span class="comment">//        [invocation invoke];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行自定义代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有参拦截方法是一个可变参数列表，我们可以遍历 <code>invocation</code> 对象的参数，以达到传参的目的。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有参拦截方法</span></span><br><span class="line"><span class="operator">-</span> (void)intercetion: (id)param1 :(id)param2,<span class="operator">...</span>&#123;</span><br><span class="line">    <span class="type">NSString</span> <span class="operator">*</span>methodName <span class="operator">=</span> <span class="type">NSStringFromSelector</span>(_cmd);</span><br><span class="line"><span class="comment">//    NSString *newMethodName = [NSString stringWithFormat:@&quot;dl_auth_%@&quot;, methodName];</span></span><br><span class="line">    <span class="type">NSString</span> <span class="operator">*</span>newMethodName <span class="operator">=</span> [<span class="type">NSString</span> stringWithFormat:@<span class="string">&quot;%@&quot;</span>, methodName];</span><br><span class="line">    <span class="type">SEL</span> newSel <span class="operator">=</span> <span class="type">NSSelectorFromString</span>(newMethodName);</span><br><span class="line">    <span class="type">NSMethodSignature</span> <span class="operator">*</span>signature <span class="operator">=</span> [[<span class="keyword">self</span> <span class="keyword">class</span>] <span class="title class_">instanceMethodSignatureForSelector</span>:<span class="title class_">newSel</span>];</span><br><span class="line">    <span class="title class_">NSMutableArray</span> *<span class="title class_">params</span> = [<span class="title class_">NSMutableArray</span> <span class="title class_">array</span>];</span><br><span class="line">    <span class="title class_">if</span> (<span class="title class_">signature</span>)&#123;</span><br><span class="line">        <span class="type">NSInvocation</span> <span class="operator">*</span>invocation <span class="operator">=</span> [<span class="type">NSInvocation</span> invocationWithMethodSignature:signature];</span><br><span class="line">        invocation.target   <span class="operator">=</span> <span class="keyword">self</span>;</span><br><span class="line">        invocation.selector <span class="operator">=</span> newSel;</span><br><span class="line">        <span class="comment">// 参数个数signature.numberOfArguments 默认有一个_cmd 一个target 所以要-2, 正常参数从第三个开始</span></span><br><span class="line">        <span class="keyword">if</span> (signature.numberOfArguments) &#123;</span><br><span class="line">            <span class="type">NSInteger</span> argCount <span class="operator">=</span> signature.numberOfArguments;</span><br><span class="line">            va_list args;</span><br><span class="line">            <span class="keyword">if</span> (argCount <span class="operator">&gt;</span> <span class="number">2</span>)&#123;</span><br><span class="line">                [params addObject:param1];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (argCount <span class="operator">&gt;</span> <span class="number">3</span>)&#123;</span><br><span class="line">                [params addObject:param2];</span><br><span class="line">            &#125;</span><br><span class="line">            va_start(args, param2);</span><br><span class="line">            <span class="keyword">for</span> (int i <span class="operator">=</span> <span class="number">4</span>; i <span class="operator">&lt;</span> argCount; i<span class="operator">++</span>) &#123;</span><br><span class="line">                param2 <span class="operator">=</span> va_arg(args, id);</span><br><span class="line">                [params addObject:param2];</span><br><span class="line">            &#125;</span><br><span class="line">            va_end(args);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (params.count <span class="operator">!=</span> argCount<span class="operator">-</span><span class="number">2</span>)&#123;</span><br><span class="line">               <span class="type">NSLog</span>(@<span class="string">&quot;proxy --- 传参有误! please check it! ---&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是否执行原方法</span></span><br><span class="line"><span class="comment">//        [invocation invoke];</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行自定义代码</span></span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有一个问题：因为参数遍历转化时， <code>va_arg(args, id)</code> 方法会把传递过来的参数转化成 <code>id</code> 类型，如果的不 <code>NSObject</code> 类型的参数无法完成转化。所以，如果被监听的方法的参数类型不是对象类型，会发生错误。</p>
<p>实现起来很简单，只需要在被监听的类的初始化方法里，调用 <code>registerNeedMonitorSEL</code> 方法即可，如下:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参</span></span><br><span class="line">[<span class="keyword">self</span> registerNeedMonitorSEL:<span class="meta">@selector</span>(test)];</span><br><span class="line"><span class="comment">// 有参</span></span><br><span class="line">[<span class="keyword">self</span> registerNeedMonitorSEL:<span class="meta">@selector</span>(test:)];</span><br><span class="line"><span class="comment">// 多参</span></span><br><span class="line">[<span class="keyword">self</span> registerNeedMonitorSEL:<span class="meta">@selector</span>(test:test1:)];</span><br></pre></td></tr></table></figure>

<p>分析：这个方法虽然解决了我的问题，但是缺点也是很明显的:</p>
<p>问题1: 对参数类型不是<code>NSObject</code>的方法无法监听，可能发生崩溃的情况。</p>
<p>问题2: 如何是监听三方SDK的方法，会对其造成代码入侵，SDK更新方法会失效。</p>
<h3 id="2、进阶版：对三方源码无入侵"><a href="#2、进阶版：对三方源码无入侵" class="headerlink" title="2、进阶版：对三方源码无入侵"></a>2、进阶版：对三方源码无入侵</h3><p>初版的方案显然不尽如人意，所以，针对以上问题，我又开始了新一轮的思考。</p>
<p>如何在不入侵三方源码的情况下，对方法进行 <code>hook</code> 呢？</p>
<p>结果就有了下面的方案：</p>
<p>实现思路：对需要的监听方法的类做一个category扩展，利用 <code>Method Swizzling</code> 对监听的方法进行转换，然后把它 <code>hook</code> 出来。</p>
<p>下面说一下我的代码实现：</p>
<p>首先，对监听方法的类做一个 <code>category</code> 扩展。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> <span class="type">TUIBaseChatViewController</span> (<span class="type">PHHookMethod</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure>

<p>然后，在category的 <code>.m</code> 文件里实现如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span> (void)load&#123;</span><br><span class="line">    <span class="keyword">static</span> dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(<span class="operator">&amp;</span>onceToken, <span class="operator">^</span>&#123;</span><br><span class="line">        <span class="comment">// 假如要监听方法,则把下面这行代码打开</span></span><br><span class="line">        __gbh_tracer_swizzleMethod([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="meta">@selector</span>(messageController:onSelectMessageAvatar:), <span class="meta">@selector</span>(__gbh_tracer_messageController:onSelectMessageAvatar:));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码很好理解，就是在程序启动时就注册方法监听，等到方法执行时，对其进行转换，转换方法看下面：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">void __gbh_tracer_swizzleMethod(<span class="type">Class</span> <span class="keyword">class</span>, <span class="type">SEL</span> originalSelector, <span class="type">SEL</span> swizzledSelector)&#123;</span><br><span class="line">    <span class="type">Method</span> originalMethod <span class="operator">=</span> class_getInstanceMethod(<span class="keyword">class</span>, originalSelector);</span><br><span class="line">    <span class="type">Method</span> swizzledMethod <span class="operator">=</span> class_getInstanceMethod(<span class="keyword">class</span>, swizzledSelector);</span><br><span class="line">    </span><br><span class="line">    <span class="type">BOOL</span> didAddMethod <span class="operator">=</span></span><br><span class="line">    class_addMethod(<span class="keyword">class</span>,</span><br><span class="line">                    originalSelector,</span><br><span class="line">                    method_getImplementation(swizzledMethod),</span><br><span class="line">                    method_getTypeEncoding(swizzledMethod));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (didAddMethod) &#123;</span><br><span class="line">        class_replaceMethod(<span class="keyword">class</span>,</span><br><span class="line">                            swizzledSelector,</span><br><span class="line">                            method_getImplementation(originalMethod),</span><br><span class="line">                            method_getTypeEncoding(originalMethod));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个标准的 <code>swizzling</code> 写法，当然了  <code>github</code> 上面也有关于 <code>swizzling</code> 的开源库，用起来也顺手，这里就不多说了。</p>
<p>然后就是 <code>swizzling</code> 转换到的方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (void)__gbh_tracer_messageController:(<span class="type">TUIBaseMessageController</span> <span class="operator">*</span>)controller onSelectMessageAvatar:(<span class="type">TUIMessageCell</span> <span class="operator">*</span>)cell&#123;</span><br><span class="line"><span class="comment">//    [self __gbh_tracer_messageController:controller onSelectMessageAvatar:cell]; //由于方法已经被交换,这里调用的实际上是messageController:onSelectMessageAvatar:方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行自定义方法</span></span><br><span class="line">    [<span class="keyword">self</span> clickMessageAvatar:cell];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转换后的方法我们既可以让其继续执行以前的方法流程，也可以执行自己定义的方法，简直不要太爽。</p>
<p>这就是一整个 <code>hook</code> 流程，即简单又方便，以后，我只需要往工程里面添加这个 <code>Category</code> ，这个被监听的方法就会被 <code>hook</code> 出来，可以让我为所欲为，还不会出现之前的报错和源码入侵的问题。</p>
<h2 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h2><blockquote>
<p>膜拜大神！<br><a href="https://www.jianshu.com/p/57827c100a3f">https://www.jianshu.com/p/57827c100a3f</a><br><a href="https://www.cnblogs.com/n1ckyxu/p/6186850.html">https://www.cnblogs.com/n1ckyxu/p/6186850.html</a><br><a href="https://www.jianshu.com/p/99d06ad0fa51">https://www.jianshu.com/p/99d06ad0fa51</a><br><a href="https://blog.csdn.net/u014600626/article/details/119271920">https://blog.csdn.net/u014600626/article/details/119271920</a><br><a href="http://yulingtianxia.com/blog/2017/04/17/Objective-C-Method-Swizzling/#more">http://yulingtianxia.com/blog/2017/04/17/Objective-C-Method-Swizzling/#more</a></p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>【OC】在 OC 中如何实现字符串枚举？</title>
    <url>/iOS/%E3%80%90OC%E3%80%91%E5%9C%A8-OC-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9E%9A%E4%B8%BE%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="一、常见枚举写法"><a href="#一、常见枚举写法" class="headerlink" title="一、常见枚举写法"></a>一、常见枚举写法</h1><h3 id="1、C-语言模式的枚举写法：enum"><a href="#1、C-语言模式的枚举写法：enum" class="headerlink" title="1、C 语言模式的枚举写法：enum"></a>1、C 语言模式的枚举写法：enum</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">typedef <span class="keyword">enum</span>&#123;</span><br><span class="line">    <span class="type">KLTypeRed</span> <span class="operator">=</span> <span class="number">1</span>,</span><br><span class="line">    <span class="type">KLTypeGreen</span> <span class="operator">=</span> <span class="number">2</span>,</span><br><span class="line">    <span class="type">KLTypeOrange</span> <span class="operator">=</span> <span class="number">3</span>,</span><br><span class="line">&#125; <span class="type">KLType</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2、普通【整型】枚举写法-：NS-ENUM"><a href="#2、普通【整型】枚举写法-：NS-ENUM" class="headerlink" title="2、普通【整型】枚举写法 ：NS_ENUM"></a>2、普通【整型】枚举写法 ：NS_ENUM</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSUInteger</span>, <span class="type">KLType</span>) &#123;</span><br><span class="line">    <span class="type">KLTypeRed</span> <span class="operator">=</span> <span class="number">1</span>,</span><br><span class="line">    <span class="type">KLTypeGreen</span> <span class="operator">=</span> <span class="number">2</span>,</span><br><span class="line">    <span class="type">KLTypeOrange</span> <span class="operator">=</span> <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="3、位移枚举-：NS-OPTIONS"><a href="#3、位移枚举-：NS-OPTIONS" class="headerlink" title="3、位移枚举 ：NS_OPTIONS"></a>3、位移枚举 ：NS_OPTIONS</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">typedef <span class="type">NS_OPTIONS</span>(<span class="type">NSUInteger</span>, <span class="type">KLType</span>) &#123;</span><br><span class="line">    <span class="type">KLTypeRed</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">0</span>,</span><br><span class="line">    <span class="type">KLTypeGreen</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">1</span>,</span><br><span class="line">    <span class="type">KLTypeOrange</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="二、字符串类型枚举实现方式探索"><a href="#二、字符串类型枚举实现方式探索" class="headerlink" title="二、字符串类型枚举实现方式探索"></a>二、字符串类型枚举实现方式探索</h1><h3 id="1、基于普通枚举，定义-C-方法实现"><a href="#1、基于普通枚举，定义-C-方法实现" class="headerlink" title="1、基于普通枚举，定义 C 方法实现"></a>1、基于普通枚举，定义 C 方法实现</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先定义一个常见的枚举</span></span><br><span class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSUInteger</span>, <span class="type">KLType</span>) &#123;</span><br><span class="line">    <span class="type">KLTypeRed</span>    <span class="operator">=</span> <span class="number">1</span>,</span><br><span class="line">    <span class="type">KLTypeGreen</span>  <span class="operator">=</span> <span class="number">2</span>,</span><br><span class="line">    <span class="type">KLTypeOrange</span> <span class="operator">=</span> <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个C方法，C方法就是通过枚举值匹配字符串</span></span><br><span class="line"><span class="type">NSString</span> <span class="operator">*</span><span class="type">KLTypeString</span>(<span class="type">KLType</span> status) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KLTypeRed</span>:</span><br><span class="line">            <span class="keyword">return</span> @<span class="string">&quot;红色&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KLTypeGreen</span>:</span><br><span class="line">            <span class="keyword">return</span> @<span class="string">&quot;绿色&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KLTypeOrange</span>:</span><br><span class="line">            <span class="keyword">return</span> @<span class="string">&quot;橘色&quot;</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> @<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、基于普通枚举，定义-C-数组，设置枚举值为-index"><a href="#2、基于普通枚举，定义-C-数组，设置枚举值为-index" class="headerlink" title="2、基于普通枚举，定义 C 数组，设置枚举值为 index"></a>2、基于普通枚举，定义 C 数组，设置枚举值为 index</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先定义一个常见的枚举</span></span><br><span class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSUInteger</span>, <span class="type">KLType</span>) &#123;</span><br><span class="line">    <span class="type">KLTypeRed</span>    <span class="operator">=</span> <span class="number">1</span>,</span><br><span class="line">    <span class="type">KLTypeGreen</span>  <span class="operator">=</span> <span class="number">2</span>,</span><br><span class="line">    <span class="type">KLTypeOrange</span> <span class="operator">=</span> <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个是 Map NSString * 类型的数组</span></span><br><span class="line"><span class="type">NSString</span> <span class="operator">*</span><span class="type">KLTypeStringMap</span>[] <span class="operator">=</span> &#123;</span><br><span class="line">    [<span class="type">KLTypeRed</span>]    <span class="operator">=</span> @<span class="string">&quot;红色&quot;</span>,</span><br><span class="line">    [<span class="type">KLTypeGreen</span>]  <span class="operator">=</span> @<span class="string">&quot;绿色&quot;</span>,</span><br><span class="line">    [<span class="type">KLTypeOrange</span>] <span class="operator">=</span> @<span class="string">&quot;橘色&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用：</span></span><br><span class="line"><span class="type">KLType</span> type <span class="operator">=</span> <span class="type">KLTypeRed</span>;</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;%@&quot;</span>, <span class="type">KLTypeStringMap</span>[type]); <span class="comment">//  NSLog: 红色</span></span><br></pre></td></tr></table></figure>

<h3 id="3、日常做法，宏定义"><a href="#3、日常做法，宏定义" class="headerlink" title="3、日常做法，宏定义"></a>3、日常做法，宏定义</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#define <span class="keyword">static</span> <span class="type">NSString</span> <span class="operator">*</span> const <span class="type">KLTypeStringRed</span> <span class="operator">=</span> @<span class="string">&quot;红色&quot;</span>;</span><br><span class="line">#define <span class="keyword">static</span> <span class="type">NSString</span> <span class="operator">*</span> const <span class="type">KLTypeStringGreen</span> <span class="operator">=</span> @<span class="string">&quot;绿色&quot;</span>;</span><br><span class="line">#define <span class="keyword">static</span> <span class="type">NSString</span> <span class="operator">*</span> const <span class="type">KLTypeStringOrange</span> <span class="operator">=</span> @<span class="string">&quot;橘色&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4、定义一种新的数据类型"><a href="#4、定义一种新的数据类型" class="headerlink" title="4、定义一种新的数据类型"></a>4、定义一种新的数据类型</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个新的类型 是 NSSting * 类型 类型名字叫 KLTypeStr</span></span><br><span class="line">typedef <span class="type">NSString</span> <span class="operator">*</span><span class="type">KLTypeStr</span> <span class="type">NS_STRING_ENUM</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">KLTypeStr</span> const <span class="type">KLTypeStringRed</span>    <span class="operator">=</span> @<span class="string">&quot;红色&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="type">KLTypeStr</span> const <span class="type">KLTypeStringGreen</span>  <span class="operator">=</span> @<span class="string">&quot;绿色&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="type">KLTypeStr</span> const <span class="type">KLTypeStringOrange</span> <span class="operator">=</span> @<span class="string">&quot;橘色&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5、Apple-官方的做法"><a href="#5、Apple-官方的做法" class="headerlink" title="5、Apple 官方的做法"></a>5、Apple 官方的做法</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.h 文件中 <span class="operator">-------------</span></span><br><span class="line">typedef <span class="type">NSString</span> <span class="operator">*</span><span class="type">KLTypeStr</span> <span class="type">NS_STRING_ENUM</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">FOUNDATION_EXPORT</span> <span class="type">KLTypeStr</span> const <span class="type">KLTypeStringRed</span>;</span><br><span class="line"><span class="type">FOUNDATION_EXPORT</span> <span class="type">KLTypeStr</span> const <span class="type">KLTypeStringGreen</span>;</span><br><span class="line"><span class="type">FOUNDATION_EXPORT</span> <span class="type">KLTypeStr</span> const <span class="type">KLTypeStringOrange</span>;</span><br><span class="line"></span><br><span class="line">.m 文件中 <span class="operator">--------------</span></span><br><span class="line"><span class="type">NSString</span> <span class="operator">*</span> const <span class="type">KLTypeStringRed</span>    <span class="operator">=</span> @<span class="string">&quot;红色&quot;</span>;</span><br><span class="line"><span class="type">NSString</span> <span class="operator">*</span> const <span class="type">KLTypeStringGreen</span>  <span class="operator">=</span> @<span class="string">&quot;绿色&quot;</span>;</span><br><span class="line"><span class="type">NSString</span> <span class="operator">*</span> const <span class="type">KLTypeStringOrange</span> <span class="operator">=</span> @<span class="string">&quot;橘色&quot;</span>; </span><br></pre></td></tr></table></figure>

<p>注：比较的时候 <code>Str1 == Str2</code> 直接比较的是内存地址，效率更高。<br>由于过多的宏定义会产生过多的二进制文件，故如果宏定义比较多，建议用 <code>FOUNDATION_EXPORT</code>。</p>
<h1 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h1><p><a href="https://www.jianshu.com/p/ae7cb47ae44b">https://www.jianshu.com/p/ae7cb47ae44b</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>【OC】UIButton 防止重复点击的3种方法</title>
    <url>/iOS/%E3%80%90OC%E3%80%91UIButton%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E7%9A%843%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、使用场景"><a href="#一、使用场景" class="headerlink" title="一、使用场景"></a>一、使用场景</h2><p>在实际应用过程中，有一些业务场景可能需要我们对 UIButton 响应事件的时间间隔进行控制，比如：</p>
<ol>
<li>当点击按钮来执行网络请求时，若请求耗时稍长，用户往往会多次点击。这样，就会执行多次请求，造成资源浪费</li>
<li>在移动终端设备性能较差时，连续点击按钮会执行多次事件 <strong>（比如 push 出来多个 viewController ）</strong></li>
<li>防止暴力点击</li>
</ol>
<h2 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h2><span id="more"></span>

<h3 id="方法一：设置-enabled-或-userInteractionEnabled-属性"><a href="#方法一：设置-enabled-或-userInteractionEnabled-属性" class="headerlink" title="方法一：设置 enabled 或 userInteractionEnabled 属性"></a>方法一：设置 enabled 或 userInteractionEnabled 属性</h3><p>通过 UIButton 的<code>enabled</code>属性和<code>userInteractionEnabled</code>属性控制按钮是否可点击。此方案在逻辑上比较清晰、易懂，但具体代码书写分散，常常涉及多个地方：</p>
<ol>
<li>创建按钮</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (void)drawBtn &#123;</span><br><span class="line">    <span class="type">UIButton</span> <span class="operator">*</span>btn <span class="operator">=</span> [[<span class="type">UIButton</span> alloc] initWithFrame:<span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">100</span>)];</span><br><span class="line">    [btn setTitle:@<span class="string">&quot;按钮点击&quot;</span> forState:<span class="type">UIControlStateNormal</span>];</span><br><span class="line">    [btn setTitleColor:[<span class="type">UIColor</span> redColor] forState:<span class="type">UIControlStateNormal</span>];</span><br><span class="line">    <span class="comment">// 按钮不可点击时,文字颜色置灰</span></span><br><span class="line">    [btn setTitleColor:[<span class="type">UIColor</span> grayColor] forState:<span class="type">UIControlStateDisabled</span>];</span><br><span class="line">    [btn setTitleColor:[<span class="type">UIColor</span> blueColor] forState:<span class="type">UIControlStateHighlighted</span>];</span><br><span class="line">    btn.center <span class="operator">=</span> <span class="keyword">self</span>.view.center;</span><br><span class="line">    [btn addTarget:<span class="keyword">self</span> action:<span class="meta">@selector</span>(tapBtn:) forControlEvents:<span class="type">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:btn];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按钮不可点击时，标题颜色置灰，方便对比</p>
<ol start="2">
<li>点击事件</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (void)tapBtn:(<span class="type">UIButton</span> <span class="operator">*</span>)btn &#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;按钮点击...&quot;</span>);</span><br><span class="line">    btn.enabled <span class="operator">=</span> <span class="type">NO</span>;</span><br><span class="line">    </span><br><span class="line">    dispatch_after(dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, (int64_t)(<span class="number">2.0</span> <span class="operator">*</span> <span class="type">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), <span class="operator">^</span>&#123;</span><br><span class="line">        btn.enabled <span class="operator">=</span> <span class="type">YES</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法二：借助-cancelPreviousPerformRequestsWithTarget-selector-object实现"><a href="#方法二：借助-cancelPreviousPerformRequestsWithTarget-selector-object实现" class="headerlink" title="方法二：借助 cancelPreviousPerformRequestsWithTarget:selector:object实现"></a>方法二：借助 cancelPreviousPerformRequestsWithTarget:selector:object实现</h3><p>通过 NSObject 的两个方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此方法会在连续点击按钮时取消之前的点击事件，从而只执行最后一次点击事件</span></span><br><span class="line"><span class="operator">+</span> (void)cancelPreviousPerformRequestsWithTarget:(id)aTarget selector:(<span class="type">SEL</span>)aSelector object:(nullable id)anArgument;</span><br><span class="line"><span class="comment">// 多长时间后做某件事情</span></span><br><span class="line"><span class="operator">-</span> (void)performSelector:(<span class="type">SEL</span>)aSelector withObject:(nullable id)anArgument afterDelay:(<span class="type">NSTimeInterval</span>)delay;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>按钮创建还是上面代码，按钮点击事件如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (void)tapBtn:(<span class="type">UIButton</span> <span class="operator">*</span>)btn &#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;按钮点击了...&quot;</span>);</span><br><span class="line">    <span class="comment">// 此方法会在连续点击按钮时取消之前的点击事件，从而只执行最后一次点击事件</span></span><br><span class="line">    [<span class="type">NSObject</span> cancelPreviousPerformRequestsWithTarget:<span class="keyword">self</span> selector:<span class="meta">@selector</span>(buttonClickedAction:) object:btn];</span><br><span class="line">    <span class="comment">// 多长时间后做某件事情</span></span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="meta">@selector</span>(buttonClickedAction:) withObject:btn afterDelay:<span class="number">2.0</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="operator">-</span> (void)buttonClickedAction:(<span class="type">UIButton</span> <span class="operator">*</span>)btn &#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;真正开始执行业务 - 比如网络请求...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法有一些弊端，可能会出现延时现象，并且需要对大量的UIButton做处理，工作量大，不太方便。</p>
<h3 id="方法三-通过-runtime-交换方法实现"><a href="#方法三-通过-runtime-交换方法实现" class="headerlink" title="方法三 通过 runtime 交换方法实现"></a>方法三 通过 runtime 交换方法实现</h3><p>通过 Runtime 交换 UIButton 的响应事件方法，从而控制响应事件的时间间隔。</p>
<p>实现步骤如下:</p>
<ol>
<li>创建一个 UIButton 的分类，使用 runtime 增加 public 属性 <code>cs_eventInterval</code> 和 private 属性 <code>cs_eventInvalid</code></li>
<li>在 <code>+load</code> 方法中使用 runtime 将 UIButton 的 <code>-sendAction:to:forEvent:</code> 方法与自定义的 <code>cs_sendAction:to:forEvent:</code> 方法进行交换</li>
<li>使用 <code>cs_eventInterval</code> 作为控制 <code>cs_eventInvalid</code> 的计时因子，用 <code>cs_eventInvalid</code> 控制 UIButton 的 event 事件是否有效</li>
</ol>
<p>代码实现如下：</p>
<p><code>.h</code> 实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> <span class="type">UIButton</span> (<span class="type">Extension</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** 时间间隔 */</span></span><br><span class="line"><span class="meta">@property</span>(nonatomic, assign)<span class="type">NSTimeInterval</span> cs_eventInterval;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure>

<p><code>.m</code>实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">import</span> &quot;UIButton+Extension.h&quot;</span><br><span class="line">#<span class="keyword">import</span> &lt;objc/runtime.h&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> char <span class="operator">*</span>const kEventIntervalKey <span class="operator">=</span> <span class="string">&quot;kEventIntervalKey&quot;</span>; <span class="comment">// 时间间隔</span></span><br><span class="line"><span class="keyword">static</span> char <span class="operator">*</span>const kEventInvalidKey <span class="operator">=</span> <span class="string">&quot;kEventInvalidKey&quot;</span>;   <span class="comment">// 是否失效</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@interface</span> <span class="type">UIButton</span>()</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** 是否失效 - 即不可以点击 */</span></span><br><span class="line"><span class="meta">@property</span>(nonatomic, assign)<span class="type">BOOL</span> cs_eventInvalid;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@implementation</span> <span class="type">UIButton</span> (<span class="type">Extension</span>)</span><br><span class="line"> </span><br><span class="line"><span class="operator">+</span> (void)load &#123;</span><br><span class="line">    <span class="comment">// 交换方法</span></span><br><span class="line">    <span class="type">Method</span> clickMethod <span class="operator">=</span> class_getInstanceMethod(<span class="keyword">self</span>, <span class="meta">@selector</span>(sendAction:to:forEvent:));</span><br><span class="line">    <span class="type">Method</span> cs_clickMethod <span class="operator">=</span> class_getInstanceMethod(<span class="keyword">self</span>, <span class="meta">@selector</span>(cs_sendAction:to:forEvent:));</span><br><span class="line">    method_exchangeImplementations(clickMethod, cs_clickMethod);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">#pragma mark <span class="operator">-</span> click</span><br><span class="line"> </span><br><span class="line"><span class="operator">-</span> (void)cs_sendAction:(<span class="type">SEL</span>)action to:(id)target forEvent:(<span class="type">UIEvent</span> <span class="operator">*</span>)event &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">!</span><span class="keyword">self</span>.cs_eventInvalid) &#123;</span><br><span class="line">        <span class="keyword">self</span>.cs_eventInvalid <span class="operator">=</span> <span class="type">YES</span>;</span><br><span class="line">        [<span class="keyword">self</span> cs_sendAction:action to:target forEvent:event];</span><br><span class="line">        [<span class="keyword">self</span> performSelector:<span class="meta">@selector</span>(setCs_eventInvalid:) withObject:@(<span class="type">NO</span>) afterDelay:<span class="keyword">self</span>.cs_eventInterval];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">#pragma mark <span class="operator">-</span> <span class="keyword">set</span> <span class="operator">|</span> <span class="keyword">get</span></span><br><span class="line"> </span><br><span class="line"><span class="operator">-</span> (<span class="type">NSTimeInterval</span>)cs_eventInterval &#123;</span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, kEventIntervalKey) doubleValue];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="operator">-</span> (void)setCs_eventInterval:(<span class="type">NSTimeInterval</span>)cs_eventInterval &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, kEventIntervalKey, @(cs_eventInterval), <span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="operator">-</span> (<span class="type">BOOL</span>)cs_eventInvalid &#123;</span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, kEventInvalidKey) boolValue];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="operator">-</span> (void)setCs_eventInvalid:(<span class="type">BOOL</span>)cs_eventInvalid &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, kEventInvalidKey, @(cs_eventInvalid), <span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>);</span><br><span class="line">&#125;</span><br><span class="line">```                 </span><br><span class="line"></span><br><span class="line">测试代码如下：</span><br><span class="line"></span><br><span class="line">``` swift</span><br><span class="line"><span class="operator">-</span> (void)drawExpecialBtn&#123;</span><br><span class="line">    <span class="type">UIButton</span> <span class="operator">*</span>btn <span class="operator">=</span> [[<span class="type">UIButton</span> alloc] initWithFrame:<span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">100</span>)];</span><br><span class="line">    [btn setTitle:@<span class="string">&quot;按钮点击&quot;</span> forState:<span class="type">UIControlStateNormal</span>];</span><br><span class="line">    [btn setTitleColor:[<span class="type">UIColor</span> redColor] forState:<span class="type">UIControlStateNormal</span>];</span><br><span class="line">    <span class="comment">// 按钮不可点击时,文字颜色置灰</span></span><br><span class="line">    [btn setTitleColor:[<span class="type">UIColor</span> grayColor] forState:<span class="type">UIControlStateDisabled</span>];</span><br><span class="line">    [btn setTitleColor:[<span class="type">UIColor</span> blueColor] forState:<span class="type">UIControlStateHighlighted</span>];</span><br><span class="line">    btn.center <span class="operator">=</span> <span class="keyword">self</span>.view.center;</span><br><span class="line">    [btn addTarget:<span class="keyword">self</span> action:<span class="meta">@selector</span>(tapBtn:) forControlEvents:<span class="type">UIControlEventTouchUpInside</span>];</span><br><span class="line">    btn.cs_eventInterval <span class="operator">=</span> <span class="number">2.0</span>;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:btn];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="operator">-</span> (void)tapBtn:(<span class="type">UIButton</span> <span class="operator">*</span>)btn &#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;按钮点击...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><p>在方法三中交互 <em>UIButton</em> 的<code>sendAction:to:forEvent:</code>方法，实际上交互的是 <em>UIControl</em> 的 <code>sendAction:to:forEvent:</code>方法，所以在使用 <em>UIControl</em> 或其子类（比如<em>UISlider</em>）的 <code>sendAction:to:forEvent:</code>方法时会引起参数缺失的崩溃。</p>
<p>测试代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 注意事项 */</span></span><br><span class="line"><span class="operator">-</span> (void)slideTest &#123;</span><br><span class="line">    <span class="type">UISlider</span> <span class="operator">*</span>slide <span class="operator">=</span> [[<span class="type">UISlider</span> alloc] initWithFrame:<span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">59</span>)];</span><br><span class="line">    [slide addTarget:<span class="keyword">self</span> action:<span class="meta">@selector</span>(tapSlide:) forControlEvents:<span class="type">UIControlEventTouchUpInside</span>];</span><br><span class="line">    slide.center <span class="operator">=</span> <span class="keyword">self</span>.view.center;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:slide];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="operator">-</span> (void)tapSlide:(<span class="type">UISlider</span> <span class="operator">*</span>)slider &#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;UISlider点击...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<ol>
<li>可以将<code>UIButton+Extension</code>改成<code>UIControl+Extension</code>以避免此问题</li>
<li>也可以在<code>cs_sendAction:to:forEvent:</code>方法中加入判断，如下：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (void)cs_sendAction:(<span class="type">SEL</span>)action to:(id)target forEvent:(<span class="type">UIEvent</span> <span class="operator">*</span>)event &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">!</span>[<span class="type">NSStringFromClass</span>(<span class="keyword">self</span>.class)isEqualToString:@<span class="string">&quot;UIButton&quot;</span>])&#123;</span><br><span class="line">       <span class="comment">/** 处理交互事件*/</span></span><br><span class="line">       [<span class="keyword">self</span> cs_sendAction:action to:target forEvent:event];</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">!</span><span class="keyword">self</span>.cs_eventInvalid) &#123;</span><br><span class="line">        <span class="keyword">self</span>.cs_eventInvalid <span class="operator">=</span> <span class="type">YES</span>;</span><br><span class="line">        [<span class="keyword">self</span> cs_sendAction:action to:target forEvent:event];</span><br><span class="line">        [<span class="keyword">self</span> performSelector:<span class="meta">@selector</span>(setCs_eventInvalid:) withObject:@(<span class="type">NO</span>) afterDelay:<span class="keyword">self</span>.cs_eventInterval];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>【Tips】ASCII码对应表</title>
    <url>/Tips/%E3%80%90Tips%E3%80%91ASCII%E7%A0%81%E5%AF%B9%E5%BA%94%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="ASCII码对应表"><a href="#ASCII码对应表" class="headerlink" title="ASCII码对应表"></a>ASCII码对应表</h2><span id="more"></span>
<table>
<thead>
<tr>
<th align="center">ASCII值</th>
<th align="center">16进制</th>
<th align="center">控制字符</th>
<th align="center"></th>
<th align="center">ASCII值</th>
<th align="center">16进制</th>
<th align="center">控制字符</th>
<th align="center"></th>
<th align="center">ASCII值</th>
<th align="center">16进制</th>
<th align="center">控制字符</th>
<th align="center"></th>
<th align="center">ASCII值</th>
<th align="center">16进制</th>
<th align="center">控制字符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">00</td>
<td align="center">NUT</td>
<td align="center"></td>
<td align="center">32</td>
<td align="center">20</td>
<td align="center">(space)</td>
<td align="center"></td>
<td align="center">64</td>
<td align="center">40</td>
<td align="center">@</td>
<td align="center"></td>
<td align="center">96</td>
<td align="center">60</td>
<td align="center">、</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">01</td>
<td align="center">SOH</td>
<td align="center"></td>
<td align="center">33</td>
<td align="center">21</td>
<td align="center">!</td>
<td align="center"></td>
<td align="center">65</td>
<td align="center">41</td>
<td align="center">A</td>
<td align="center"></td>
<td align="center">97</td>
<td align="center">61</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">02</td>
<td align="center">STX</td>
<td align="center"></td>
<td align="center">34</td>
<td align="center">22</td>
<td align="center">“</td>
<td align="center"></td>
<td align="center">66</td>
<td align="center">42</td>
<td align="center">B</td>
<td align="center"></td>
<td align="center">98</td>
<td align="center">62</td>
<td align="center">b</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">03</td>
<td align="center">ETX</td>
<td align="center"></td>
<td align="center">35</td>
<td align="center">23</td>
<td align="center">#</td>
<td align="center"></td>
<td align="center">67</td>
<td align="center">43</td>
<td align="center">C</td>
<td align="center"></td>
<td align="center">99</td>
<td align="center">63</td>
<td align="center">c</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">04</td>
<td align="center">EOT</td>
<td align="center"></td>
<td align="center">36</td>
<td align="center">24</td>
<td align="center">$</td>
<td align="center"></td>
<td align="center">68</td>
<td align="center">44</td>
<td align="center">D</td>
<td align="center"></td>
<td align="center">100</td>
<td align="center">64</td>
<td align="center">d</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">05</td>
<td align="center">ENO</td>
<td align="center"></td>
<td align="center">37</td>
<td align="center">25</td>
<td align="center">%</td>
<td align="center"></td>
<td align="center">69</td>
<td align="center">45</td>
<td align="center">E</td>
<td align="center"></td>
<td align="center">101</td>
<td align="center">65</td>
<td align="center">e</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">06</td>
<td align="center">ACK</td>
<td align="center"></td>
<td align="center">38</td>
<td align="center">26</td>
<td align="center">&amp;</td>
<td align="center"></td>
<td align="center">70</td>
<td align="center">46</td>
<td align="center">F</td>
<td align="center"></td>
<td align="center">102</td>
<td align="center">66</td>
<td align="center">f</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">07</td>
<td align="center">BEL</td>
<td align="center"></td>
<td align="center">39</td>
<td align="center">27</td>
<td align="center">‘</td>
<td align="center"></td>
<td align="center">71</td>
<td align="center">47</td>
<td align="center">G</td>
<td align="center"></td>
<td align="center">103</td>
<td align="center">67</td>
<td align="center">g</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">08</td>
<td align="center">BS</td>
<td align="center"></td>
<td align="center">40</td>
<td align="center">28</td>
<td align="center">(</td>
<td align="center"></td>
<td align="center">72</td>
<td align="center">48</td>
<td align="center">H</td>
<td align="center"></td>
<td align="center">104</td>
<td align="center">68</td>
<td align="center">h</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">09</td>
<td align="center">HT</td>
<td align="center"></td>
<td align="center">41</td>
<td align="center">29</td>
<td align="center">)</td>
<td align="center"></td>
<td align="center">73</td>
<td align="center">49</td>
<td align="center">I</td>
<td align="center"></td>
<td align="center">105</td>
<td align="center">69</td>
<td align="center">i</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">0A</td>
<td align="center">LF</td>
<td align="center"></td>
<td align="center">42</td>
<td align="center">2A</td>
<td align="center">*</td>
<td align="center"></td>
<td align="center">74</td>
<td align="center">4A</td>
<td align="center">J</td>
<td align="center"></td>
<td align="center">106</td>
<td align="center">6A</td>
<td align="center">j</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">0B</td>
<td align="center">VT</td>
<td align="center"></td>
<td align="center">43</td>
<td align="center">2B</td>
<td align="center">+</td>
<td align="center"></td>
<td align="center">75</td>
<td align="center">4B</td>
<td align="center">K</td>
<td align="center"></td>
<td align="center">107</td>
<td align="center">6B</td>
<td align="center">k</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">0C</td>
<td align="center">FF</td>
<td align="center"></td>
<td align="center">44</td>
<td align="center">2C</td>
<td align="center">,</td>
<td align="center"></td>
<td align="center">76</td>
<td align="center">4C</td>
<td align="center">L</td>
<td align="center"></td>
<td align="center">108</td>
<td align="center">6C</td>
<td align="center">l</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">0D</td>
<td align="center">CR</td>
<td align="center"></td>
<td align="center">45</td>
<td align="center">2D</td>
<td align="center">-</td>
<td align="center"></td>
<td align="center">77</td>
<td align="center">4D</td>
<td align="center">M</td>
<td align="center"></td>
<td align="center">109</td>
<td align="center">6D</td>
<td align="center">m</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">0E</td>
<td align="center">SO</td>
<td align="center"></td>
<td align="center">46</td>
<td align="center">2E</td>
<td align="center">.</td>
<td align="center"></td>
<td align="center">78</td>
<td align="center">4E</td>
<td align="center">N</td>
<td align="center"></td>
<td align="center">110</td>
<td align="center">6E</td>
<td align="center">n</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">0F</td>
<td align="center">SI</td>
<td align="center"></td>
<td align="center">47</td>
<td align="center">2F</td>
<td align="center">/</td>
<td align="center"></td>
<td align="center">79</td>
<td align="center">4F</td>
<td align="center">O</td>
<td align="center"></td>
<td align="center">111</td>
<td align="center">6F</td>
<td align="center">o</td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">10</td>
<td align="center">DLE</td>
<td align="center"></td>
<td align="center">48</td>
<td align="center">30</td>
<td align="center">0</td>
<td align="center"></td>
<td align="center">80</td>
<td align="center">50</td>
<td align="center">P</td>
<td align="center"></td>
<td align="center">112</td>
<td align="center">70</td>
<td align="center">p</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">11</td>
<td align="center">DC1</td>
<td align="center"></td>
<td align="center">49</td>
<td align="center">31</td>
<td align="center">1</td>
<td align="center"></td>
<td align="center">81</td>
<td align="center">51</td>
<td align="center">Q</td>
<td align="center"></td>
<td align="center">113</td>
<td align="center">71</td>
<td align="center">q</td>
</tr>
<tr>
<td align="center">18</td>
<td align="center">12</td>
<td align="center">DC2</td>
<td align="center"></td>
<td align="center">50</td>
<td align="center">32</td>
<td align="center">2</td>
<td align="center"></td>
<td align="center">82</td>
<td align="center">52</td>
<td align="center">R</td>
<td align="center"></td>
<td align="center">114</td>
<td align="center">72</td>
<td align="center">r</td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">13</td>
<td align="center">DC3</td>
<td align="center"></td>
<td align="center">51</td>
<td align="center">33</td>
<td align="center">3</td>
<td align="center"></td>
<td align="center">83</td>
<td align="center">53</td>
<td align="center">X</td>
<td align="center"></td>
<td align="center">115</td>
<td align="center">73</td>
<td align="center">s</td>
</tr>
<tr>
<td align="center">20</td>
<td align="center">14</td>
<td align="center">DC4</td>
<td align="center"></td>
<td align="center">52</td>
<td align="center">34</td>
<td align="center">4</td>
<td align="center"></td>
<td align="center">84</td>
<td align="center">54</td>
<td align="center">T</td>
<td align="center"></td>
<td align="center">116</td>
<td align="center">74</td>
<td align="center">t</td>
</tr>
<tr>
<td align="center">21</td>
<td align="center">15</td>
<td align="center">NAK</td>
<td align="center"></td>
<td align="center">53</td>
<td align="center">35</td>
<td align="center">5</td>
<td align="center"></td>
<td align="center">85</td>
<td align="center">55</td>
<td align="center">U</td>
<td align="center"></td>
<td align="center">117</td>
<td align="center">75</td>
<td align="center">u</td>
</tr>
<tr>
<td align="center">22</td>
<td align="center">16</td>
<td align="center">SYN</td>
<td align="center"></td>
<td align="center">54</td>
<td align="center">36</td>
<td align="center">6</td>
<td align="center"></td>
<td align="center">86</td>
<td align="center">56</td>
<td align="center">V</td>
<td align="center"></td>
<td align="center">118</td>
<td align="center">76</td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">23</td>
<td align="center">17</td>
<td align="center">TB</td>
<td align="center"></td>
<td align="center">55</td>
<td align="center">37</td>
<td align="center">7</td>
<td align="center"></td>
<td align="center">87</td>
<td align="center">57</td>
<td align="center">W</td>
<td align="center"></td>
<td align="center">119</td>
<td align="center">77</td>
<td align="center">w</td>
</tr>
<tr>
<td align="center">24</td>
<td align="center">18</td>
<td align="center">CAN</td>
<td align="center"></td>
<td align="center">56</td>
<td align="center">38</td>
<td align="center">8</td>
<td align="center"></td>
<td align="center">88</td>
<td align="center">58</td>
<td align="center">X</td>
<td align="center"></td>
<td align="center">120</td>
<td align="center">78</td>
<td align="center">x</td>
</tr>
<tr>
<td align="center">25</td>
<td align="center">19</td>
<td align="center">EM</td>
<td align="center"></td>
<td align="center">57</td>
<td align="center">39</td>
<td align="center">9</td>
<td align="center"></td>
<td align="center">89</td>
<td align="center">59</td>
<td align="center">Y</td>
<td align="center"></td>
<td align="center">121</td>
<td align="center">79</td>
<td align="center">y</td>
</tr>
<tr>
<td align="center">26</td>
<td align="center">1A</td>
<td align="center">SUB</td>
<td align="center"></td>
<td align="center">58</td>
<td align="center">3A</td>
<td align="center">:</td>
<td align="center"></td>
<td align="center">90</td>
<td align="center">5A</td>
<td align="center">Z</td>
<td align="center"></td>
<td align="center">122</td>
<td align="center">7A</td>
<td align="center">z</td>
</tr>
<tr>
<td align="center">27</td>
<td align="center">1B</td>
<td align="center">ESC</td>
<td align="center"></td>
<td align="center">59</td>
<td align="center">3B</td>
<td align="center">;</td>
<td align="center"></td>
<td align="center">91</td>
<td align="center">5B</td>
<td align="center">[</td>
<td align="center"></td>
<td align="center">123</td>
<td align="center">7B</td>
<td align="center">{</td>
</tr>
<tr>
<td align="center">28</td>
<td align="center">1C</td>
<td align="center">FS</td>
<td align="center"></td>
<td align="center">60</td>
<td align="center">3C</td>
<td align="center">&lt;</td>
<td align="center"></td>
<td align="center">92</td>
<td align="center">5C</td>
<td align="center">\</td>
<td align="center"></td>
<td align="center">124</td>
<td align="center">7C</td>
<td align="center">|</td>
</tr>
<tr>
<td align="center">29</td>
<td align="center">1D</td>
<td align="center">GS</td>
<td align="center"></td>
<td align="center">61</td>
<td align="center">3D</td>
<td align="center">=</td>
<td align="center"></td>
<td align="center">93</td>
<td align="center">5D</td>
<td align="center">]</td>
<td align="center"></td>
<td align="center">125</td>
<td align="center">7D</td>
<td align="center">}</td>
</tr>
<tr>
<td align="center">30</td>
<td align="center">1E</td>
<td align="center">RS</td>
<td align="center"></td>
<td align="center">62</td>
<td align="center">3E</td>
<td align="center">&gt;</td>
<td align="center"></td>
<td align="center">94</td>
<td align="center">5E</td>
<td align="center">^</td>
<td align="center"></td>
<td align="center">126</td>
<td align="center">7E</td>
<td align="center">~</td>
</tr>
<tr>
<td align="center">31</td>
<td align="center">1F</td>
<td align="center">US</td>
<td align="center"></td>
<td align="center">63</td>
<td align="center">3F</td>
<td align="center">?</td>
<td align="center"></td>
<td align="center">95</td>
<td align="center">5F</td>
<td align="center">——</td>
<td align="center"></td>
<td align="center">127</td>
<td align="center">7F</td>
<td align="center">DEL</td>
</tr>
</tbody></table>
<h3 id="控制符对应表"><a href="#控制符对应表" class="headerlink" title="控制符对应表"></a>控制符对应表</h3><table>
<thead>
<tr>
<th align="center">控制符</th>
<th align="center">控制符</th>
<th align="center">控制符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NUL 空</td>
<td align="center">VT 垂直制表</td>
<td align="center">SYN 空转同步</td>
</tr>
<tr>
<td align="center">SOH 标题开始</td>
<td align="center">FF 走纸控制</td>
<td align="center">ETB 信息组传送结束</td>
</tr>
<tr>
<td align="center">STX 正文开始</td>
<td align="center">CR 回车</td>
<td align="center">CAN 作废</td>
</tr>
<tr>
<td align="center">ETX 正文结束</td>
<td align="center">SO 移位输出</td>
<td align="center">EM 纸尽</td>
</tr>
<tr>
<td align="center">EOY 传输结束</td>
<td align="center">SI 移位输入</td>
<td align="center">SUB 换置</td>
</tr>
<tr>
<td align="center">ENQ 询问字符</td>
<td align="center">DLE 空格</td>
<td align="center">ESC 换码</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>【Tips】HTTP 响应状态码</title>
    <url>/Tips/%E3%80%90Tips%E3%80%91HTTP-%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<h1 id="HTTP-响应状态码"><a href="#HTTP-响应状态码" class="headerlink" title="HTTP 响应状态码"></a>HTTP 响应状态码</h1><p><strong>HTTP</strong> 响应状态码用来表明特定 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">HTTP</a> 请求是否成功完成。 响应被归为以下五大类：</p>
<ol>
<li><strong>信息响应</strong> (100–199)</li>
<li><strong>成功响应</strong> (200–299)</li>
<li><strong>重定向消息</strong> (300–399)</li>
<li><strong>客户端错误响应</strong> (400–499)</li>
<li><strong>服务端错误响应</strong> (500–599)</li>
</ol>
<span id="more"></span>

<p>以下状态码由 <a href="https://datatracker.ietf.org/doc/html/rfc2616#section-10">section 10 of RFC 2616</a> 定义。你可以在 <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-6">RFC 7231</a> 中找到更新后的规范。</p>
<blockquote>
<p><strong>备注</strong>： 如果你收到的响应不在此范围中，则它为非标准响应，可能是服务器软件的自定义响应。</p>
</blockquote>
<h2 id="信息响应"><a href="#信息响应" class="headerlink" title="信息响应"></a>信息响应</h2><h3 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/100">100 Continue</a></h3><p>这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。</p>
<h3 id="101-Switching-Protocols"><a href="#101-Switching-Protocols" class="headerlink" title="101 Switching Protocols"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/101">101 Switching Protocols</a></h3><p>该代码是响应客户端的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade">Upgrade</a> 请求头发送的，指明服务器即将切换的协议。</p>
<h3 id="102-Processing-WebDAV"><a href="#102-Processing-WebDAV" class="headerlink" title="102 Processing (WebDAV)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/102">102 Processing</a> <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/WebDAV">(WebDAV)</a></h3><p>此代码表示服务器已收到并正在处理该请求，但当前没有响应可用。</p>
<h3 id="103-Early-Hints"><a href="#103-Early-Hints" class="headerlink" title="103 Early Hints"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/103">103 Early Hints</a></h3><p>此状态代码主要用于与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link">Link</a> 链接头一起使用，以允许用户代理在服务器准备响应阶段时开始预加载 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload">preloading</a> 资源。</p>
<h2 id="成功响应"><a href="#成功响应" class="headerlink" title="成功响应"></a>成功响应</h2><h3 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200">200 OK</a></h3><p>请求成功。成功的含义取决于 HTTP 方法：</p>
<ul>
<li><code>GET</code>: 资源已被提取并在消息正文中传输。</li>
<li><code>HEAD</code>: 实体标头位于消息正文中。</li>
<li><code>PUT</code> or <code>POST</code>: 描述动作结果的资源在消息体中传输。</li>
<li><code>TRACE</code>: 消息正文包含服务器收到的请求消息。</li>
</ul>
<h3 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/201">201 Created</a></h3><p>该请求已成功，并因此创建了一个新的资源。这通常是在 POST 请求，或是某些 PUT 请求之后返回的响应。</p>
<h3 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/202">202 Accepted</a></h3><p>请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。</p>
<h3 id="203-Non-Authoritative-Information"><a href="#203-Non-Authoritative-Information" class="headerlink" title="203 Non-Authoritative Information"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/203">203 Non-Authoritative Information</a></h3><p>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</p>
<h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204">204 No Content</a></h3><p>对于该请求没有的内容可发送，但头部字段可能有用。用户代理可能会用此时请求头部信息来更新原来资源的头部缓存字段。</p>
<h3 id="205-Reset-Content"><a href="#205-Reset-Content" class="headerlink" title="205 Reset Content"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/205">205 Reset Content</a></h3><p>告诉用户代理重置发送此请求的文档。</p>
<h3 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206">206 Partial Content</a></h3><p>当从客户端发送 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range">Range</a> 范围标头以只请求资源的一部分时，将使用此响应代码。</p>
<h3 id="207-Multi-Status-WebDAV"><a href="#207-Multi-Status-WebDAV" class="headerlink" title="207 Multi-Status (WebDAV)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/207">207 Multi-Status</a> <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/WebDAV">(WebDAV)</a></h3><p>对于多个状态代码都可能合适的情况，传输有关多个资源的信息。</p>
<h3 id="208-Already-Reported-WebDAV"><a href="#208-Already-Reported-WebDAV" class="headerlink" title="208 Already Reported  (WebDAV)"></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/226">208 Already Reported</a>  <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/WebDAV">(WebDAV)</a></h3><p>在 DAV 里面使用 <code>&lt;dav:propstat&gt;</code> 响应元素以避免重复枚举多个绑定的内部成员到同一个集合。</p>
<h3 id="226-IM-Used-HTTP-Delta-encoding"><a href="#226-IM-Used-HTTP-Delta-encoding" class="headerlink" title="226 IM Used (HTTP Delta encoding)"></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/226">226 IM Used</a> <a href="https://datatracker.ietf.org/doc/html/rfc3229">(HTTP Delta encoding)</a></h3><p>服务器已经完成了对资源的 GET 请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。</p>
<h2 id="重定向消息"><a href="#重定向消息" class="headerlink" title="重定向消息"></a>重定向消息</h2><h3 id="300-Multiple-Choice"><a href="#300-Multiple-Choice" class="headerlink" title="300 Multiple Choice"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/300">300 Multiple Choice</a></h3><p>请求拥有多个可能的响应。用户代理或者用户应当从中选择一个。（没有标准化的方法来选择其中一个响应，但是建议使用指向可能性的 HTML 链接，以便用户可以选择。）</p>
<h3 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/301">301 Moved Permanently</a></h3><p>请求资源的 URL 已永久更改。在响应中给出了新的 URL。</p>
<h3 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302">302 Found</a></h3><p>此响应代码表示所请求资源的 URI 已 暂时 更改。未来可能会对 URI 进行进一步的改变。因此，客户机应该在将来的请求中使用这个相同的 URI。</p>
<h3 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/303">303 See Other</a></h3><p>服务器发送此响应，以指示客户端通过一个 GET 请求在另一个 URI 中获取所请求的资源。</p>
<h3 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/304">304 Not Modified</a></h3><p>这是用于缓存的目的。它告诉客户端响应还没有被修改，因此客户端可以继续使用相同的缓存版本的响应。</p>
<h3 id="305-Use-Proxy"><a href="#305-Use-Proxy" class="headerlink" title="305 Use Proxy"></a><del>305 Use Proxy</del></h3><p>在 HTTP 规范中定义，以指示请求的响应必须被代理访问。由于对代理的带内配置的安全考虑，它已被弃用。</p>
<h3 id="306-unused"><a href="#306-unused" class="headerlink" title="306 unused"></a><del>306 unused</del></h3><p>此响应代码不再使用；它只是保留。它曾在 HTTP/1.1 规范的早期版本中使用过。</p>
<h3 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/307">307 Temporary Redirect</a></h3><p>服务器发送此响应，以指示客户端使用在前一个请求中使用的相同方法在另一个 URI 上获取所请求的资源。这与 302 Found HTTP 响应代码具有相同的语义，但用户代理 不能 更改所使用的 HTTP 方法：如果在第一个请求中使用了 POST，则在第二个请求中必须使用 POST</p>
<h3 id="308-Permanent-Redirect"><a href="#308-Permanent-Redirect" class="headerlink" title="308 Permanent Redirect"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/308">308 Permanent Redirect</a></h3><p>这意味着资源现在永久位于由 Location: HTTP Response 标头指定的另一个 URI。这与 301 Moved Permanently HTTP 响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP 方法：如果在第一个请求中使用 POST，则必须在第二个请求中使用 POST。</p>
<h2 id="客户端错误响应"><a href="#客户端错误响应" class="headerlink" title="客户端错误响应"></a>客户端错误响应</h2><h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/400">400 Bad Request</a></h3><p>由于被认为是客户端错误（例如，错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理请求。</p>
<h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/401">401 Unauthorized</a></h3><p>虽然 HTTP 标准指定了”unauthorized”，但从语义上来说，这个响应意味着”unauthenticated”。也就是说，客户端必须对自身进行身份验证才能获得请求的响应。</p>
<h3 id="402-Payment-Required"><a href="#402-Payment-Required" class="headerlink" title="402 Payment Required"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/402">402 Payment Required</a></h3><p>此响应代码保留供将来使用。创建此代码的最初目的是将其用于数字支付系统，但是此状态代码很少使用，并且不存在标准约定。</p>
<h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/403">403 Forbidden</a></h3><p>客户端没有访问内容的权限；也就是说，它是未经授权的，因此服务器拒绝提供请求的资源。与 401 Unauthorized 不同，服务器知道客户端的身份。</p>
<h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404">404 Not Found</a></h3><p>服务器找不到请求的资源。在浏览器中，这意味着无法识别 URL。在 API 中，这也可能意味着端点有效，但资源本身不存在。服务器也可以发送此响应，而不是 403 Forbidden，以向未经授权的客户端隐藏资源的存在。这个响应代码可能是最广为人知的，因为它经常出现在网络上。</p>
<h3 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/405">405 Method Not Allowed</a></h3><p>服务器知道请求方法，但目标资源不支持该方法。例如，API 可能不允许调用 DELETE 来删除资源。</p>
<h3 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/406">406 Not Acceptable</a></h3><p>当 web 服务器在执行 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Content_negotiation#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%A9%B1%E5%8A%A8%E5%9E%8B%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E6%9C%BA%E5%88%B6">服务端驱动型内容协商机制</a> 后，没有发现任何符合用户代理给定标准的内容时，就会发送此响应。</p>
<h3 id="407-Proxy-Authentication-Required"><a href="#407-Proxy-Authentication-Required" class="headerlink" title="407 Proxy Authentication Required"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/407">407 Proxy Authentication Required</a></h3><p>类似于 401 Unauthorized 但是认证需要由代理完成。</p>
<h3 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/408">408 Request Timeout</a></h3><p>此响应由一些服务器在空闲连接上发送，即使客户端之前没有任何请求。这意味着服务器想关闭这个未使用的连接。由于一些浏览器，如 Chrome、Firefox 27+ 或 IE9，使用 HTTP 预连接机制来加速冲浪，所以这种响应被使用得更多。还要注意的是，有些服务器只是关闭了连接而没有发送此消息。</p>
<h3 id="409-Conflict"><a href="#409-Conflict" class="headerlink" title="409 Conflict"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/409">409 Conflict</a></h3><p>当请求与服务器的当前状态冲突时，将发送此响应。</p>
<h3 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/410">410 Gone</a></h3><p>当请求的内容已从服务器中永久删除且没有转发地址时，将发送此响应。客户端需要删除缓存和指向资源的链接。HTTP 规范打算将此状态代码用于“有限时间的促销服务”。API 不应被迫指出已使用此状态代码删除的资源。</p>
<h3 id="411-Length-Required"><a href="#411-Length-Required" class="headerlink" title="411 Length Required"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/411">411 Length Required</a></h3><p>服务端拒绝该请求因为 Content-Length 头部字段未定义但是服务端需要它。</p>
<h3 id="412-Precondition-Failed"><a href="#412-Precondition-Failed" class="headerlink" title="412 Precondition Failed"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/412">412 Precondition Failed</a></h3><p>客户端在其头文件中指出了服务器不满足的先决条件。</p>
<h3 id="413-Payload-Too-Large"><a href="#413-Payload-Too-Large" class="headerlink" title="413 Payload Too Large"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/413">413 Payload Too Large</a></h3><p>请求实体大于服务器定义的限制。服务器可能会关闭连接，或在标头字段后返回重试 Retry-After。</p>
<h3 id="414-URI-Too-Long"><a href="#414-URI-Too-Long" class="headerlink" title="414 URI Too Long"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/414">414 URI Too Long</a></h3><p>客户端请求的 URI 比服务器愿意接收的长度长。</p>
<h3 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/415">415 Unsupported Media Type</a></h3><p>服务器不支持请求数据的媒体格式，因此服务器拒绝请求。</p>
<h3 id="416-Range-Not-Satisfiable"><a href="#416-Range-Not-Satisfiable" class="headerlink" title="416 Range Not Satisfiable"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/416">416 Range Not Satisfiable</a></h3><p>无法满足请求中 Range 标头字段指定的范围。该范围可能超出了目标 URI 数据的大小。</p>
<h3 id="417-Expectation-Failed"><a href="#417-Expectation-Failed" class="headerlink" title="417 Expectation Failed"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/417">417 Expectation Failed</a></h3><p>此响应代码表示服务器无法满足 Expect 请求标头字段所指示的期望。</p>
<h3 id="418-I’m-a-teapot"><a href="#418-I’m-a-teapot" class="headerlink" title="418 I’m a teapot"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/418">418 I’m a teapot</a></h3><p>服务端拒绝用茶壶煮咖啡。笑话，典故来源 <a href>茶壶冲泡咖啡</a></p>
<h3 id="421-Misdirected-Request"><a href="#421-Misdirected-Request" class="headerlink" title="421 Misdirected Request"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/421">421 Misdirected Request</a></h3><p>请求被定向到无法生成响应的服务器。这可以由未配置为针对请求 URI 中包含的方案和权限组合生成响应的服务器发送。</p>
<h3 id="422-Unprocessable-Entity-WebDAV"><a href="#422-Unprocessable-Entity-WebDAV" class="headerlink" title="422 Unprocessable Entity (WebDAV)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/422">422 Unprocessable Entity</a> (WebDAV)</h3><p>请求格式正确，但由于语义错误而无法遵循。</p>
<h3 id="423-Locked-WebDAV"><a href="#423-Locked-WebDAV" class="headerlink" title="423 Locked (WebDAV)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/423">423 Locked</a> (WebDAV)</h3><p>正在访问的资源已锁定。</p>
<h3 id="424-Failed-Dependency-WebDAV"><a href="#424-Failed-Dependency-WebDAV" class="headerlink" title="424 Failed Dependency (WebDAV)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/424">424 Failed Dependency</a> (WebDAV)</h3><p>由于前一个请求失败，请求失败。</p>
<h3 id="425-Too-Early"><a href="#425-Too-Early" class="headerlink" title="425 Too Early"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/425">425 Too Early</a></h3><p>表示服务器不愿意冒险处理可能被重播的请求。</p>
<h3 id="426-Upgrade-Required"><a href="#426-Upgrade-Required" class="headerlink" title="426 Upgrade Required"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/426">426 Upgrade Required</a></h3><p>服务器拒绝使用当前协议执行请求，但在客户端升级到其他协议后可能愿意这样做。 服务端发送带有 Upgrade 字段的 426 响应 来表明它所需的协议（们）。</p>
<h3 id="428-Precondition-Required"><a href="#428-Precondition-Required" class="headerlink" title="428 Precondition Required"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/428">428 Precondition Required</a></h3><p>源服务器要求请求是有条件的。此响应旨在防止’丢失更新’问题，即当第三方修改服务器上的状态时，客户端 GET 获取资源的状态，对其进行修改并将其 PUT 放回服务器，从而导致冲突。</p>
<h3 id="429-Too-Many-Requests"><a href="#429-Too-Many-Requests" class="headerlink" title="429 Too Many Requests"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/429">429 Too Many Requests</a></h3><p>用户在给定的时间内发送了太多请求（”限制请求速率”）</p>
<h3 id="431-Request-Header-Fields-Too-Large"><a href="#431-Request-Header-Fields-Too-Large" class="headerlink" title="431 Request Header Fields Too Large"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/431">431 Request Header Fields Too Large</a></h3><p>服务器不愿意处理请求，因为其头字段太大。在减小请求头字段的大小后，可以重新提交请求。</p>
<h3 id="451-Unavailable-For-Legal-Reasons"><a href="#451-Unavailable-For-Legal-Reasons" class="headerlink" title="451 Unavailable For Legal Reasons"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/451">451 Unavailable For Legal Reasons</a></h3><p>用户代理请求了无法合法提供的资源，例如政府审查的网页。</p>
<h2 id="服务端错误响应"><a href="#服务端错误响应" class="headerlink" title="服务端错误响应"></a>服务端错误响应</h2><h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/500">500 Internal Server Error</a></h3><p>服务器遇到了不知道如何处理的情况。</p>
<h3 id="501-Not-Implemented"><a href="#501-Not-Implemented" class="headerlink" title="501 Not Implemented"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/501">501 Not Implemented</a></h3><p>服务器不支持请求方法，因此无法处理。服务器需要支持的唯二方法（因此不能返回此代码）是 GET and HEAD.</p>
<h3 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/502">502 Bad Gateway</a></h3><p>此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</p>
<h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/503">503 Service Unavailable</a></h3><p>服务器没有准备好处理请求。常见原因是服务器因维护或重载而停机。请注意，与此响应一起，应发送解释问题的用户友好页面。这个响应应该用于临时条件和如果可能的话，HTTP 标头 Retry-After 字段应该包含恢复服务之前的估计时间。网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。</p>
<h3 id="504-Gateway-Timeout"><a href="#504-Gateway-Timeout" class="headerlink" title="504 Gateway Timeout"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/504">504 Gateway Timeout</a></h3><p>当服务器充当网关且无法及时获得响应时，会给出此错误响应。</p>
<h3 id="505-HTTP-Version-Not-Supported"><a href="#505-HTTP-Version-Not-Supported" class="headerlink" title="505 HTTP Version Not Supported"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/505">505 HTTP Version Not Supported</a></h3><p>服务器不支持请求中使用的 HTTP 版本。</p>
<h3 id="506-Variant-Also-Negotiates"><a href="#506-Variant-Also-Negotiates" class="headerlink" title="506 Variant Also Negotiates"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/506">506 Variant Also Negotiates</a></h3><p>服务器存在内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当终点。</p>
<h3 id="507-Insufficient-Storage-WebDAV"><a href="#507-Insufficient-Storage-WebDAV" class="headerlink" title="507 Insufficient Storage (WebDAV)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/507">507 Insufficient Storage</a> (WebDAV)</h3><p>无法在资源上执行该方法，因为服务器无法存储成功完成请求所需的表示。</p>
<h3 id="508-Loop-Detected-WebDAV"><a href="#508-Loop-Detected-WebDAV" class="headerlink" title="508 Loop Detected (WebDAV)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/508">508 Loop Detected</a> (WebDAV)</h3><p>服务器在处理请求时检测到无限循环。</p>
<h3 id="510-Not-Extended"><a href="#510-Not-Extended" class="headerlink" title="510 Not Extended"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/510">510 Not Extended</a></h3><p>服务器需要对请求进行进一步扩展才能完成请求。</p>
<h3 id="511-Network-Authentication-Required"><a href="#511-Network-Authentication-Required" class="headerlink" title="511 Network Authentication Required"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/511">511 Network Authentication Required</a></h3><p>指示客户端需要进行身份验证才能获得网络访问权限。</p>
<h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status#305_use_proxy">Report problems with this compatibility data on GitHub</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">MDN 文档</a></li>
<li><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">维基百科上的 HTTP 状态码</a></li>
<li><a href="https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml">IANA official registry of HTTP status codes</a></li>
</ul>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>【Tips】Git常用命令汇总</title>
    <url>/Tips/%E3%80%90Tips%E3%80%91Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="Git常用命令汇总"><a href="#Git常用命令汇总" class="headerlink" title="Git常用命令汇总"></a>Git常用命令汇总</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>在本地新建一个repo，进入一个项目目录，执行git init，会初始化一个repo，并在当前文件夹下创建一个.git文件夹。</p>
<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add README</span><br></pre></td></tr></table></figure>

<p>在提交之前, Git有一个<code>暂存区(staging area)</code>,可以放入新添加的文件或者加入新的改动, commit时提交的改动是上一次加入到staging area中的改动, 而不是我们<code>disk</code>上的改动。<code>git add .</code>会递归地添加当前工作目录中的所有文件.</p>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;first commit&quot;</span><br><span class="line">$ git commit -a</span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提交已经被add进来的改动。</p>
</blockquote>
<p><code>git commit -m “the commit message&quot;</code><br><code>git commit -a</code> 会先把所有已经<code>track</code>的文件的改动add进来，然后提交(有点像svn的一次提交，不用先暂存)。对于没有track的文件，还是需要<code>git add</code>一下。<br><code>git commit --amend</code> 增补提交，会使用与当前提交节点相同的父节点进行一次新的提交，旧的提交将会被取消。</p>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote add [alias] [url]</span><br><span class="line">$ git remote rm [alias]</span><br><span class="line">$ git remote rename [old-alias] [new-alias]</span><br><span class="line">$ git remote set-url [alias] [url]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>git remote</code>: list，add and delete remote repository aliases。<br>因为不需要每次都用完整的url，所以Git为每一个remote repo的url都建立一个别名，然后用git remote来管理这个list。</strong></p>
</blockquote>
<p><code>git remote</code>：列出remote aliases。<br>如果你clone一个project，Git会自动将原来的url添加进来，别名就叫做: origin。<br><code>git remote -v</code>：可以看见每一个别名对应的实际url。<br><code>git remote add [alias] [url]</code>： 添加一个新的remote repo。<br><code>git remote rm [alias]</code>： 删除一个存在的remote alias。<br><code>git remote rename [old-alias] [new-alias]</code>： 重命名。<br><code>git remote set-url [alias] [url]</code>：更新url，可以加上—push和fetch参数，为同一个别名set不同的存取地址。</p>
<h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -v</span><br><span class="line">$ git branch</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line">$ git branch -D [branch-name]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>git branch，可以用来列出分支，创建分支和删除分支。</strong></p>
</blockquote>
<p><code>git branch -v</code>： 可以看见每一个分支的最后一次提交。<br><code>git branch</code>： 列出本地所有分支，当前分支会被星号标示出。<br><code>git branch [branch-name]</code>: 创建一个新的分支(当你用这种方式创建分支的时候，分支是基于你的上一次提交建立的)。<br><code>git branch -d [branch-name]</code>: 删除指定分支。（<em>查看哪些分支已被并入当前分支，清单中带有<code>*</code>字符的表示当前所在的分支。一般来说，列表中没有<code>*</code>的分支通常都可以用 <code>git branch -d</code> 来删掉。对于未合并的分支，用 git branch -d 删除该分支会导致失败。不过，如果你坚信你要删除它，可以用大写的删除选项 <code>git branch -D</code> 强制执行</em>）</p>
<h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout [branch-name]</span><br><span class="line">$ git checkout -b [branch-name]</span><br><span class="line">$ git checkout --&lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p><code>git checkout [branch-name]</code> ： 切换到一个分支。<br><code>git checkout -b [branch-name]</code>：创建并切换到新的分支。这个命令是将 <code>git branch newbranch</code> 和 <code>git checkout newbranch</code> 合在一起的结果。</p>
<p>checkout 还有另一个作用：替换本地改动。</p>
<p><code>git checkout --&lt;filename&gt;</code>：此命令会使用HEAD中的最新内容替换掉你的工作目录中的文件，已添加到暂存区的改动以及新文件都不会受到影响。</p>
<p><font color="#FF0000"><strong>注意: git checkout filename 会删除该文件中所有没有暂存和提交的改动,这个操作是不可逆的.</strong></font></p>
<h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git merge [alias]/[branch]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>git merge，把一个分支merge进当前的分支。</strong></p>
</blockquote>
<p><code>git merge [alias]/[branch]</code>：把远程分支merge到当前分支。</p>
<p>如果出现冲突，需要手动修改，可以用<code>git mergetool</code>。解决冲突的时候可以用到<code>git diff</code>，解决完之后用<code>git add</code>添加，即表示冲突已经被resolved。</p>
<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push [alias] [branch]</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>push your new branches and data to a remote repository aliases.</strong></p>
</blockquote>
<p><code>git push [alias] [branch]</code> ：将会把当前分支 merge 到 [alias] 上的 [branch] 分支。如果分支已经存在，将会更新，如果不存在，将会添加这个分支。</p>
<p>如果有多个人向同一个 <code>remote repo</code> push代码， Git会首先在你试图 push 的分支上运行 git log，检查它的历史中是否能看到 server 上的 branch 现在的 tip，如果本地历史中不能看到server的tip，说明本地的代码不是最新的，Git会拒绝你的push，让你先<code>fetch + merge (pull)</code>，之后再 push，这样就保证了所有人的改动都会被考虑进来。</p>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>fetch from a remote repo and try to merge into the current branch.<br>pull == fetch + merge FETCH_HEAD</strong></p>
</blockquote>
<p><code>git pull</code>：会首先执行<code>git fetch</code>，然后执行<code>git merge</code>，把取来的分支的 head <code>merge</code> 到当前分支。这个 merge 操作会产生一个新的commit。<br>如果使用<code>--rebase</code>参数，它会执行<code>git rebase</code>来取代原来的<code>git merge</code>。</p>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone [url]</span><br><span class="line">$ git clone [url] [newname]</span><br></pre></td></tr></table></figure>

<p><code>git clone [url]</code>：获取一个url对应的远程Git repo， 创建一个local copy。</p>
<p>clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹，如果想要指定特定的名称，可以<code>git clone [url] newname</code>指定。</p>
<h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag v1.0</span><br><span class="line">git tag -a v1.0</span><br><span class="line">git push -v origin refs/tags/0.1.0</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>tag a point in history as import.</strong></p>
</blockquote>
<p><code>git tag v1.0</code>，会在一个提交上建立永久性的书签，通常是发布一个release版本或者ship了什么东西之后加tag。</p>
<p><code>git tag -a v1.0</code>, -a 参数会允许你添加一些信息，即make an annotated tag。当你运行git tag -a命令的时候，Git会打开一个编辑器让你输入tag信息。</p>
<p><code>git push -v origin refs/tags/0.1.0</code>， 推送标签至远端。</p>
<p>我们可以利用commit SHA来给一个过去的提交打tag:<br><code>git tag -a v0.9 XXXX</code></p>
<p>push的时候是不包含tag的，如果想包含，可以在push时加上<code>--tags</code>参数。</p>
<p>fetch的时候，branch HEAD可以reach的tags是自动被fetch下来的，tags that aren’t reachable from branch heads will be skipped。如果想确保所有的tags都被包含进来，需要加上<code>--tags</code>选项。</p>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>【Tips】Mac 如何取消 sudo 时输入密码的提示</title>
    <url>/Tips/%E3%80%90Tips%E3%80%91Mac-%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88-sudo-%E6%97%B6%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>由于我想访问 GitHub 速度更快一些，使用了 SwitchHosts 对系统 Hosts 文件进行实时读写，在每一次同步远端文件进行写入时都提示要输入 Sudo 密码。</p>
<p>然后，我就想如何才能不每次都提示。</p>
<span id="more"></span>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="确定自己的用户名"><a href="#确定自己的用户名" class="headerlink" title="确定自己的用户名"></a>确定自己的用户名</h3><p>打开终端，使用 <code>whoami</code> 命令查看自己的用户名: <code>&lt;user-account-name&gt;</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure>

<h3 id="修改-sudoers-文件"><a href="#修改-sudoers-文件" class="headerlink" title="修改 sudoers 文件"></a>修改 sudoers 文件</h3><ol>
<li>得到用户名称后就可以修改权限了</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span> sudo vi <span class="operator">/</span>etc<span class="operator">/</span>sudoers</span><br><span class="line"><span class="type">Password</span>: </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>输入密码后修改或增加用户权限</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># root and users <span class="keyword">in</span> group wheel can run anything on <span class="keyword">any</span> machine <span class="keyword">as</span> <span class="keyword">any</span> user</span><br><span class="line"><span class="operator">&lt;</span>user<span class="operator">-</span>account<span class="operator">-</span>name<span class="operator">&gt;</span>   <span class="type">ALL</span> <span class="operator">=</span> (<span class="type">ALL</span>)<span class="type">NOPASSWD</span>:<span class="type">ALL</span></span><br></pre></td></tr></table></figure>

<p>保存即可，下次再用 sudo 命令就无需再输入密码了。</p>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>【Tips】Markdown 语法</title>
    <url>/Tips/%E3%80%90Tips%E3%80%91Markdown-%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><h2 id="一、Markdown纯文本基本语法"><a href="#一、Markdown纯文本基本语法" class="headerlink" title="一、Markdown纯文本基本语法"></a>一、Markdown纯文本基本语法</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">=======</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">----------</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>效果如下：</p>
<h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><p>任何数量的 = 和 - 都可以有效果。</p>
<p>这里需要注意一点，由于分割线也是 “—-”， 因此在使用分割线时，一定要空一行，不然会把上方的文字识别为第二阶标题。原因会在后面的段落和换行中说到。<br>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># this is H1</span><br><span class="line">## this is H2</span><br><span class="line">###### this is H6</span><br></pre></td></tr></table></figure>

<p>效果不再展示，但要注意的是，标准语法一般在 # 后跟个空格再写文字，不然可能会无法识别。</p>
<h3 id="2-字体"><a href="#2-字体" class="headerlink" title="2. 字体"></a>2. 字体</h3><h4 id="粗-斜-删除线-下划线"><a href="#粗-斜-删除线-下划线" class="headerlink" title="粗/斜/删除线/下划线"></a>粗/斜/删除线/下划线</h4><p>Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。但个人感觉写中文时还是（*）比较好用，因为它不区分全角半角，不用切换输入法。 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**这是加粗**</span><br><span class="line">__这也是加粗__</span><br><span class="line">*这是倾斜*</span><br><span class="line">_这也是倾斜_</span><br><span class="line">***这是加粗倾斜***</span><br><span class="line">~~这是加删除线~~</span><br></pre></td></tr></table></figure>

<p>效果如下：<br><strong>这是加粗</strong><br><strong>这也是加粗</strong><br><em>这是倾斜</em><br><em>这也是倾斜</em><br><em><strong>这是加粗倾斜</strong></em><br><del>这是加删除线</del></p>
<p>注意：强调也可以直接插在文字中间，但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线 \ 。</p>
<h4 id="字体、字号、颜色"><a href="#字体、字号、颜色" class="headerlink" title="字体、字号、颜色"></a>字体、字号、颜色</h4><p>如果想要指定字体大小、颜色和类型可以通过<code>&lt;font&gt;&lt;/font&gt;</code>语法来完成。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">指定字体类型： &lt;font face=<span class="string">&quot;黑体&quot;</span>&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">指定字体大小： &lt;font size=<span class="number">12</span>&gt;我是<span class="number">12</span>号字&lt;/font&gt;</span><br><span class="line">指定字体颜色：&lt;font color=#0099ff&gt;我是蓝色字&lt;/font&gt; #0099ff 为颜色的<span class="number">16</span>进制代码</span><br><span class="line">指定字体颜色、字号、字体类型&lt;font color=#0099ff size=<span class="number">12</span> face=<span class="string">&quot;黑体&quot;</span>&gt;黑体&lt;/font&gt;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>指定字体类型： <font face="黑体">我是黑体字</font><br>指定字体大小： <font size="12">我是12号字</font><br>指定字体颜色：<font color="#0099ff">我是蓝色字</font> #0099ff 为颜色的16进制代码<br>指定字体颜色、字号、字体类型<font color="#0099ff" size="12" face="黑体">黑体</font></p>
<h3 id="3-分割线"><a href="#3-分割线" class="headerlink" title="3. 分割线"></a>3. 分割线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * *</span><br><span class="line">***</span><br><span class="line">**********</span><br><span class="line">- - -</span><br><span class="line">_________________</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<hr>
<hr>
<hr>
<h3 id="4-引用"><a href="#4-引用" class="headerlink" title="4. 引用"></a>4. 引用</h3><p>在引用的文字前加 &gt; 即可。 在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">&gt; </span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">&gt; id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
</blockquote>
<p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
</blockquote>
<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; This is the first level of quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This is nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; &gt; &gt; Back to the first level.</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>Back to the first level.</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。</p>
<h3 id="5-列表"><a href="#5-列表" class="headerlink" title="5. 列表"></a>5. 列表</h3><p>Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记。 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>

<p>效果如下： </p>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<p>有序列表则使用数字接着一个英文句点作为标记。 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line">注意：序号跟内容之间要有空格 </span><br></pre></td></tr></table></figure>
<p>效果如下： </p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<p>列表可以嵌套，上一级和下一级之间敲三个空格即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 一级无序列表内容</span><br><span class="line"></span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br></pre></td></tr></table></figure>

<p>效果如下： </p>
<ul>
<li><p>一级无序列表内容</p>
<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
</ul>
<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing</span><br></pre></td></tr></table></figure>

<p>效果如下： </p>
<ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>  Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>  viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>  Suspendisse id sem consectetuer libero luctus adipiscing</li>
</ul>
<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>
<p>效果如下： </p>
<ol>
<li><p>This is a list item with two paragraphs. Lorem ipsum dolor<br> sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br> mi posuere lectus.</p>
<p> Vestibulum enim wisi, viverra nec, fringilla in, laoreet<br> vitae, risus. Donec sit amet nisl. Aliquam semper ipsum<br> sit amet velit.</p>
</li>
<li><p> Suspendisse id sem consectetuer libero luctus adipiscing.</p>
</li>
</ol>
<p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You&#x27;re</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></table></figure>

<p>效果不再展示。 此外： 如果要在列表项目内放进引用，那 &gt; 就需要缩进， 如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符。</p>
<h3 id="6-表格"><a href="#6-表格" class="headerlink" title="6. 表格"></a>6. 表格</h3><p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>

<p>效果如下： </p>
<table>
<thead>
<tr>
<th>表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
<tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
</tbody></table>
<h3 id="7-代码"><a href="#7-代码" class="headerlink" title="7. 代码"></a>7. 代码</h3><p>在Markdown中加入代码块有两种方式： 第一种，只要简单地缩进 4 个空格或是 1 个制表符就可以:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br><span class="line"></span><br><span class="line">(当然，前面要有一个空行和前面的文字分隔开)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>这是一个普通段落：</p>
<pre><code>这是一个代码区块。
</code></pre>
<p>第二种方法似乎是更为常用， 单行代码：代码之间分别用一个反引号包起来即可；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里有一句代码`代码内容`。</span><br></pre></td></tr></table></figure>
<p>效果如下：<br>这里有一句代码<code>代码内容</code>。</p>
<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\```</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">\```</span><br><span class="line">\ 是为了防止转译，实际是没有的。</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码...</span><br><span class="line">代码...</span><br><span class="line">代码...</span><br></pre></td></tr></table></figure>
<p>还可以在上面的 ``` 后面注明你的代码类型，可以产生相应的代码高亮。</p>
<h3 id="8-段落和换行"><a href="#8-段落和换行" class="headerlink" title="8. 段落和换行"></a>8. 段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。 我们在两个不同的文字块之间，一定要空行以示区分，不然就会被归入同一文字块中。 </p>
<h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>Markdown 允许段落内的强迫换行（插入换行符）。 如果想要空一行，在插入处先按入两个以上的空格然后回车，即可。</p>
<ul>
<li>方法1：连敲2个以上空格+enter键；</li>
<li>方法2：利用html语法，<code>&lt;br&gt;</code>。</li>
</ul>
<h4 id="缩进-空格"><a href="#缩进-空格" class="headerlink" title="缩进/空格"></a>缩进/空格</h4><p>但有时也可以使用标记来强制空行和空格，比如需要首行缩进的时候： 一个空格大小的表示：\  或 \  两个空格的大小表示：\ 或 \ 不换行空格：\ 或 \ 强制空行： \</p>
<blockquote>
<p>由于平时中文的排版习惯，首行通常缩进两字符什么的，所以顺便也了解以下操作,在markdown里这个还稍微有点麻烦，不是敲两下空格键就搞定的。这里需要借用html方面的空格实体。<br>首先明确1个汉字=2个空格大小<br>1、一个空格大小的表示&ensp; &#8194;两种用法显示效果一致。<br>2、两个空格大小的表示&emsp; &#8195;两种用法显示效果一致。<br>3、不换行空格的表示&nbsp; &#160;也是占一个空格的宽度大小。</p>
</blockquote>
<h3 id="9-插入超链接"><a href="#9-插入超链接" class="headerlink" title="9. 插入超链接"></a>9. 插入超链接</h3><p>链接分两种。一种是链接到其他网上地址的，还有一种是链接到本文中的某个位置的。<br>两种的基本格式一样<code>[]()</code>。需要添加链接的文字内容用<code>[方括号]</code>来括起来，后面紧跟着带有网址的<code>(圆括号)</code>，如果要加上连接的title文字，在网址后面，把 title文字放到双引号里面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br><span class="line">文字链接 [链接名称](http://链接网址)</span><br><span class="line">网址链接 &lt;http://链接网址&gt;</span><br><span class="line">实例：</span><br><span class="line">[Github](https://github.com/fengyanxin) &amp;emsp;&lt;https://github.com/fengyanxin&gt;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><a href="https://github.com/fengyanxin">Github</a>：<a href="https://github.com/fengyanxin">https://github.com/fengyanxin</a></p>
<h3 id="10-插入图片"><a href="#10-插入图片" class="headerlink" title="10. 插入图片"></a>10. 插入图片</h3><p>添加图片形式和链接相似，只需要在链接的基础上前方加一个<code>！</code> 感叹号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址  &quot;optional title&quot;)</span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释，可以不写。</span><br><span class="line">图片地址链接可以是图片的本地地址或网址。</span><br><span class="line">图片optional title是图片的标题，当鼠标悬置于图片上时显示的内容。title可加可不加。</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91Markdown-%E8%AF%AD%E6%B3%95/16781754751832.jpg"></p>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>【Tips】国际公认国家地区代码表</title>
    <url>/Tips/%E3%80%90Tips%E3%80%91%E5%9B%BD%E9%99%85%E5%85%AC%E8%AE%A4%E5%9B%BD%E5%AE%B6%E5%9C%B0%E5%8C%BA%E4%BB%A3%E7%A0%81%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="国际公认国家地区代码表"><a href="#国际公认国家地区代码表" class="headerlink" title="国际公认国家地区代码表"></a>国际公认国家地区代码表</h1><span id="more"></span>

<table>
<thead>
<tr>
<th align="center">洲</th>
<th align="center">二位字母</th>
<th align="center">国家或地区（ISO 英文用名）</th>
<th align="center">中国 惯用名</th>
<th align="center">台湾 惯用名</th>
<th align="center">香港 惯用名</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">欧洲</td>
<td align="center">AD</td>
<td align="center">Andorra</td>
<td align="center">安道尔</td>
<td align="center">安道尔</td>
<td align="center">安道尔</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">AL</td>
<td align="center">Albania</td>
<td align="center">阿尔巴尼亚</td>
<td align="center">阿尔巴尼亚</td>
<td align="center">阿尔巴尼亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">AT</td>
<td align="center">Austria</td>
<td align="center">奥地利</td>
<td align="center">奥地利</td>
<td align="center">奥地利</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">AX</td>
<td align="center">Aland Island</td>
<td align="center">奥兰群岛</td>
<td align="center">奥兰群岛</td>
<td align="center">亚兰群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BA</td>
<td align="center">Bosnia &amp; Herzegovina</td>
<td align="center">波黑</td>
<td align="center">波黑</td>
<td align="center">波黑</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BE</td>
<td align="center">Belgium</td>
<td align="center">比利时</td>
<td align="center">比利时</td>
<td align="center">比利时</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BG</td>
<td align="center">Bulgaria</td>
<td align="center">保加利亚</td>
<td align="center">保加利亚</td>
<td align="center">保加利亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BL</td>
<td align="center">Saint Barthélemy</td>
<td align="center">圣巴泰勒米岛</td>
<td align="center">圣巴瑟米</td>
<td align="center">圣巴托洛缪岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BM</td>
<td align="center">Bermuda</td>
<td align="center">百慕大</td>
<td align="center">百慕大</td>
<td align="center">百慕大</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BQ</td>
<td align="center">Caribbean Netherlands</td>
<td align="center">荷兰加勒比区</td>
<td align="center">荷兰加勒比区</td>
<td align="center">荷兰加勒比区</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BV</td>
<td align="center">Bouvet Island</td>
<td align="center">布韦岛</td>
<td align="center">布威岛</td>
<td align="center">鲍威特岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BY</td>
<td align="center">Belarus</td>
<td align="center">白俄罗斯</td>
<td align="center">白俄罗斯</td>
<td align="center">白俄罗斯</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CH</td>
<td align="center">Switzerland</td>
<td align="center">瑞士</td>
<td align="center">瑞士</td>
<td align="center">瑞士</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CZ</td>
<td align="center">Czech Republic</td>
<td align="center">捷克</td>
<td align="center">捷克</td>
<td align="center">捷克</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">DE</td>
<td align="center">Germany</td>
<td align="center">德国</td>
<td align="center">德国</td>
<td align="center">德国</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">DK</td>
<td align="center">Denmark</td>
<td align="center">丹麦</td>
<td align="center">丹麦</td>
<td align="center">丹麦</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">EE</td>
<td align="center">Estonia</td>
<td align="center">爱沙尼亚</td>
<td align="center">爱沙尼亚</td>
<td align="center">爱沙尼亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">ES</td>
<td align="center">Spain</td>
<td align="center">西班牙</td>
<td align="center">西班牙</td>
<td align="center">西班牙</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">FI</td>
<td align="center">Finland</td>
<td align="center">芬兰</td>
<td align="center">芬兰</td>
<td align="center">芬兰</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">FO</td>
<td align="center">Faroe Islands</td>
<td align="center">法罗群岛</td>
<td align="center">法罗群岛</td>
<td align="center">法罗群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">FR</td>
<td align="center">France</td>
<td align="center">法国</td>
<td align="center">法国</td>
<td align="center">法国</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GI</td>
<td align="center">Gibraltar</td>
<td align="center">直布罗陀</td>
<td align="center">直布罗陀</td>
<td align="center">直布罗陀</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GR</td>
<td align="center">Greece</td>
<td align="center">希腊</td>
<td align="center">希腊</td>
<td align="center">希腊</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GS</td>
<td align="center">South Georgia and the South Sandwich Islands</td>
<td align="center">南乔治亚岛和南桑威奇群岛</td>
<td align="center">南乔治亚与南三明治群岛</td>
<td align="center">南乔治亚岛与南桑威奇群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">HR</td>
<td align="center">Croatia</td>
<td align="center">克罗地亚</td>
<td align="center">克罗地亚</td>
<td align="center">克罗地亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">HU</td>
<td align="center">Hungary</td>
<td align="center">匈牙利</td>
<td align="center">匈牙利</td>
<td align="center">匈牙利</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">IE</td>
<td align="center">Ireland</td>
<td align="center">爱尔兰</td>
<td align="center">爱尔兰</td>
<td align="center">爱尔兰</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">IM</td>
<td align="center">Isle of Man</td>
<td align="center">马恩岛</td>
<td align="center">马恩岛</td>
<td align="center">马恩岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">IS</td>
<td align="center">Iceland</td>
<td align="center">冰岛</td>
<td align="center">冰岛</td>
<td align="center">冰岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">IT</td>
<td align="center">Italy</td>
<td align="center">意大利</td>
<td align="center">意大利</td>
<td align="center">意大利</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">JE</td>
<td align="center">Jersey</td>
<td align="center">泽西岛</td>
<td align="center">泽西岛</td>
<td align="center">泽西</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">LI</td>
<td align="center">Liechtenstein</td>
<td align="center">列支敦士登</td>
<td align="center">列支敦士登</td>
<td align="center">列支敦士登</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">LT</td>
<td align="center">Lithuania</td>
<td align="center">立陶宛</td>
<td align="center">立陶宛</td>
<td align="center">立陶宛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">LU</td>
<td align="center">Luxembourg</td>
<td align="center">卢森堡</td>
<td align="center">卢森堡</td>
<td align="center">卢森堡</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">LV</td>
<td align="center">Latvia</td>
<td align="center">拉脱维亚</td>
<td align="center">拉脱维亚</td>
<td align="center">拉脱维亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MC</td>
<td align="center">Monaco</td>
<td align="center">摩纳哥</td>
<td align="center">摩纳哥</td>
<td align="center">摩纳哥</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MD</td>
<td align="center">Moldova</td>
<td align="center">摩尔多瓦</td>
<td align="center">摩尔多瓦</td>
<td align="center">摩尔多瓦</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">ME</td>
<td align="center">Montenegro</td>
<td align="center">黑山</td>
<td align="center">黑山</td>
<td align="center">黑山</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MK</td>
<td align="center">Republic of Macedonia （FYROM）</td>
<td align="center">马其顿</td>
<td align="center">马其顿</td>
<td align="center">马其顿</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MQ</td>
<td align="center">Martinique</td>
<td align="center">马提尼克</td>
<td align="center">法属马丁尼克</td>
<td align="center">马提尼克</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MS</td>
<td align="center">Montserrat</td>
<td align="center">蒙塞拉特岛</td>
<td align="center">蒙塞拉特岛</td>
<td align="center">蒙塞拉特岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MT</td>
<td align="center">Malta</td>
<td align="center">马耳他</td>
<td align="center">马耳他</td>
<td align="center">马耳他</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NL</td>
<td align="center">Netherlands</td>
<td align="center">荷兰</td>
<td align="center">荷兰</td>
<td align="center">荷兰</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NO</td>
<td align="center">Norway</td>
<td align="center">挪威</td>
<td align="center">挪威</td>
<td align="center">挪威</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PL</td>
<td align="center">Poland</td>
<td align="center">波兰</td>
<td align="center">波兰</td>
<td align="center">波兰</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">RE</td>
<td align="center">Réunion</td>
<td align="center">留尼汪</td>
<td align="center">留尼汪</td>
<td align="center">留尼汪</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">RO</td>
<td align="center">Romania</td>
<td align="center">罗马尼亚</td>
<td align="center">罗马尼亚</td>
<td align="center">罗马尼亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">RS</td>
<td align="center">Serbia</td>
<td align="center">塞尔维亚</td>
<td align="center">塞尔维亚</td>
<td align="center">塞尔维亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">RU</td>
<td align="center">Russian Federation</td>
<td align="center">俄罗斯</td>
<td align="center">俄罗斯</td>
<td align="center">俄罗斯</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SE</td>
<td align="center">Sweden</td>
<td align="center">瑞典</td>
<td align="center">瑞典</td>
<td align="center">瑞典</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SI</td>
<td align="center">Slovenia</td>
<td align="center">斯洛文尼亚</td>
<td align="center">斯洛文尼亚</td>
<td align="center">斯洛文尼亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SJ</td>
<td align="center">Template:Country data SJM Svalbard</td>
<td align="center">斯瓦尔巴群岛和 扬马延岛</td>
<td align="center">斯瓦巴及 尖棉岛</td>
<td align="center">斯瓦尔巴特群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SK</td>
<td align="center">Slovakia</td>
<td align="center">斯洛伐克</td>
<td align="center">斯洛伐克</td>
<td align="center">斯洛伐克</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SM</td>
<td align="center">San Marino</td>
<td align="center">圣马力诺</td>
<td align="center">圣马力诺</td>
<td align="center">圣马力诺</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">UA</td>
<td align="center">Ukraine</td>
<td align="center">乌克兰</td>
<td align="center">乌克兰</td>
<td align="center">乌克兰</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">VA</td>
<td align="center">Vatican City （The Holy See）</td>
<td align="center">梵蒂冈</td>
<td align="center">梵蒂冈</td>
<td align="center">梵蒂冈</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">YT</td>
<td align="center">Mayotte</td>
<td align="center">马约特</td>
<td align="center">美亚特</td>
<td align="center">马约特</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GG</td>
<td align="center">Guernsey</td>
<td align="center">根西岛</td>
<td align="center">根息岛</td>
<td align="center">根西岛</td>
<td align="center">中国大陆曾将之普遍译作“ 格恩西岛”</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NC</td>
<td align="center">New Caledonia</td>
<td align="center">新喀里多尼亚</td>
<td align="center">新喀里多尼亚岛</td>
<td align="center">新喀里多尼亚</td>
<td align="center">亦有部份人士使用“ 新喀尔多尼亚”一词于 港澳地区</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TF</td>
<td align="center">French Southern Territories</td>
<td align="center">法属南部领地</td>
<td align="center">法属南部属地</td>
<td align="center">法属南部地区</td>
<td align="center">台湾亦普遍采用“ 法属南方及南极陆地”一词于其它场合（如 MSN台湾）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GB</td>
<td align="center">Great Britain （United Kingdom; England）</td>
<td align="center">英国</td>
<td align="center">英国</td>
<td align="center">英国</td>
<td align="center">台湾和 香港亦普遍采用“ 联合王国”一词于其它场合</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PT</td>
<td align="center">Portugal</td>
<td align="center">葡萄牙</td>
<td align="center">葡萄牙</td>
<td align="center">葡萄牙</td>
<td align="center">澳门民间亦普遍称之为葡国</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SH</td>
<td align="center">St. Helena &amp; Dependencies</td>
<td align="center">圣赫勒拿</td>
<td align="center">圣赫勒拿岛</td>
<td align="center">圣赫勒拿</td>
<td align="center">香港亦普遍采用“圣赫勒拿岛”一词于其它场合（如香港邮政的邮政指南附录表）。亦有部份人士使用“圣海伦娜岛”一词于港澳地区</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">亚洲</td>
<td align="center">AE</td>
<td align="center">United Arab Emirates</td>
<td align="center">阿联酋</td>
<td align="center">阿联</td>
<td align="center">阿联酋</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">AF</td>
<td align="center">Afghanistan</td>
<td align="center">阿富汗</td>
<td align="center">阿富汗</td>
<td align="center">阿富汗</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">AM</td>
<td align="center">Armenia</td>
<td align="center">亚美尼亚</td>
<td align="center">亚美尼亚</td>
<td align="center">亚美尼亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">AZ</td>
<td align="center">Azerbaijan</td>
<td align="center">阿塞拜疆</td>
<td align="center">阿塞拜疆</td>
<td align="center">阿塞拜疆</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BD</td>
<td align="center">Bangladesh</td>
<td align="center">孟加拉</td>
<td align="center">孟加拉</td>
<td align="center">孟加拉</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BH</td>
<td align="center">Bahrain</td>
<td align="center">巴林</td>
<td align="center">巴林</td>
<td align="center">巴林</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BN</td>
<td align="center">Brunei</td>
<td align="center">文莱</td>
<td align="center">文莱</td>
<td align="center">文莱</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BT</td>
<td align="center">Bhutan</td>
<td align="center">不丹</td>
<td align="center">不丹</td>
<td align="center">不丹</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CY</td>
<td align="center">Cyprus</td>
<td align="center">塞浦路斯</td>
<td align="center">塞浦路斯</td>
<td align="center">塞浦路斯</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GE</td>
<td align="center">Georgia</td>
<td align="center">格鲁吉亚</td>
<td align="center">乔治亚</td>
<td align="center">格鲁吉亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">HK</td>
<td align="center">Hong Kong</td>
<td align="center">香港</td>
<td align="center">香港</td>
<td align="center">香港</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">ID</td>
<td align="center">Indonesia</td>
<td align="center">印尼</td>
<td align="center">印尼</td>
<td align="center">印尼</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">IL</td>
<td align="center">Israel</td>
<td align="center">以色列</td>
<td align="center">以色列</td>
<td align="center">以色列</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">IN</td>
<td align="center">India</td>
<td align="center">印度</td>
<td align="center">印度</td>
<td align="center">印度</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">IO</td>
<td align="center">British Indian Ocean Territory</td>
<td align="center">英属印度洋领地</td>
<td align="center">英属印度洋地区</td>
<td align="center">英属印度洋地区</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">IQ</td>
<td align="center">Iraq</td>
<td align="center">伊拉克</td>
<td align="center">伊拉克</td>
<td align="center">伊拉克</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">IR</td>
<td align="center">Iran</td>
<td align="center">伊朗</td>
<td align="center">伊朗</td>
<td align="center">伊朗</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">JO</td>
<td align="center">Jordan</td>
<td align="center">约旦</td>
<td align="center">约旦</td>
<td align="center">约旦</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">JP</td>
<td align="center">Japan</td>
<td align="center">日本</td>
<td align="center">日本</td>
<td align="center">日本</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">KH</td>
<td align="center">Cambodia</td>
<td align="center">柬埔寨</td>
<td align="center">柬埔寨</td>
<td align="center">柬埔寨</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">KW</td>
<td align="center">Kuwait</td>
<td align="center">科威特</td>
<td align="center">科威特</td>
<td align="center">科威特</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">LB</td>
<td align="center">Lebanon</td>
<td align="center">黎巴嫩</td>
<td align="center">黎巴嫩</td>
<td align="center">黎巴嫩</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">LK</td>
<td align="center">Sri Lanka</td>
<td align="center">斯里兰卡</td>
<td align="center">斯里兰卡</td>
<td align="center">斯里兰卡</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MM</td>
<td align="center">Myanmar （Burma）</td>
<td align="center">缅甸</td>
<td align="center">缅甸</td>
<td align="center">缅甸</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MO</td>
<td align="center">Macao</td>
<td align="center">澳门</td>
<td align="center">澳门</td>
<td align="center">澳门</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MV</td>
<td align="center">Maldives</td>
<td align="center">马尔代夫</td>
<td align="center">马尔代夫</td>
<td align="center">马尔代夫</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MY</td>
<td align="center">Malaysia</td>
<td align="center">马来西亚</td>
<td align="center">马来西亚</td>
<td align="center">马来西亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NP</td>
<td align="center">Nepal</td>
<td align="center">尼泊尔</td>
<td align="center">尼泊尔</td>
<td align="center">尼泊尔</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">OM</td>
<td align="center">Oman</td>
<td align="center">阿曼</td>
<td align="center">阿曼</td>
<td align="center">阿曼</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PH</td>
<td align="center">The Philippines</td>
<td align="center">菲律宾</td>
<td align="center">菲律宾</td>
<td align="center">菲律宾</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PK</td>
<td align="center">Pakistan</td>
<td align="center">巴基斯坦</td>
<td align="center">巴基斯坦</td>
<td align="center">巴基斯坦</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PS</td>
<td align="center">Palestinian territories</td>
<td align="center">巴勒斯坦</td>
<td align="center">巴勒斯坦</td>
<td align="center">巴勒斯坦</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">QA</td>
<td align="center">Qatar</td>
<td align="center">卡塔尔</td>
<td align="center">卡达</td>
<td align="center">卡塔尔</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SG</td>
<td align="center">Singapore</td>
<td align="center">新加坡</td>
<td align="center">新加坡 星加坡</td>
<td align="center">新加坡 星加坡</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SY</td>
<td align="center">Syria</td>
<td align="center">叙利亚</td>
<td align="center">叙利亚</td>
<td align="center">叙利亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TH</td>
<td align="center">Thailand</td>
<td align="center">泰国</td>
<td align="center">泰国</td>
<td align="center">泰国</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TL</td>
<td align="center">Timor-Leste （East Timor）</td>
<td align="center">东帝汶</td>
<td align="center">东帝汶</td>
<td align="center">东帝汶</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TR</td>
<td align="center">Turkey</td>
<td align="center">土耳其</td>
<td align="center">土耳其</td>
<td align="center">土耳其</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">VN</td>
<td align="center">Vietnam</td>
<td align="center">越南</td>
<td align="center">越南</td>
<td align="center">越南</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">YE</td>
<td align="center">Yemen</td>
<td align="center">也门</td>
<td align="center">也门</td>
<td align="center">也门</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CN</td>
<td align="center">China</td>
<td align="center">中国 内地</td>
<td align="center">大陆 中国</td>
<td align="center">大陆 内地</td>
<td align="center">“ GB/T 2659-2000”的“CN”适用于整个 中华人民共和国辖区（包括 中国大陆、 香港、 澳门）。而“ISO 3166-1”和“ CNS 12842”的“CN”则仅适用于中国大陆，不含 港澳地区。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TW</td>
<td align="center">Taiwan</td>
<td align="center">台湾地区/台湾省</td>
<td align="center">台湾</td>
<td align="center">台湾</td>
<td align="center">台湾地区的国际政治地位可参见 未被国际普遍承认的国家列表、台海现状以及旧金山条约。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SA</td>
<td align="center">Saudi Arabia</td>
<td align="center">沙特阿拉伯</td>
<td align="center">沙特阿拉伯</td>
<td align="center">沙特阿拉伯</td>
<td align="center">新加坡与 马来西亚均将之译作“ 沙特阿拉伯”。 香港亦普遍采用“沙特阿拉伯”一词于其它场合</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">LA</td>
<td align="center">Laos</td>
<td align="center">老挝</td>
<td align="center">老挝</td>
<td align="center">老挝</td>
<td align="center">新加坡与 马来西亚均将之译作“老挝”</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">KP</td>
<td align="center">North Korea</td>
<td align="center">朝鲜 北朝鲜</td>
<td align="center">北朝鲜</td>
<td align="center">朝鲜 北朝鲜</td>
<td align="center">澳门习惯称之为“ 北朝鲜”</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">KR</td>
<td align="center">South Korea</td>
<td align="center">韩国 南朝鲜</td>
<td align="center">韩国</td>
<td align="center">韩国</td>
<td align="center">澳门习惯称之为“ 韩国”</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">KG</td>
<td align="center">Kyrgyzstan</td>
<td align="center">吉尔吉斯斯坦</td>
<td align="center">吉尔吉斯</td>
<td align="center">吉尔吉斯</td>
<td align="center">香港习惯略去“斯坦”后缀，有必要会用全称</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">KZ</td>
<td align="center">Kazakhstan</td>
<td align="center">哈萨克斯坦</td>
<td align="center">哈萨克</td>
<td align="center">哈萨克</td>
<td align="center">香港习惯略去“斯坦”后缀，有必要会用全称</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TJ</td>
<td align="center">Tajikistan</td>
<td align="center">塔吉克斯坦</td>
<td align="center">塔吉克</td>
<td align="center">塔吉克</td>
<td align="center">香港习惯略去“斯坦”后缀，有必要会用全称</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TM</td>
<td align="center">Turkmenistan</td>
<td align="center">土库曼斯坦</td>
<td align="center">土库曼</td>
<td align="center">土库曼</td>
<td align="center">香港习惯略去“斯坦”后缀，有必要会用全称</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">UZ</td>
<td align="center">Uzbekistan</td>
<td align="center">乌兹别克斯坦</td>
<td align="center">乌兹别克</td>
<td align="center">乌兹别克</td>
<td align="center">香港习惯略去“斯坦”后缀，有必要会用全称</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MN</td>
<td align="center">Mongolia</td>
<td align="center">蒙古国 蒙古</td>
<td align="center">蒙古</td>
<td align="center">蒙古国</td>
<td align="center">香港亦普遍采用“ 蒙古”一词于其它场合</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">北美洲</td>
<td align="center">AG</td>
<td align="center">Antigua &amp; Barbuda</td>
<td align="center">安提瓜和巴布达</td>
<td align="center">安提瓜和巴布达</td>
<td align="center">安提瓜和巴布达</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">AI</td>
<td align="center">Anguilla</td>
<td align="center">安圭拉</td>
<td align="center">英属安圭拉</td>
<td align="center">安圭拉岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">AW</td>
<td align="center">Aruba</td>
<td align="center">阿鲁巴</td>
<td align="center">阿鲁巴</td>
<td align="center">阿鲁巴</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BB</td>
<td align="center">Barbados</td>
<td align="center">巴巴多斯</td>
<td align="center">巴巴多斯</td>
<td align="center">巴巴多斯</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BS</td>
<td align="center">The Bahamas</td>
<td align="center">巴哈马</td>
<td align="center">巴哈马</td>
<td align="center">巴哈马</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BZ</td>
<td align="center">Belize</td>
<td align="center">伯利兹</td>
<td align="center">伯利兹</td>
<td align="center">伯利兹</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CA</td>
<td align="center">Canada</td>
<td align="center">加拿大</td>
<td align="center">加拿大</td>
<td align="center">加拿大</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CR</td>
<td align="center">Costa Rica</td>
<td align="center">哥斯达黎加</td>
<td align="center">哥斯达黎加</td>
<td align="center">哥斯达黎加</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CU</td>
<td align="center">Cuba</td>
<td align="center">古巴</td>
<td align="center">古巴</td>
<td align="center">古巴</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">DM</td>
<td align="center">Dominica</td>
<td align="center">多米尼克</td>
<td align="center">多米尼克</td>
<td align="center">多米尼克</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">DO</td>
<td align="center">Dominican Republic</td>
<td align="center">多米尼加</td>
<td align="center">多米尼加</td>
<td align="center">多米尼加</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GD</td>
<td align="center">Grenada</td>
<td align="center">格林纳达</td>
<td align="center">格林纳达</td>
<td align="center">格林纳达</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GL</td>
<td align="center">Greenland</td>
<td align="center">格陵兰</td>
<td align="center">格陵兰</td>
<td align="center">格陵兰</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GP</td>
<td align="center">Guadeloupe</td>
<td align="center">瓜德罗普</td>
<td align="center">瓜德鲁普岛</td>
<td align="center">瓜德鲁普岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GT</td>
<td align="center">Guatemala</td>
<td align="center">危地马拉</td>
<td align="center">危地马拉</td>
<td align="center">危地马拉</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">HN</td>
<td align="center">Honduras</td>
<td align="center">洪都拉斯</td>
<td align="center">洪都拉斯</td>
<td align="center">洪都拉斯</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">HT</td>
<td align="center">Haiti</td>
<td align="center">海地</td>
<td align="center">海地</td>
<td align="center">海地</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">JM</td>
<td align="center">Jamaica</td>
<td align="center">牙买加</td>
<td align="center">牙买加</td>
<td align="center">牙买加</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">KY</td>
<td align="center">Cayman Islands</td>
<td align="center">开曼群岛</td>
<td align="center">开曼群岛</td>
<td align="center">开曼群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MF</td>
<td align="center">Saint Martin （France）</td>
<td align="center">法属圣马丁</td>
<td align="center">法属圣马丁</td>
<td align="center">法属圣马丁</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MX</td>
<td align="center">Mexico</td>
<td align="center">墨西哥</td>
<td align="center">墨西哥</td>
<td align="center">墨西哥</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NI</td>
<td align="center">Nicaragua</td>
<td align="center">尼加拉瓜</td>
<td align="center">尼加拉瓜</td>
<td align="center">尼加拉瓜</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PA</td>
<td align="center">Panama</td>
<td align="center">巴拿马</td>
<td align="center">巴拿马</td>
<td align="center">巴拿马</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PR</td>
<td align="center">Puerto Rico</td>
<td align="center">波多黎各</td>
<td align="center">波多黎各</td>
<td align="center">波多黎各</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SV</td>
<td align="center">El Salvador</td>
<td align="center">萨尔瓦多</td>
<td align="center">萨尔瓦多</td>
<td align="center">萨尔瓦多</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TC</td>
<td align="center">Turks &amp; Caicos Islands</td>
<td align="center">特克斯和凯科斯群岛</td>
<td align="center">土克斯及开科斯群岛</td>
<td align="center">特克斯和凯科斯群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">US</td>
<td align="center">United States of America （USA）</td>
<td align="center">美国</td>
<td align="center">美国</td>
<td align="center">美国</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">VG</td>
<td align="center">British Virgin Islands</td>
<td align="center">英属维尔京群岛</td>
<td align="center">英属维尔京群岛</td>
<td align="center">英属处女群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">VI</td>
<td align="center">United States Virgin Islands</td>
<td align="center">美属维尔京群岛</td>
<td align="center">美属维尔京群岛</td>
<td align="center">美属处女群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MP</td>
<td align="center">Northern Mariana Islands</td>
<td align="center">北马里亚纳群岛</td>
<td align="center">北马里亚纳群岛</td>
<td align="center">北马里亚纳群岛</td>
<td align="center">亦有部份人士使用“ 北玛利安娜群岛”一词于 港澳地区</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">UM</td>
<td align="center">United States Minor Outlying Islands</td>
<td align="center">美国本土外小岛屿</td>
<td align="center">美国边疆小岛</td>
<td align="center">美国海外小岛</td>
<td align="center">台湾亦普遍采用“ 美国外岛”一词于其它场合（如 MSN台湾）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TT</td>
<td align="center">Trinidad &amp; Tobago</td>
<td align="center">特立尼达和多巴哥</td>
<td align="center"></td>
<td align="center">特立尼达和多巴哥</td>
<td align="center">特立尼达和多巴哥</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">VC</td>
<td align="center">St. Vincent &amp; the Grenadines</td>
<td align="center">圣文森特和格林纳丁斯</td>
<td align="center">圣文森特和格林纳丁斯</td>
<td align="center">圣文森特和格林纳丁斯</td>
<td align="center">台湾将之简称为“ 圣文森”</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">KN</td>
<td align="center">St. Kitts &amp; Nevis</td>
<td align="center">圣基茨和尼维斯</td>
<td align="center">圣基茨和尼维斯</td>
<td align="center">圣基茨和尼维斯</td>
<td align="center">香港亦普遍采用“ 圣克里斯托佛岛及尼维斯岛”一词于其它场合（如 香港邮政的邮政指南附录表）。亦有部份人士使用“ 圣基茨和尼维斯”一词于 港澳地区</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PM</td>
<td align="center">Saint-Pierre and Miquelon</td>
<td align="center">圣皮埃尔和密克隆</td>
<td align="center">圣皮耶与密克隆群岛</td>
<td align="center">圣皮埃尔岛和密克隆岛</td>
<td align="center">香港亦普遍采用“ 圣皮埃兰和密克隆群岛”一词于其它场合（如 香港邮政的邮政指南附录表）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">LC</td>
<td align="center">St. Lucia</td>
<td align="center">圣卢西亚</td>
<td align="center">圣卢西亚</td>
<td align="center">圣卢西亚</td>
<td align="center">香港亦普遍采用“ 圣路西亚”一词于其它场合</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">非洲</td>
<td align="center">AO</td>
<td align="center">Angola</td>
<td align="center">安哥拉</td>
<td align="center">安哥拉</td>
<td align="center">安哥拉</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BF</td>
<td align="center">Burkina</td>
<td align="center">布基纳法索</td>
<td align="center">布基纳法索</td>
<td align="center">布基纳法索</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BI</td>
<td align="center">Burundi</td>
<td align="center">布隆迪</td>
<td align="center">布隆迪</td>
<td align="center">布隆迪</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BJ</td>
<td align="center">Benin</td>
<td align="center">贝宁</td>
<td align="center">贝宁</td>
<td align="center">贝宁</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BW</td>
<td align="center">Botswana</td>
<td align="center">博茨瓦纳</td>
<td align="center">博茨瓦纳</td>
<td align="center">博茨瓦纳</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CF</td>
<td align="center">Central African Republic</td>
<td align="center">中非</td>
<td align="center">中非</td>
<td align="center">中非</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CM</td>
<td align="center">Cameroon</td>
<td align="center">喀麦隆</td>
<td align="center">喀麦隆</td>
<td align="center">喀麦隆</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CV</td>
<td align="center">Cape Verde</td>
<td align="center">佛得角</td>
<td align="center">佛得角</td>
<td align="center">佛得角</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">DJ</td>
<td align="center">Djibouti</td>
<td align="center">吉布提</td>
<td align="center">吉布提</td>
<td align="center">吉布提</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">DZ</td>
<td align="center">Algeria</td>
<td align="center">阿尔及利亚</td>
<td align="center">阿尔及利亚</td>
<td align="center">阿尔及利亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">EG</td>
<td align="center">Egypt</td>
<td align="center">埃及</td>
<td align="center">埃及</td>
<td align="center">埃及</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">EH</td>
<td align="center">Western Sahara</td>
<td align="center">西撒哈拉</td>
<td align="center">西撒哈拉</td>
<td align="center">西撒哈拉</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">ER</td>
<td align="center">Eritrea</td>
<td align="center">厄立特里亚</td>
<td align="center">厄立垂亚</td>
<td align="center">厄立特里亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GA</td>
<td align="center">Gabon</td>
<td align="center">加蓬</td>
<td align="center">加蓬</td>
<td align="center">加蓬</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GH</td>
<td align="center">Ghana</td>
<td align="center">加纳</td>
<td align="center">加纳</td>
<td align="center">加纳</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GN</td>
<td align="center">Guinea</td>
<td align="center">几内亚</td>
<td align="center">几内亚</td>
<td align="center">几内亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GQ</td>
<td align="center">Equatorial Guinea</td>
<td align="center">赤道几内亚</td>
<td align="center">赤道几内亚</td>
<td align="center">赤道几内亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GW</td>
<td align="center">Guinea-Bissau</td>
<td align="center">几内亚比绍</td>
<td align="center">几内亚比绍</td>
<td align="center">几内亚比绍</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">KM</td>
<td align="center">The Comoros</td>
<td align="center">科摩罗</td>
<td align="center">科摩罗</td>
<td align="center">科摩罗</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">LR</td>
<td align="center">Liberia</td>
<td align="center">利比里亚</td>
<td align="center">利比里亚</td>
<td align="center">利比里亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">LS</td>
<td align="center">Lesotho</td>
<td align="center">莱索托</td>
<td align="center">莱索托</td>
<td align="center">莱索托</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">LY</td>
<td align="center">Libya</td>
<td align="center">利比亚</td>
<td align="center">利比亚</td>
<td align="center">利比亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MA</td>
<td align="center">Morocco</td>
<td align="center">摩洛哥</td>
<td align="center">摩洛哥</td>
<td align="center">摩洛哥</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MG</td>
<td align="center">Madagascar</td>
<td align="center">马达加斯加</td>
<td align="center">马达加斯加</td>
<td align="center">马达加斯加</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">ML</td>
<td align="center">Mali</td>
<td align="center">马里</td>
<td align="center">马利</td>
<td align="center">马里</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MR</td>
<td align="center">Mauritania</td>
<td align="center">毛里塔尼亚</td>
<td align="center">毛里塔尼亚</td>
<td align="center">毛里塔尼亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MW</td>
<td align="center">Malawi</td>
<td align="center">马拉维</td>
<td align="center">马拉维</td>
<td align="center">马拉维</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NA</td>
<td align="center">Namibia</td>
<td align="center">纳米比亚</td>
<td align="center">纳米比亚</td>
<td align="center">纳米比亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NE</td>
<td align="center">Niger</td>
<td align="center">尼日尔</td>
<td align="center">尼日</td>
<td align="center">尼日尔</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NG</td>
<td align="center">Nigeria</td>
<td align="center">尼日利亚</td>
<td align="center">尼日利亚</td>
<td align="center">尼日利亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">RW</td>
<td align="center">Rwanda</td>
<td align="center">卢旺达</td>
<td align="center">卢旺达</td>
<td align="center">卢旺达</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SC</td>
<td align="center">Seychelles</td>
<td align="center">塞舌尔</td>
<td align="center">塞舌尔</td>
<td align="center">塞舌尔</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SD</td>
<td align="center">Sudan</td>
<td align="center">苏丹</td>
<td align="center">苏丹</td>
<td align="center">苏丹</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SL</td>
<td align="center">Sierra Leone</td>
<td align="center">塞拉利昂</td>
<td align="center">狮子山</td>
<td align="center">塞拉利昂</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SN</td>
<td align="center">Senegal</td>
<td align="center">塞内加尔</td>
<td align="center">塞内加尔</td>
<td align="center">塞内加尔</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SO</td>
<td align="center">Somalia</td>
<td align="center">索马里</td>
<td align="center">索马里</td>
<td align="center">索马里</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SS</td>
<td align="center">South Sudan</td>
<td align="center">南苏丹</td>
<td align="center">南苏丹</td>
<td align="center">南苏丹</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">ST</td>
<td align="center">Sao Tome &amp; Principe</td>
<td align="center">圣多美和普林西比</td>
<td align="center">圣多美普林西比</td>
<td align="center">圣多美及普林西比</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SZ</td>
<td align="center">Swaziland</td>
<td align="center">斯威士兰</td>
<td align="center">斯威士兰</td>
<td align="center">斯威士兰</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TD</td>
<td align="center">Chad</td>
<td align="center">乍得</td>
<td align="center">查德</td>
<td align="center">乍得</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TG</td>
<td align="center">Togo</td>
<td align="center">多哥</td>
<td align="center">多哥</td>
<td align="center">多哥</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TN</td>
<td align="center">Tunisia</td>
<td align="center">突尼斯</td>
<td align="center">突尼斯</td>
<td align="center">突尼斯</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TZ</td>
<td align="center">Tanzania</td>
<td align="center">坦桑尼亚</td>
<td align="center">坦桑尼亚</td>
<td align="center">坦桑尼亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">UG</td>
<td align="center">Uganda</td>
<td align="center">乌干达</td>
<td align="center">乌干达</td>
<td align="center">乌干达</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">ZA</td>
<td align="center">South Africa</td>
<td align="center">南非</td>
<td align="center">南非</td>
<td align="center">南非</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">ZM</td>
<td align="center">Zambia</td>
<td align="center">赞比亚</td>
<td align="center">赞比亚</td>
<td align="center">赞比亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">ZW</td>
<td align="center">Zimbabwe</td>
<td align="center">津巴布韦</td>
<td align="center">津巴布韦</td>
<td align="center">津巴布韦</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CG</td>
<td align="center">Republic of the Congo</td>
<td align="center">刚果（布）</td>
<td align="center">刚果</td>
<td align="center">刚果</td>
<td align="center">中国大陆主要使用“刚果（布）”一词，意指“首都为 布拉柴维尔的 刚果（共和国）”，而“刚果”一词亦普遍为民间所用。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CD</td>
<td align="center">Democratic Republic of the Congo</td>
<td align="center">刚果（金）</td>
<td align="center">民主刚果</td>
<td align="center">民主刚果</td>
<td align="center">中国大陆主要使用“刚果（金）”一词，意指“首都为 金沙萨的 刚果（共和国）”，而“民主刚果”一词亦普遍为民间所用。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MZ</td>
<td align="center">Mozambique</td>
<td align="center">莫桑比克</td>
<td align="center">莫桑比克</td>
<td align="center">莫桑比克</td>
<td align="center">中国大陆和 台湾均曾将之普遍译作“ 莫三比给”</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GM</td>
<td align="center">Gambia</td>
<td align="center">冈比亚</td>
<td align="center">冈比亚</td>
<td align="center">冈比亚</td>
<td align="center">亦有部份人士使用“ 刚比亚”一词于 港澳地区</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">ET</td>
<td align="center">Ethiopia</td>
<td align="center">埃塞俄比亚</td>
<td align="center">埃塞俄比亚</td>
<td align="center">埃塞俄比亚</td>
<td align="center">亦有部份人士使用“ 埃塞俄比亚”一词于 台湾</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MU</td>
<td align="center">Mauritius</td>
<td align="center">毛里求斯</td>
<td align="center">毛里求斯</td>
<td align="center">毛里求斯</td>
<td align="center">香港亦普遍采用“ 毛里求斯”一词于其它场合</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CI</td>
<td align="center">Cote d’Ivoire</td>
<td align="center">科特迪瓦</td>
<td align="center">科特迪瓦</td>
<td align="center">科特迪瓦</td>
<td align="center">香港亦普遍采用“科特迪瓦”一词于其它场合（如 香港邮政的邮政指南附录表）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">KE</td>
<td align="center">Kenya</td>
<td align="center">肯尼亚</td>
<td align="center">肯尼亚</td>
<td align="center">肯尼亚</td>
<td align="center">香港亦普遍采用“ 肯尼亚”一词于其它场合</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">南美洲</td>
<td align="center">AR</td>
<td align="center">Argentina</td>
<td align="center">阿根廷</td>
<td align="center">阿根廷</td>
<td align="center">阿根廷</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BO</td>
<td align="center">Bolivia</td>
<td align="center">玻利维亚</td>
<td align="center">玻利维亚</td>
<td align="center">玻利维亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">BR</td>
<td align="center">Brazil</td>
<td align="center">巴西</td>
<td align="center">巴西</td>
<td align="center">巴西</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CL</td>
<td align="center">Chile</td>
<td align="center">智利</td>
<td align="center">智利</td>
<td align="center">智利</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CO</td>
<td align="center">Colombia</td>
<td align="center">哥伦比亚</td>
<td align="center">哥伦比亚</td>
<td align="center">哥伦比亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">EC</td>
<td align="center">Ecuador</td>
<td align="center">厄瓜多尔</td>
<td align="center">厄瓜多尔</td>
<td align="center">厄瓜多尔</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">FK</td>
<td align="center">Falkland Islands</td>
<td align="center">马尔维纳斯群岛（ 福克兰）</td>
<td align="center">福克兰群岛</td>
<td align="center">福克兰群岛（ 马尔维纳斯）</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GF</td>
<td align="center">French Guiana</td>
<td align="center">法属圭亚那</td>
<td align="center">法属圭亚那</td>
<td align="center">法属圭亚那</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GY</td>
<td align="center">Guyana</td>
<td align="center">圭亚那</td>
<td align="center">圭亚那</td>
<td align="center">圭亚那</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PE</td>
<td align="center">Peru</td>
<td align="center">秘鲁</td>
<td align="center">秘鲁</td>
<td align="center">秘鲁</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PY</td>
<td align="center">Paraguay</td>
<td align="center">巴拉圭</td>
<td align="center">巴拉圭</td>
<td align="center">巴拉圭</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SR</td>
<td align="center">Suriname</td>
<td align="center">苏里南</td>
<td align="center">苏里南</td>
<td align="center">苏里南</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">UY</td>
<td align="center">Uruguay</td>
<td align="center">乌拉圭</td>
<td align="center">乌拉圭</td>
<td align="center">乌拉圭</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">VE</td>
<td align="center">Venezuela</td>
<td align="center">委内瑞拉</td>
<td align="center">委内瑞拉</td>
<td align="center">委内瑞拉</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">大洋洲</td>
<td align="center">AS</td>
<td align="center">American Samoa</td>
<td align="center">美属萨摩亚</td>
<td align="center">美属萨摩亚</td>
<td align="center">美属萨摩亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">AU</td>
<td align="center">Australia</td>
<td align="center">澳大利亚</td>
<td align="center">澳洲</td>
<td align="center">澳洲</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CC</td>
<td align="center">Cocos （Keeling） Islands</td>
<td align="center">科科斯群岛</td>
<td align="center">可可斯群岛</td>
<td align="center">科科斯群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CX</td>
<td align="center">Christmas Island</td>
<td align="center">圣诞岛</td>
<td align="center">圣诞岛</td>
<td align="center">圣诞岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">FJ</td>
<td align="center">Fiji</td>
<td align="center">斐济群岛</td>
<td align="center">斐济</td>
<td align="center">斐济</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">FM</td>
<td align="center">Federated States of Micronesia</td>
<td align="center">密克罗尼西亚联邦</td>
<td align="center">密克罗尼西亚联邦</td>
<td align="center">密克罗尼西亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">GU</td>
<td align="center">Guam</td>
<td align="center">关岛</td>
<td align="center">关岛</td>
<td align="center">关岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">HM</td>
<td align="center">Heard Island and McDonald Islands</td>
<td align="center">赫德岛和麦克唐纳群岛</td>
<td align="center">赫德及麦当劳群岛</td>
<td align="center">赫德岛和麦克唐纳群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">KI</td>
<td align="center">Kiribati</td>
<td align="center">基里巴斯</td>
<td align="center">基里巴斯</td>
<td align="center">基里巴斯</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">MH</td>
<td align="center">Marshall islands</td>
<td align="center">马绍尔群岛</td>
<td align="center">马绍尔群岛</td>
<td align="center">马绍尔群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NF</td>
<td align="center">Norfolk Island</td>
<td align="center">诺福克岛</td>
<td align="center">诺福克岛</td>
<td align="center">诺福克岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NR</td>
<td align="center">Nauru</td>
<td align="center">瑙鲁</td>
<td align="center">瑙鲁</td>
<td align="center">瑙鲁</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PF</td>
<td align="center">French polynesia</td>
<td align="center">法属波利尼西亚</td>
<td align="center">法属波利尼西亚</td>
<td align="center">法属波利尼西亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PG</td>
<td align="center">Papua New Guinea</td>
<td align="center">巴布亚新几内亚</td>
<td align="center">巴布亚新几内亚</td>
<td align="center">巴布亚新几内亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PN</td>
<td align="center">Pitcairn Islands</td>
<td align="center">皮特凯恩群岛</td>
<td align="center">皮特康岛</td>
<td align="center">皮特凯恩群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">PW</td>
<td align="center">Palau</td>
<td align="center">帕劳</td>
<td align="center">帕劳</td>
<td align="center">帕劳</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">SB</td>
<td align="center">Solomon Islands</td>
<td align="center">所罗门群岛</td>
<td align="center">所罗门群岛</td>
<td align="center">所罗门群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TK</td>
<td align="center">Tokelau</td>
<td align="center">托克劳</td>
<td align="center">托克劳群岛</td>
<td align="center">托克劳群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TO</td>
<td align="center">Tonga</td>
<td align="center">汤加</td>
<td align="center">东加</td>
<td align="center">汤加</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">TV</td>
<td align="center">Tuvalu</td>
<td align="center">图瓦卢</td>
<td align="center">吐瓦鲁</td>
<td align="center">图瓦卢</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">WF</td>
<td align="center">Wallis and Futuna</td>
<td align="center">瓦利斯和富图纳</td>
<td align="center">沃里斯与伏塔那岛</td>
<td align="center">瓦利斯群岛和富图纳群岛</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">WS</td>
<td align="center">Samoa</td>
<td align="center">萨摩亚</td>
<td align="center">萨摩亚</td>
<td align="center">萨摩亚</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">VU</td>
<td align="center">Vanuatu</td>
<td align="center">瓦努阿图</td>
<td align="center">瓦努阿图</td>
<td align="center">瓦努阿图</td>
<td align="center">亦有部份人士使用“ 瓦努阿图”一词于 港澳地区</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NU</td>
<td align="center">Niue</td>
<td align="center">纽埃</td>
<td align="center">纽埃</td>
<td align="center">纽埃</td>
<td align="center">台湾亦普遍采用“ 纽威岛”（ CNS 12842译名）一词于其它场合（如 MSN台湾）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">CK</td>
<td align="center">Cook Islands</td>
<td align="center">库克群岛</td>
<td align="center">库克群岛</td>
<td align="center">库克群岛</td>
<td align="center">台湾和 香港亦普遍采用“ 科克群岛”（ CNS 12842译名）一词于其它场合</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">NZ</td>
<td align="center">New Zealand</td>
<td align="center">新西兰</td>
<td align="center">纽西兰</td>
<td align="center">新西兰</td>
<td align="center">新加坡与 马来西亚均将之译作“ 新西兰”。 香港亦普遍采用“新西兰”一词于其它场合</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">南极洲</td>
<td align="center">AQ</td>
<td align="center">Antarctica</td>
<td align="center">南极洲</td>
<td align="center">南极洲</td>
<td align="center">南极洲</td>
<td align="center"></td>
</tr>
</tbody></table>
<blockquote>
<p>注：如表中没有统计，可以在此网站在线查询（<a href="https://countrycode.org/%EF%BC%89">https://countrycode.org/）</a><br>一级state：<em>亚洲（AS）</em>、<em>欧洲（EU）</em>、<em>非洲（AF）</em>、<em>北美（NA）</em>、<em>南美（SA）</em>、<em>大洋洲（OA）</em><br>二级country：中国（CN）等全部现存国家和地区
                    </p>
</blockquote>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>【Tips】解决 ping github.com 超时问题</title>
    <url>/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="解决-ping-github-com-超时问题"><a href="#解决-ping-github-com-超时问题" class="headerlink" title="解决 ping github.com 超时问题"></a>解决 ping github.com 超时问题</h1><p>1、尝试 <code>ping github.com</code>，结果发现Ping不通，但是 <code>ping baidu.com</code> 却是正常的。</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/16787751105633.jpg"></p>
<span id="more"></span>

<p>2、初步分心应该是本地的DNS无法解析导致的，需要修改Hosts文件，添加 github 的ip地址项</p>
<h2 id="如何修改Hosts文件？"><a href="#如何修改Hosts文件？" class="headerlink" title="如何修改Hosts文件？"></a>如何修改Hosts文件？</h2><h3 id="1、通过终端命令修改"><a href="#1、通过终端命令修改" class="headerlink" title="1、通过终端命令修改"></a>1、通过终端命令修改</h3><p>（1）打开终端，输入命令行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># sudo 以管理员权限执行</span><br><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>

<p>（2）输入本机密码后，会自动打开hosts文件 。</p>
<ul>
<li>键盘输入<code>i</code>（插入），修改完成后，按 <code>esc</code> 键退出插入页面</li>
<li>保存退出：输入  <code>:wq</code> 或者<code>:wq!</code>，再<code>enter</code>键 </li>
<li>不保存退出：输入<code>q</code>和<code>！</code>键，再<code>enter</code>键</li>
</ul>
<h3 id="2、在-Finder-中修改"><a href="#2、在-Finder-中修改" class="headerlink" title="2、在 Finder 中修改"></a>2、在 Finder 中修改</h3><p>方法一：</p>
<p>（1）打开 <code>Finder</code> ，快捷键 <code>Command+Shift+G</code> 查找文件，输入 <code>/etc/hosts</code>，点击前往</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/16787751416982.jpg"></p>
<p>（2） 复制hosts文件到桌面，修改成功后替换原hosts文件即可</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/16787751730177.jpg"></p>
<p>方法二：</p>
<p>（1）打开Finder，快捷键 <code>Shift+Command+G</code> 查找文件，输入 <code>/private</code> 前往</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/16787751897989.jpg"></p>
<p>（2）找到 <code>etc</code> 文件之后，选择显示简介</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/16787752011240.jpg"></p>
<p>（3）找到共享与权限，将everyone的权限修改为读和写，保存后修改hosts文件，修改成功后记得把权限修改回来！</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/16787752140821.jpg"></p>
<h2 id="如何在-Hosts-文件中配置-github-com-映射"><a href="#如何在-Hosts-文件中配置-github-com-映射" class="headerlink" title="如何在 Hosts 文件中配置 github.com 映射"></a>如何在 Hosts 文件中配置 github.com 映射</h2><p>host文件打开之后可以看到：</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/16787752278743.jpg"></p>
<p>在文件下面添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#<span class="title class_">GitHub</span>地址</span><br><span class="line"><span class="number">140.82</span><span class="number">.114</span><span class="number">.3</span> github.<span class="property">com</span> git</span><br><span class="line"><span class="number">151.101</span><span class="number">.129</span><span class="number">.194</span> github.<span class="property">global</span>.<span class="property">ssl</span>.<span class="property">fastly</span>.<span class="property">net</span></span><br></pre></td></tr></table></figure>

<p>上图中的 IP 可以通过， <a href="https://www.ipaddress.com/">ipaddress</a> 网站查询，输入网址就可查阅到对应的IP地址。（这是一个查询域名映射关系的工具）</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/16787752425693.jpg"></p>
<p><code>140.82.114.3</code>：这个IP地址修改为 <code>github.com</code>搜索到的IP地址</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/16787752554840.jpg"></p>
<p><code>151.101.129.194</code>：这个IP地址修改为<code>github.global.ssl.fastly.net</code>搜索到的<br>IP地址，其中可能会有多个，挑选其中一个即可。</p>
<p>添加完成，重新在终端 <code>ping github.com</code>，发现可以 ping 通了， 如下图：</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/16787752693740.jpg"></p>
<h2 id="使用三方工具自动修改（最新推荐）"><a href="#使用三方工具自动修改（最新推荐）" class="headerlink" title="使用三方工具自动修改（最新推荐）"></a>使用三方工具自动修改（最新推荐）</h2><p>推荐 <a href="https://github.com/oldj/SwitchHosts">SwitchHosts</a> 工具管理 hosts</p>
<p>以 SwitchHosts 为例，看一下怎么使用的，配置参考下面：</p>
<ul>
<li><p><strong>Hosts 类型</strong>: <code>Remote</code></p>
</li>
<li><p><strong>Hosts 标题</strong>: 随意</p>
</li>
<li><p><strong>URL</strong>: <code>https://raw.hellogithub.com/hosts</code></p>
</li>
<li><p><strong>自动刷新</strong>: 最好选 1 小时</p>
</li>
</ul>
<p>如图：</p>
<p><img data-src="/Tips/%E3%80%90Tips%E3%80%91%E8%A7%A3%E5%86%B3ping%20github.com%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/17392449105283.jpg"></p>
<p>这样每次 hosts 有更新都能及时进行更新，免去手动更新。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.github-zh.com/projects/263556058-github520">GitHub 520</a></li>
</ol>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS】view点击事件穿透</title>
    <url>/iOS/%E3%80%90iOS%E3%80%91view%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%A9%BF%E9%80%8F%E5%92%8C%E6%94%B9%E5%8F%98/</url>
    <content><![CDATA[<h2 id="事件传递"><a href="#事件传递" class="headerlink" title="事件传递"></a>事件传递</h2><p>当触摸一个视图时，首先系统会捕捉此事件，并为此事件创建一个 UIEvent 对象，将此对象加入当前应用程序的事件队列中，然后由 UIApplication 对象从队列中，一个一个取出来进行分发，首先分发给 UIWindow 对象，然后由 UIWindow 对象分发给触摸的视图对象，也就是第一响应者对象。</p>
<span id="more"></span>

<h2 id="响应者链"><a href="#响应者链" class="headerlink" title="响应者链"></a>响应者链</h2><p>事件被交由第一响应者对象处理，如果第一响应者不处理，事件被沿着响应者链向上传递，交给下一个响应者（next responder）。一般来说，第一响应者是个视图对象或者其子类对象，当其被触摸后事件被交由它处理，如果它不处理，事件就会被传递给它的视图控制器对象（如果存在），然后是它的父视图（superView）对象（如果存在），以此类推，直到顶层视图。接下来会沿着顶层视图（top view）到窗口（UIWindow对象）再到程序（UIApplication对象）。如果整个过程都没有响应这个事件，该事件就被丢弃。一般情况下，在响应者链中只要对象处理这个事件，事件就停止传递。但是有时候可以在视图的相应方法中根据一些条件判断来决定是否需要继续传递事件。</p>
<h2 id="简单理解"><a href="#简单理解" class="headerlink" title="简单理解"></a>简单理解</h2><p>用户点击屏幕后的事件传递，UIApplication 先响应事件，然后传递给 UIWindow。如果 window 可以响应。就开始遍历 window 的 subviews。遍历的过程中，如果第一个遍历的 view1 可以响应，那就遍历这个 view1 的 subviews（依次这样不停地查找，直至查找到合适的响应事件 view ）。如果 view1 不可以响应，那就开始对 view2 进行判断和子视图的遍历。依次类推 view3，view4……</p>
<p>如果最后没有找到合适的响应 view，这个消息就会被抛弃。（整个遍历的过程就是树的先序遍历）。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><ol>
<li>视图覆盖的情况 想要透过上层视图的响应事件 响应下面的事件</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (<span class="type">UIView</span> <span class="operator">*</span>)hitTest:(<span class="type">CGPoint</span>)point withEvent:(<span class="type">UIEvent</span> <span class="operator">*</span>)event &#123;</span><br><span class="line">    <span class="type">UIView</span> <span class="operator">*</span>hitView <span class="operator">=</span> [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (hitView <span class="operator">==</span> 上层视图view) &#123;</span><br><span class="line">        <span class="keyword">return</span> 想要响应的下层视图view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hitView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>视图覆盖 但是不想要响应上层视图 view 事件</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (<span class="type">UIView</span> <span class="operator">*</span>)hitTest:(<span class="type">CGPoint</span>)point withEvent:(<span class="type">UIEvent</span> <span class="operator">*</span>)event &#123;</span><br><span class="line">    <span class="type">UIView</span> <span class="operator">*</span>hitView <span class="operator">=</span> [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hitView <span class="operator">==</span> 不想要响应视图的view) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>; <span class="comment">// 此处返回空即不相应任何事件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hitView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>让超出父视图范围的子视图响应事件</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (<span class="type">UIView</span> <span class="operator">*</span>)hitTest:(<span class="type">CGPoint</span>)point withEvent:(<span class="type">UIEvent</span> <span class="operator">*</span>)event &#123;</span><br><span class="line">    <span class="type">UIView</span> <span class="operator">*</span>view <span class="operator">=</span> [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (view <span class="operator">==</span> <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">UIView</span> <span class="operator">*</span>subView <span class="keyword">in</span> <span class="keyword">self</span>.subviews) &#123;</span><br><span class="line">            <span class="type">CGPoint</span> tp <span class="operator">=</span> [subView convertPoint:point fromView:<span class="keyword">self</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="type">CGRectContainsPoint</span>(subView.bounds, tp)) &#123;</span><br><span class="line">                view <span class="operator">=</span> subView;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>【OC】Label字数和行数的计算方法</title>
    <url>/iOS/%E3%80%90iOS%E3%80%91Label%E5%AD%97%E6%95%B0%E5%92%8C%E8%A1%8C%E6%95%B0%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在 iOS 中，UILabel 常常需要计算高度来实现动态高度变化，以下是一些关于 label 字数和行数的计算方法总结，以备需要之时查看。</p>
<h3 id="1、计算label行数："><a href="#1、计算label行数：" class="headerlink" title="1、计算label行数："></a>1、计算label行数：</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (<span class="type">NSUInteger</span>)lineCount</span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">CGSize</span> size <span class="operator">=</span> [<span class="keyword">self</span> sizeThatFits:<span class="type">CGSizeMake</span>(<span class="keyword">self</span>.frame.size.width, <span class="type">CGFLOAT_MAX</span>)];</span><br><span class="line">   <span class="keyword">return</span> <span class="type">MAX</span>((int)(size.height <span class="operator">/</span> <span class="keyword">self</span>.font.lineHeight), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="2、返回label中可见字符串长度："><a href="#2、返回label中可见字符串长度：" class="headerlink" title="2、返回label中可见字符串长度："></a>2、返回label中可见字符串长度：</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (<span class="type">NSUInteger</span>)fitString:(<span class="type">NSString</span> <span class="operator">*</span>)string intoLabel:(<span class="type">UILabel</span> <span class="operator">*</span>)label&#123;</span><br><span class="line">   <span class="type">UIFont</span> <span class="operator">*</span>font           <span class="operator">=</span> label.font;</span><br><span class="line">   <span class="type">NSLineBreakModemode</span>    <span class="operator">=</span> label.lineBreakMode;</span><br><span class="line">   <span class="type">CGFloat</span> labelWidth     <span class="operator">=</span> label.frame.size.width;</span><br><span class="line">   <span class="type">CGFloat</span> labelHeight    <span class="operator">=</span> label.frame.size.height;</span><br><span class="line">   <span class="type">CGSize</span>  sizeConstraint <span class="operator">=</span> <span class="type">CGSizeMake</span>(labelWidth, <span class="type">CGFLOAT_MAX</span>);</span><br><span class="line"><span class="keyword">if</span>([stringsizeWithFont:fontconstrainedToSize:sizeConstraintlineBreakMode:mode].height<span class="operator">&gt;</span> labelHeight) &#123;</span><br><span class="line">       <span class="type">NSString</span> <span class="operator">*</span>adjustedString;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">NSUIntegeri</span> <span class="operator">=</span><span class="number">1</span>; i <span class="operator">&lt;</span> [stringlength]; i<span class="operator">++</span>)&#123;</span><br><span class="line">           adjustedString <span class="operator">=</span> [string substringToIndex:i];</span><br><span class="line">           <span class="keyword">if</span> ([adjustedString sizeWithFont:font constrainedToSize:sizeConstraint lineBreakMode:mode].height <span class="operator">&gt;</span> labelHeight)</span><br><span class="line">               returni <span class="operator">-</span><span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> [string length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (<span class="type">NSUInteger</span>)fitString:(<span class="type">NSString</span> <span class="operator">*</span>)string intoLabel:(float)width font:(<span class="type">UIFont</span> <span class="operator">*</span> )font lineCount:(<span class="type">NSUInteger</span>)count</span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">CGSize</span> size <span class="operator">=</span> [string boundingRectWithSize:<span class="type">CGSizeMake</span>(width, <span class="type">CGFLOAT_MAX</span>)</span><br><span class="line">                                      options:<span class="type">NSStringDrawingTruncatesLastVisibleLine</span> <span class="operator">|</span></span><br><span class="line">                  <span class="type">NSStringDrawingUsesLineFragmentOrigin</span> <span class="operator">|</span></span><br><span class="line">                  <span class="type">NSStringDrawingUsesFontLeading</span></span><br><span class="line">                                   attributes:@&#123;<span class="type">NSFontAttributeName</span>:[<span class="type">UIFont</span> systemFontOfSize:<span class="number">18</span>]&#125;</span><br><span class="line">                                      context:<span class="literal">nil</span>].size;</span><br><span class="line">   <span class="type">CGFloat</span> allLineHeight <span class="operator">=</span> font.lineHeight<span class="operator">*</span>count;</span><br><span class="line">   <span class="keyword">if</span> (size.height<span class="operator">&gt;</span>allLineHeight) &#123;</span><br><span class="line">       <span class="type">NSString</span> <span class="operator">*</span>adjustedString;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">NSUInteger</span> i <span class="operator">=</span> <span class="number">1</span>; i <span class="operator">&lt;</span> [string length]; i<span class="operator">++</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           adjustedString <span class="operator">=</span> [string substringToIndex:i];</span><br><span class="line">           <span class="type">CGSize</span> size2 <span class="operator">=</span> [adjustedString boundingRectWithSize:<span class="type">CGSizeMake</span>(width, <span class="type">MAXFLOAT</span>)</span><br><span class="line">                                              options:<span class="type">NSStringDrawingTruncatesLastVisibleLine</span> <span class="operator">|</span></span><br><span class="line">                          <span class="type">NSStringDrawingUsesLineFragmentOrigin</span> <span class="operator">|</span></span><br><span class="line">                          <span class="type">NSStringDrawingUsesFontLeading</span></span><br><span class="line">                                           attributes:@&#123;<span class="type">NSFontAttributeName</span>:[<span class="type">UIFont</span> systemFontOfSize:<span class="number">18</span>]&#125;</span><br><span class="line">                                              context:<span class="literal">nil</span>].size;</span><br><span class="line">           <span class="keyword">if</span> (size2.height <span class="operator">&gt;</span> allLineHeight)</span><br><span class="line">               <span class="keyword">return</span> i <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> [string length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、返回label每一行字符串内容："><a href="#3、返回label每一行字符串内容：" class="headerlink" title="3、返回label每一行字符串内容："></a>3、返回label每一行字符串内容：</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">import</span> &lt;CoreText/CoreText.h&gt;</span><br><span class="line"><span class="operator">-</span>(<span class="type">NSArray</span> <span class="operator">*</span>)getLinesArrayOfStringInLabel:(<span class="type">NSString</span> <span class="operator">*</span>)text andFont:(<span class="type">UIFont</span> <span class="operator">*</span>)font andWidth:(<span class="type">CGFloat</span>)width</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//NSString *text = [label text];</span></span><br><span class="line">    <span class="comment">//UIFont   *font = [label font];</span></span><br><span class="line">    <span class="comment">//CGRect    rect = [label frame];</span></span><br><span class="line">    <span class="type">CTFontRef</span> myFont <span class="operator">=</span> <span class="type">CTFontCreateWithName</span>((<span class="type">CFStringRef</span>)font.fontName,</span><br><span class="line">                                            font.pointSize,</span><br><span class="line">                                            <span class="type">NULL</span>);</span><br><span class="line">    <span class="type">NSMutableAttributedString</span> <span class="operator">*</span>attStr <span class="operator">=</span> [[<span class="type">NSMutableAttributedString</span> alloc] initWithString:text];</span><br><span class="line">    [attStr addAttribute:(<span class="type">NSString</span> <span class="operator">*</span>)kCTFontAttributeName value:(__bridge id)myFont range:<span class="type">NSMakeRange</span>(<span class="number">0</span>, attStr.length)];</span><br><span class="line">    <span class="type">CTFramesetterRef</span> frameSetter <span class="operator">=</span> <span class="type">CTFramesetterCreateWithAttributedString</span>((__bridge <span class="type">CFAttributedStringRef</span>)attStr);</span><br><span class="line">    <span class="type">CGMutablePathRef</span> path <span class="operator">=</span> <span class="type">CGPathCreateMutable</span>();</span><br><span class="line">    <span class="type">CGPathAddRect</span>(path, <span class="type">NULL</span>, <span class="type">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,width,<span class="number">100000</span>));</span><br><span class="line">    <span class="type">CTFrameRef</span> frame <span class="operator">=</span> <span class="type">CTFramesetterCreateFrame</span>(frameSetter, <span class="type">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), path, <span class="type">NULL</span>);</span><br><span class="line">    <span class="type">NSArray</span> <span class="operator">*</span>lines <span class="operator">=</span> (__bridge <span class="type">NSArray</span> <span class="operator">*</span>)<span class="type">CTFrameGetLines</span>(frame);</span><br><span class="line">    <span class="type">NSMutableArray</span> <span class="operator">*</span>linesArray <span class="operator">=</span> [[<span class="type">NSMutableArray</span> alloc]<span class="keyword">init</span>];</span><br><span class="line">    <span class="keyword">for</span> (id line <span class="keyword">in</span> lines)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">CTLineRef</span> lineRef <span class="operator">=</span> (__bridge <span class="type">CTLineRef</span> )line;</span><br><span class="line">        <span class="type">CFRange</span> lineRange <span class="operator">=</span> <span class="type">CTLineGetStringRange</span>(lineRef);</span><br><span class="line">        <span class="type">NSRange</span> range <span class="operator">=</span> <span class="type">NSMakeRange</span>(lineRange.location, lineRange.length);</span><br><span class="line">        <span class="type">NSString</span> <span class="operator">*</span>lineString <span class="operator">=</span> [text substringWithRange:range];</span><br><span class="line">        [linesArray addObject:lineString];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">NSArray</span> <span class="operator">*</span>)linesArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、获取label固定行数的字符串长度："><a href="#4、获取label固定行数的字符串长度：" class="headerlink" title="4、获取label固定行数的字符串长度："></a>4、获取label固定行数的字符串长度：</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> (<span class="type">NSUInteger</span>)fitString:(<span class="type">NSString</span> <span class="operator">*</span>)string intoLabel:(<span class="type">UILabel</span> <span class="operator">*</span>)label lineCount:(<span class="type">NSUInteger</span>)count</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">NSMutableParagraphStyle</span> <span class="operator">*</span>style <span class="operator">=</span> [[<span class="type">NSMutableParagraphStyle</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">    [style setLineBreakMode:label.lineBreakMode];</span><br><span class="line">    <span class="type">NSDictionary</span> <span class="operator">*</span>attributes <span class="operator">=</span> @&#123; <span class="type">NSFontAttributeName</span> : label.font, <span class="type">NSParagraphStyleAttributeName</span> : style &#125;;</span><br><span class="line">    <span class="type">CGSize</span> size <span class="operator">=</span> [string boundingRectWithSize:<span class="type">CGSizeMake</span>(cellWidth <span class="operator">-</span> <span class="number">84</span> <span class="operator">-</span> <span class="number">24</span>, <span class="type">CGFLOAT_MAX</span>)</span><br><span class="line">                                       options:<span class="type">NSStringDrawingUsesLineFragmentOrigin</span></span><br><span class="line">                                    attributes:attributes</span><br><span class="line">                                       context:<span class="literal">nil</span>].size;</span><br><span class="line">    <span class="type">CGFloat</span> allLineHeight <span class="operator">=</span> label.font.lineHeight<span class="operator">*</span>count;</span><br><span class="line">    <span class="keyword">if</span> (size.height<span class="operator">&gt;</span>allLineHeight) &#123;</span><br><span class="line">        <span class="type">NSString</span> <span class="operator">*</span>adjustedString;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">NSUInteger</span> i <span class="operator">=</span> <span class="number">1</span>; i <span class="operator">&lt;</span> [string length]; i<span class="operator">++</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            adjustedString <span class="operator">=</span> [string substringToIndex:i];</span><br><span class="line">            <span class="type">CGSize</span> size2 <span class="operator">=</span> [adjustedString boundingRectWithSize:<span class="type">CGSizeMake</span>(cellWidth <span class="operator">-</span> <span class="number">84</span> <span class="operator">-</span> <span class="number">24</span>, <span class="type">MAXFLOAT</span>)                                                        options:<span class="type">NSStringDrawingUsesLineFragmentOrigin</span></span><br><span class="line">                                                     attributes:attributes</span><br><span class="line">                                                        context:<span class="literal">nil</span>].size;</span><br><span class="line">                <span class="keyword">if</span> (size2.height <span class="operator">&gt;</span> allLineHeight)</span><br><span class="line">                <span class="keyword">return</span> i <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [string length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次与 DeepSeek 闲聊</title>
    <url>/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/</url>
    <content><![CDATA[<h1 id="第一次与-DeepSeek-闲聊"><a href="#第一次与-DeepSeek-闲聊" class="headerlink" title="第一次与 DeepSeek 闲聊"></a>第一次与 DeepSeek 闲聊</h1><h2 id="认知"><a href="#认知" class="headerlink" title="认知"></a>认知</h2><p>问问他是谁？</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394331659337.jpg"></p>
<span id="more"></span>

<p>猜猜我是谁？</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394331870518.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394332250289.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394332510099.jpg"></p>
<p>初步探索，发现 DeepSeek 在认知方面非常清晰。</p>
<h2 id="文学性"><a href="#文学性" class="headerlink" title="文学性"></a>文学性</h2><p>让 DeepSeek 写写诗，讨论一下 我最喜欢的文学作品《红楼梦》。</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394334586394.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394334841507.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394334983054.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394335403760.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394335678901.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394335841573.jpg"></p>
<p>DeepSeek 在写诗和作词方面的能力可以说是非常优秀了。但是还是有一个弊端，同样的问题再提一遍的话，可能还是相同的回答。</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394340026494.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394340148141.jpg"></p>
<p>对比一下 ChatGPT 的回答：</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394340932045.jpg"></p>
<p>可以说， DeepSeek 是全面领先了！</p>
<p>继续往下，看一下 DeepSeek 对红楼梦细节的了解和理解。</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394348961217.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394349128924.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394349254433.jpg"></p>
<p>再对比一下 ChatGPT：</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394349873445.jpg"></p>
<p>是不是又碾压了。</p>
<p>接下来问一个经典问题：</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394350676069.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394350812486.jpg"></p>
<p>这个回答真的太厉害了，对比 ChatGPT ：</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394351551976.jpg"></p>
<p>ChatGPT 简直连小学生都不如！</p>
<p>最后一个问题，重写红楼梦结局，这个也是我非常喜欢问 AI 的问题。</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394353064611.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394353332103.jpg"></p>
<p>这个回答中规中矩，非常符合原著设定。</p>
<p>对于红楼梦的了解和理解，DeepSeek 还是有一定深度的，但是有时候，它也会捏造一些事实，让它们看起来煞有介事，了解内情的人一看就知道是假的，所以，在使用时还是要自己甄别。</p>
<h2 id="技术与代码"><a href="#技术与代码" class="headerlink" title="技术与代码"></a>技术与代码</h2><p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394356073888.jpg"></p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394356682585.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394357034760.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394357295787.jpg"><br><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8E-DeepSeek-%E9%97%B2%E8%81%8A/17394357395582.jpg"></p>
<p>这个回答确实帮我解决了问题，可以说非常棒了！</p>
<p>第一次与 DeepSeek 闲聊，感觉非常愉悦，它有自己的理解和深度，在某些方面它极其精通，但也有不擅长的东西，有时候，它会捏造一些事实，让它们看起来煞有介事，只有了解内情的人看到才知道是假的。所以，在使用 DeekSeep 时，不能一味的相信，还是要自己仔细甄别一下。</p>
<p>但是瑕不掩瑜，总体来说，DeepSeek 非常牛逼！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>【iOS】集成阿里云消息推送</title>
    <url>/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<h1 id="集成阿里云消息推送"><a href="#集成阿里云消息推送" class="headerlink" title="集成阿里云消息推送"></a>集成阿里云消息推送</h1><h2 id="基本的业务流程："><a href="#基本的业务流程：" class="headerlink" title="基本的业务流程："></a>基本的业务流程：</h2><p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782576576028.jpg"></p>
<span id="more"></span>

<p>集成阿里云消息推送的流程基本如上图所示，还是比较简单的，我们只需要重点关注一下红框中的部分。</p>
<p>下面我们就来分步骤讲解一下：</p>
<h3 id="一：创建应用"><a href="#一：创建应用" class="headerlink" title="一：创建应用"></a>一：创建应用</h3><p>创建应用获取初始化推送所需的AppKey和Secret</p>
<h4 id="1-登录阿里云控制台，添加产品"><a href="#1-登录阿里云控制台，添加产品" class="headerlink" title="1. 登录阿里云控制台，添加产品"></a>1. 登录阿里云控制台，添加产品</h4><p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782584388892.jpg"></p>
<h4 id="2-点击添加应用，创建ios和android对应的平台"><a href="#2-点击添加应用，创建ios和android对应的平台" class="headerlink" title="2. 点击添加应用，创建ios和android对应的平台"></a>2. 点击添加应用，创建ios和android对应的平台</h4><p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782585058067.jpg"></p>
<h3 id="二：上传证书"><a href="#二：上传证书" class="headerlink" title="二：上传证书"></a>二：上传证书</h3><p>集成阿里云推送，我们需要在阿里云控制台上传两个证书，分别是<strong>开发环境的推送证书</strong>和<strong>生成环境的推送证书</strong>，如下图所示：</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782586952344.jpg"></p>
<p>那么我们要如何获取这两个证书呢？</p>
<h4 id="1-获取CSR文件"><a href="#1-获取CSR文件" class="headerlink" title="1.获取CSR文件"></a>1.获取CSR文件</h4><p>1.1 在Mac的应用程序中打开钥匙串访问，在顶部菜单栏中选择钥匙串访问&gt;证书助理&gt;从证书颁发机构请求证书</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782592582016.jpg"></p>
<p>1.2 在弹出的证书信息中，输入邮箱地址，设置选择储存到磁盘，单击继续将CSR文件存储到本地</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782593206219.jpg"></p>
<p>1.3 生成之后，在目录下找到此文件</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782593919466.jpg"></p>
<h4 id="2-生成AppID"><a href="#2-生成AppID" class="headerlink" title="2.生成AppID"></a>2.生成AppID</h4><p>2.1 登录 <a href="https://developer.apple.com/account">Apple Developer</a>，选择Certificates，Identifiers &amp; Profiles选项</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782595884680.jpg"></p>
<p>2.2 选择Identifiers，项目如果是自动证书管理的话我们可以看到一些以 <code>XC</code>开头的 Bundle ID ，如下图所示：</p>
<p>如果是手动证书管理，需要点击<code>+</code>号创建 App ID，此处我们自动证书管理为例。</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782596990503.jpg"></p>
<p>2.3 在上图的 Identifiers 列表中选择需要配置推送的<br>Bundle ID。（如果列表中没有，可以在Xcode工程中配置）</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782603043050.jpg"></p>
<p>在上图配置文件中填写Bundle ID，然后勾选<code>Automatically manage signing</code>，在下图弹框中选择<code>Enable Automatic</code>，然后回到<a href="https://developer.apple.com/account">Apple Developer</a>，就可以<code>Identifiers</code>列表中看到我们刚才设置的<code>Bundle ID</code>了。</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782604788362.jpg"></p>
<p>2.4 点击Identifiers 列表进入详情，向下划动找到<code>Push Notification</code>选项，勾选开启远程推送服务</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782606658935.jpg"></p>
<h4 id="3-创建生产和开发推送证书"><a href="#3-创建生产和开发推送证书" class="headerlink" title="3.创建生产和开发推送证书"></a>3.创建生产和开发推送证书</h4><p>3.1 点击上图中的<code>Edit</code>按钮，进入配置页面</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782609693712.jpg"></p>
<p>3.2 单击<code>Choose File</code>上传已获取到的CSR文件</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782610616057.jpg"></p>
<p>3.3 生成后，<code>download</code>到本地</p>
<p>3.4 双击打开并安装证书，系统会自动将其导入到钥匙串中</p>
<p>3.5 在Mac中打开钥匙串应用，选择登录&gt;证书，分别右键导出开发环境（<code>Apple Sandbox Push Services</code>）和生产环境(<code>Apple Push Services</code>)的<code>.P12</code>证书文件</p>
<p><font color="#ff0000">此处导出.p12文件时需要设置密码，阿里云配置证书时必填</font></p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782614735761.jpg"></p>
<p>导出结果如下：</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782616606924.jpg"></p>
<p>3.6 在阿里云控制台配置相应的开发和生产证书，如下图所示：</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782617708004.jpg"></p>
<h3 id="三：下载配置文件并集成"><a href="#三：下载配置文件并集成" class="headerlink" title="三：下载配置文件并集成"></a>三：下载配置文件并集成</h3><p>1.在阿里云控制台应用设置找到相应应用，点击<code>iOS配置下载</code>，将我们刚才生成好的配置文件下载下来，如下图所示：</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782621859000.jpg"></p>
<p>下载完成之后，文件如下图：</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782626642638.jpg"></p>
<p>将此文件导入到工程中，可以通过<code>CloudPushSDK.autoInit</code>方法自动生成推送配置，下文<strong>功能实现</strong>模块我们将做详细介绍。</p>
<h3 id="四：下载推送SDK与集成"><a href="#四：下载推送SDK与集成" class="headerlink" title="四：下载推送SDK与集成"></a>四：下载推送SDK与集成</h3><h4 id="1-集成SDK"><a href="#1-集成SDK" class="headerlink" title="1.集成SDK"></a>1.集成SDK</h4><p>一共有两种方法，手动集成和Pod集成，这里我们主要介绍pod集成的方法。</p>
<p>1.1 在Podfile中添加阿里云仓库source源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source &#x27;https://github.com/aliyun/aliyun-specs.git&#x27;</span><br></pre></td></tr></table></figure>

<p>1.2 pod 阿里云推送</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;AlicloudPush&#x27;, &#x27;~&gt; 1.9.9.5&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="2-引入头文件"><a href="#2-引入头文件" class="headerlink" title="2.引入头文件"></a>2.引入头文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import CloudPushSDK</span><br></pre></td></tr></table></figure>

<p>或者OC桥接文件中引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;CloudPushSDK/CloudPushSDK.h&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-Objc配置"><a href="#3-Objc配置" class="headerlink" title="3.Objc配置"></a>3.Objc配置</h4><p>iOS端集成SDK时需要做<code>-ObjC</code>配置 ，即应用的 <em>TARGETS -&gt; Build Settings -&gt; Linking -&gt; Other Linker Flags</em> ，需添加上<code>-ObjC</code>这个属性，否则推送服务无法正常使用 。</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782636066930.jpg"></p>
<h4 id="4-打开系统通知"><a href="#4-打开系统通知" class="headerlink" title="4.打开系统通知"></a>4.打开系统通知</h4><p><font color="#ff0000">注意：此处千万不要忘记打开，否则收不到推送，这是一个小点，很难定位</font></p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782638087381.jpg"></p>
<h3 id="五：功能实现"><a href="#五：功能实现" class="headerlink" title="五：功能实现"></a>五：功能实现</h3><p>推送功能主要在<code>AppDelegate</code>文件中实现</p>
<h4 id="1-初始化SDK"><a href="#1-初始化SDK" class="headerlink" title="1.初始化SDK"></a>1.初始化SDK</h4><p>使用配置文件<code>AliyunEmasServices-Info.plist</code>直接调用<code>autoInit</code>，这个在前文有提到过。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">setup</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">launchOptions</span>: [<span class="params">UIApplicationLaunchOptionsKey</span>: <span class="keyword">Any</span>]<span class="operator">?</span>) &#123;</span><br><span class="line">    <span class="type">CloudPushSDK</span>.autoInit &#123; result <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> result <span class="operator">=</span> result <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Push SDK init failed, error: result is nil!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> result.success &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;Push SDK init success, deviceId: <span class="subst">\(String(describing: CloudPushSDK.getDeviceId()))</span>&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Push SDK init failed, error: <span class="subst">\(String(describing: result.error))</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">// 点击通知将App从关闭状态启动时，将通知打开回执上报</span></span><br><span class="line">    <span class="type">CloudPushSDK</span>.sendNotificationAck(launchOptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-请求通知权限并注册远程通知"><a href="#2-请求通知权限并注册远程通知" class="headerlink" title="2.请求通知权限并注册远程通知"></a>2.请求通知权限并注册远程通知</h4><p>第一次安装会弹出请求通知的<code>alert</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">registerAPNS</span>(<span class="params">application</span>: <span class="type">UIApplication</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> center <span class="operator">=</span> <span class="type">UNUserNotificationCenter</span>.current()</span><br><span class="line">    center.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    <span class="keyword">var</span> options: <span class="type">UNAuthorizationOptions</span> <span class="operator">=</span> [.alert, .sound, .badge]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">12.0</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">        options <span class="operator">=</span> [.alert, .sound, .badge, .providesAppNotificationSettings]</span><br><span class="line">    &#125;</span><br><span class="line">    center.requestAuthorization(options: options) &#123; (granted, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> granted &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;User authored notification.&quot;</span>)</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                application.registerForRemoteNotifications()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;User denied notification.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">            log.error(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-注册设备并上报deviceToken"><a href="#3-注册设备并上报deviceToken" class="headerlink" title="3.注册设备并上报deviceToken"></a>3.注册设备并上报deviceToken</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">registerDevice</span>(<span class="keyword">_</span> <span class="params">deviceToken</span>: <span class="type">Data</span>) &#123;</span><br><span class="line">    <span class="type">CloudPushSDK</span>.registerDevice(deviceToken) &#123; result <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> result <span class="operator">=</span> result <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Register deviceToken failed, error:: result is nil!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> result.success &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;Register deviceToken success, deviceToken: <span class="subst">\(String(describing: CloudPushSDK.getApnsDeviceToken()))</span>&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;Register deviceToken failed, error: <span class="subst">\(String(describing: result.error))</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>,</span><br><span class="line">                        <span class="params">didRegisterForRemoteNotificationsWithDeviceToken</span> <span class="params">deviceToken</span>: <span class="type">Data</span>) &#123;</span><br><span class="line">    registerDevice(deviceToken)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册失败</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>,</span><br><span class="line">                        <span class="params">didFailToRegisterForRemoteNotificationsWithError</span> <span class="params">error</span>: <span class="type">Error</span>) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;did Fail To Register For Remote Notifications With Error : <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-注册通知类别"><a href="#4-注册通知类别" class="headerlink" title="4.注册通知类别"></a>4.注册通知类别</h4><p>通知类别（category）用于给通知分类，可添加按钮或自定义UI</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">createCustomNotificationCategory</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> action <span class="operator">=</span> <span class="type">UNNotificationAction</span>(identifier: <span class="string">&quot;actionID&quot;</span>, title: <span class="string">&quot;buttonTitle&quot;</span>, options: [])</span><br><span class="line">    <span class="keyword">let</span> category <span class="operator">=</span> <span class="type">UNNotificationCategory</span>(identifier: <span class="string">&quot;CategoryID&quot;</span>, actions: [action],</span><br><span class="line">                                          intentIdentifiers: [],</span><br><span class="line">                                          options: .customDismissAction)</span><br><span class="line">    <span class="type">UNUserNotificationCenter</span>.current().setNotificationCategories([category])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-UNUserNotificationCenterDelegate"><a href="#5-UNUserNotificationCenterDelegate" class="headerlink" title="5.UNUserNotificationCenterDelegate"></a>5.UNUserNotificationCenterDelegate</h4><p><code>UNUserNotificationCenterDelegate</code>代替了<code>UIAppDelegate</code>的旧通知接收方法<code>didReceiveRemoteNotification</code>将接收通知的情况分为app开启时（foreground）和app不在前台时（background）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app打开时调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">userNotificationCenter</span>(<span class="keyword">_</span> <span class="params">center</span>: <span class="type">UNUserNotificationCenter</span>,</span><br><span class="line">                                   <span class="params">willPresent</span> <span class="params">notification</span>: <span class="type">UNNotification</span>,</span><br><span class="line">                                   <span class="params">withCompletionHandler</span> <span class="params">completionHandler</span>: <span class="keyword">@escaping</span> (<span class="type">UNNotificationPresentationOptions</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">    handleNotification(notification)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在app内弹通知</span></span><br><span class="line">    completionHandler([.badge, .alert, .sound])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app未打开时调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">userNotificationCenter</span>(<span class="keyword">_</span> <span class="params">center</span>: <span class="type">UNUserNotificationCenter</span>, <span class="params">didReceive</span> <span class="params">response</span>: <span class="type">UNNotificationResponse</span>, <span class="params">withCompletionHandler</span> <span class="params">completionHandler</span>: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> userAction <span class="operator">=</span> response.actionIdentifier</span><br><span class="line">    <span class="keyword">if</span> userAction <span class="operator">==</span> <span class="type">UNNotificationDefaultActionIdentifier</span> &#123; </span><br><span class="line">        <span class="comment">// 点击通知栏本身</span></span><br><span class="line">        log.debug(<span class="string">&quot;User opened the notification.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        handleNotification(response.notification)</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> userAction <span class="operator">==</span> <span class="type">UNNotificationDismissActionIdentifier</span> &#123;</span><br><span class="line">        <span class="comment">// 通知dismiss，category创建时传入UNNotificationCategoryOptionCustomDismissAction才可以触发</span></span><br><span class="line">        log.debug(<span class="string">&quot;User dismissed the notification.&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> userAction <span class="operator">==</span> <span class="string">&quot;actionID&quot;</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义按钮逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    completionHandler()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// iOS12新功能，在app系统通知设置里点击按钮跳到app内通知设置的回调</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">userNotificationCenter</span>(<span class="keyword">_</span> <span class="params">center</span>: <span class="type">UNUserNotificationCenter</span>, <span class="params">openSettingsFor</span> <span class="params">notification</span>: <span class="type">UNNotification</span>?) &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;Open notification in-app setting.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="扩展功能：Notification-Service-Extension（富媒体推送）"><a href="#扩展功能：Notification-Service-Extension（富媒体推送）" class="headerlink" title="扩展功能：Notification Service Extension（富媒体推送）"></a>扩展功能：Notification Service Extension（富媒体推送）</h2><p>众所周知，苹果的apns推送有一个痛点（当然Apple觉得这是亮点），就是<strong>在我们不点击通知时，app是不会执行任何代码的</strong>，这就是静默推送，虽然app能收到推送，但是它不执行任何代码，这极大的保护了手机性能，却也让开发者没办法对推送内容进行修改了。</p>
<p>那么问题来了，Apple真的不让开发者动态修改推送内容了吗？</p>
<p>不然，Apple还是很有良心的，在静默推送修改之后，它也推出了另一功能<code>Notification Service Extension</code>，它为我们完美解决了对推送内容进行动态修改的需求，接下来我们就来看一下这一功能：</p>
<h3 id="了解Notification-Service-Extension"><a href="#了解Notification-Service-Extension" class="headerlink" title="了解Notification Service Extension"></a>了解Notification Service Extension</h3><ul>
<li><p>iOS 10添加了通知相关的扩展Notification Service Extension，使得通知弹出前可以对通知内容进行修改。</p>
</li>
<li><p>iOS远程推送过程如下图所示，APNs推送的通知直接在设备上弹出；</p>
</li>
</ul>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782654264853.jpg"></p>
<ul>
<li>添加Notification Service Extension后，如下图所示，APNs推送的通知在弹出前，可先到达Extension进行处理。</li>
</ul>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782655214693.jpg"></p>
<p><font color="#ff0000">【注意】OpenAPI 需要调用 setiOSMutableContent(true) 接口，这样Extension才可生效。这里的OpenAPI就是阿里云API了，让后台配置一下setiOSMutableContent(true)就好。</font></p>
<h3 id="使用Notification-Service-Extension"><a href="#使用Notification-Service-Extension" class="headerlink" title="使用Notification Service Extension"></a>使用Notification Service Extension</h3><h4 id="1、点击-file-gt-new-gt-target"><a href="#1、点击-file-gt-new-gt-target" class="headerlink" title="1、点击 file-&gt;new-&gt;target"></a>1、点击 file-&gt;new-&gt;target</h4><p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782671772445.jpg"></p>
<h4 id="2、选择-iOS-gt-Notification-Service-Extension"><a href="#2、选择-iOS-gt-Notification-Service-Extension" class="headerlink" title="2、选择 iOS-&gt;Notification Service Extension"></a>2、选择 iOS-&gt;Notification Service Extension</h4><p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782674597379.jpg"></p>
<h4 id="3、选择创建extension的项目target，输入扩展名称，点击finish，即创建扩展完成"><a href="#3、选择创建extension的项目target，输入扩展名称，点击finish，即创建扩展完成" class="headerlink" title="3、选择创建extension的项目target，输入扩展名称，点击finish，即创建扩展完成"></a>3、选择创建extension的项目target，输入扩展名称，点击finish，即创建扩展完成</h4><p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782674134664.jpg"></p>
<h3 id="配置Extension"><a href="#配置Extension" class="headerlink" title="配置Extension"></a>配置Extension</h3><p>创建完成后，主要有两个文件<code>NotificationService.swift</code> 和 <code>info.plist</code></p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782676305569.jpg"></p>
<p>1、首先，需要在扩展对应的target-&gt;Signing&amp;Capabilities，点击+Capability，添加push notification</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782676848331.jpg"></p>
<p>2、<code>NotificationService.swift</code>中主要有两个方法</p>
<p>1）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">didReceive</span>(<span class="keyword">_</span> <span class="params">request</span>: <span class="type">UNNotificationRequest</span>, <span class="params">withContentHandler</span> <span class="params">contentHandler</span>: <span class="keyword">@escaping</span> (<span class="type">UNNotificationContent</span>) -&gt; <span class="type">Void</span>)</span><br></pre></td></tr></table></figure>

<p>该方法主要是用于在接受到推送时，针对推送内容进行修改，修改完成后展示给用户</p>
<p>2）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">serviceExtensionTimeWillExpire</span>()</span><br></pre></td></tr></table></figure>

<p>该方法是用于在方法1）中如果没有向用户展示推送，可以在这里（即apns即将到30s时）向用户推送</p>
<p>3、推送的消息中必须具备alert和<code>&quot;mutable-content&quot;:&quot;1&quot;</code>（表示推送可修改），这个上文有提到过，OpenAPI 需要调用 <code>setiOSMutableContent(true)</code> 接口，发送出来的消息结构中就会有<code>&quot;mutable-content&quot;:&quot;1&quot;</code>。</p>
<p>接下来，我们就可以对接收到的推送消息做自定义动态修改了。如下图所示：</p>
<p><img data-src="/iOS/%E3%80%90iOS%E3%80%91%E9%9B%86%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/16782680346445.jpg"></p>
<p>然后我们就可以看到手机接收到的推送变了。</p>
<p>🎉🎉🎉 完结撒花 🎉🎉🎉！</p>
<p>❤️ Best wish for you ❤️！</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次与ChatGPT闲聊</title>
    <url>/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/</url>
    <content><![CDATA[<h1 id="第一次与ChatGPT闲聊"><a href="#第一次与ChatGPT闲聊" class="headerlink" title="第一次与ChatGPT闲聊"></a>第一次与ChatGPT闲聊</h1><p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792994415736.jpg"></p>
<span id="more"></span>

<p>开局来一个盲猜，哈哈！</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792994578027.jpg"></p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792994726246.jpg"></p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792994851225.jpg"></p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792994960092.jpg"></p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792995226589.jpg"></p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792995362169.jpg"></p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792995475238.jpg"></p>
<p>以上回答都比较中规中矩，而且流于表面，没有什么深刻的理解。</p>
<p>怎么说呢，就好比小学生囫囵吞枣读了一遍红楼，来参加知识竞赛一样，虽然知道一点，但是理解不深，有知识架构，但是没有个人观点的沉淀，甚至还有可能出错和闹笑话，下面错误和笑话就来了。</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792999646971.jpg"></p>
<p>薛蟠这个回答是我万万没有想到的！</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792995731944.jpg"></p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792995866936.jpg"></p>
<p>更有甚者，当我问及秦可卿的死因时，它的回答竟是这样的：</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792996066039.jpg"></p>
<p>这个回答纯属瞎编乱造！</p>
<p><img data-src="/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8EChatGPT%E9%97%B2%E8%81%8A/16792996214610.jpg"></p>
<p>这个结局确实是一个方向，但是，相信绝不是大多数红迷想要的。</p>
<p>第一次和ChatGPT闲聊，竟然问了很多和《红楼梦》相关的问题，估计ChatGPT都没想到吧，差点被我给整晕了…</p>
<p>未完待续…期待后续的发掘</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>AI</tag>
      </tags>
  </entry>
</search>
